generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?   @map("password_hash")
  displayName    String?   @map("display_name")
  role           UserRole  @default(CLIENT)
  status         UserStatus @default(ACTIVE)
  image          String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  sessions Session[] @relation("UserSessions")
  accounts Account[] @relation("UserAccounts")
  profile CustomerProfile? @relation("UserCustomerProfile")
  notifications Notification[] @relation("UserNotifications")
  orders Order[] @relation("UserOrders")
  notificationPreference NotificationPreference? @relation("UserNotificationPreference")
  invoices Invoice[] @relation("UserInvoices")

  @@map("users")
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  CLIENT
  ADMIN
  FINANCE
}

enum UserStatus {
  ACTIVE
  INVITED
  SUSPENDED
}

enum Currency {
  EUR
  USD
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PROCESSING
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELED
}

enum OrderSource {
  CHECKOUT
  MANUAL
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  MANUAL
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

model CustomerProfile {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @unique @map("user_id")
  companyName      String?  @map("company_name")
  vatId            String?  @map("vat_id")
  streetAddress    String?  @map("street_address")
  city             String?
  postalCode       String?  @map("postal_code")
  country          String?  @db.Char(2)
  instagramHandle  String?  @map("instagram_handle")
  preferredCurrency Currency @default(EUR) @map("preferred_currency")
  marketingConsent Boolean  @default(false) @map("marketing_consent")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user User @relation("UserCustomerProfile", fields: [userId], references: [id], onDelete: Cascade)

  @@map("customer_profiles")
}

model Notification {
  id                 String              @id @default(uuid()) @db.Uuid
  userId             String?             @map("user_id")
  channel            NotificationChannel @default(EMAIL)
  status             NotificationStatus  @default(PENDING)
  category           String
  subject            String?
  body               String?
  provider           String?
  providerMessageId  String?             @map("provider_message_id")
  error              String?
  createdAt          DateTime            @default(now()) @map("created_at")
  sentAt             DateTime?           @map("sent_at")

  user User? @relation("UserNotifications", fields: [userId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

model NotificationPreference {
  id                 String  @id @default(uuid()) @db.Uuid
  userId             String  @unique @map("user_id")
  orderUpdates       Boolean @default(true) @map("order_updates")
  paymentUpdates     Boolean @default(true) @map("payment_updates")
  fulfillmentAlerts  Boolean @default(true) @map("fulfillment_alerts")
  marketingMessages  Boolean @default(false) @map("marketing_messages")
  billingAlerts      Boolean @default(false) @map("billing_alerts")
  lastSelectedOrderId String? @map("last_selected_order_id")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  user User @relation("UserNotificationPreference", fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  PAID
  VOID
  OVERDUE
}

model Invoice {
  id            String        @id @default(uuid()) @db.Uuid
  workspaceId   String        @map("workspace_id")
  invoiceNumber String        @unique @map("invoice_number")
  status        InvoiceStatus @default(ISSUED)
  currency      Currency      @default(EUR)
  subtotal      Decimal       @default(0) @db.Decimal(12, 2)
  tax           Decimal       @default(0) @db.Decimal(12, 2)
  total         Decimal       @default(0) @db.Decimal(12, 2)
  balanceDue    Decimal       @default(0) @map("balance_due") @db.Decimal(12, 2)
  issuedAt      DateTime      @default(now()) @map("issued_at")
  dueAt         DateTime      @map("due_at")
  paidAt        DateTime?     @map("paid_at")
  memo          String?
  metadata      Json?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  lineItems InvoiceLineItem[]
  workspace User @relation("UserInvoices", fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("invoices")
  @@index([workspaceId], map: "idx_invoices_workspace")
}

model InvoiceLineItem {
  id                String  @id @default(uuid()) @db.Uuid
  invoiceId         String  @map("invoice_id")
  orderId           String? @map("order_id")
  description       String
  quantity          Decimal @default(1) @db.Decimal(10, 2)
  unitAmount        Decimal @map("unit_amount") @db.Decimal(12, 2)
  totalAmount       Decimal @map("total_amount") @db.Decimal(12, 2)
  campaignReference String? @map("campaign_reference")
  metadata          Json?
  displayOrder      Int     @default(0) @map("display_order")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@map("invoice_line_items")
  @@index([invoiceId], map: "idx_invoice_line_items_invoice")
}

model Product {
  id          String        @id @default(uuid()) @db.Uuid
  slug        String        @unique
  title       String
  description String?
  category    String
  basePrice   Decimal       @map("base_price") @db.Decimal(10, 2)
  currency    Currency      @default(EUR)
  status      ProductStatus @default(DRAFT)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  optionGroups ProductOptionGroup[]
  orderItems   OrderItem[]

  @@map("products")
}

model ProductOptionGroup {
  id          String     @id @default(uuid()) @db.Uuid
  productId   String     @map("product_id")
  name        String
  description String?
  isRequired  Boolean    @default(false) @map("is_required")
  displayOrder Int       @default(0) @map("display_order")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  options ProductOption[]

  @@map("product_option_groups")
}

model ProductOption {
  id          String   @id @default(uuid()) @db.Uuid
  groupId     String   @map("group_id")
  name        String
  description String?
  priceDelta  Decimal  @default(0) @map("price_delta") @db.Decimal(10, 2)
  metadata    Json?    @map("metadata_json")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  group ProductOptionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("product_options")
}

model Order {
  id         String      @id @default(uuid()) @db.Uuid
  orderNumber String     @unique @map("order_number")
  userId     String?     @map("user_id")
  status     OrderStatus @default(PENDING)
  source     OrderSource @default(CHECKOUT)
  subtotal   Decimal     @default(0) @db.Decimal(12, 2)
  tax        Decimal     @default(0) @db.Decimal(12, 2)
  total      Decimal     @default(0) @db.Decimal(12, 2)
  currency   Currency    @default(EUR)
  notes      String?
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  user    User? @relation("UserOrders", fields: [userId], references: [id], onDelete: SetNull)
  items   OrderItem[]
  payments Payment[]

  @@map("orders")
}

model OrderItem {
  id            String  @id @default(uuid()) @db.Uuid
  orderId       String  @map("order_id")
  productId     String? @map("product_id")
  productTitle  String  @map("product_title")
  quantity      Int     @default(1)
  unitPrice     Decimal @map("unit_price") @db.Decimal(12, 2)
  totalPrice    Decimal @map("total_price") @db.Decimal(12, 2)
  selectedOptions Json? @map("selected_options")
  attributes    Json?   @map("attributes")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@map("order_items")
}

model Payment {
  id               String          @id @default(uuid()) @db.Uuid
  orderId          String          @map("order_id")
  provider         PaymentProvider @default(STRIPE)
  providerReference String         @unique @map("provider_reference")
  status           PaymentStatus   @default(PENDING)
  amount           Decimal         @db.Decimal(12, 2)
  currency         Currency        @default(EUR)
  failureReason    String?         @map("failure_reason")
  capturedAt       DateTime?       @map("captured_at")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}
