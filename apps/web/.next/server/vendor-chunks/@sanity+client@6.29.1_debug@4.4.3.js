"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sanity+client@6.29.1_debug@4.4.3";
exports.ids = ["vendor-chunks/@sanity+client@6.29.1_debug@4.4.3"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/@sanity+client@6.29.1_debug@4.4.3/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sanity+client@6.29.1_debug@4.4.3/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ C),\n/* harmony export */   stegaClean: () => (/* binding */ stegaClean),\n/* harmony export */   vercelStegaCleanAll: () => (/* binding */ vercelStegaCleanAll)\n/* harmony export */ });\nvar s = {\n    0: 8203,\n    1: 8204,\n    2: 8205,\n    3: 8290,\n    4: 8291,\n    5: 8288,\n    6: 65279,\n    7: 8289,\n    8: 119155,\n    9: 119156,\n    a: 119157,\n    b: 119158,\n    c: 119159,\n    d: 119160,\n    e: 119161,\n    f: 119162\n}, c = {\n    0: 8203,\n    1: 8204,\n    2: 8205,\n    3: 65279\n}, u = new Array(4).fill(String.fromCodePoint(c[0])).join(\"\");\nfunction E(t) {\n    let e = JSON.stringify(t);\n    return `${u}${Array.from(e).map((r)=>{\n        let n = r.charCodeAt(0);\n        if (n > 255) throw new Error(`Only ASCII edit info can be encoded. Error attempting to encode ${e} on character ${r} (${n})`);\n        return Array.from(n.toString(4).padStart(4, \"0\")).map((o)=>String.fromCodePoint(c[o])).join(\"\");\n    }).join(\"\")}`;\n}\nfunction I(t) {\n    return !Number.isNaN(Number(t)) || /[a-z]/i.test(t) && !/\\d+(?:[-:\\/]\\d+){2}(?:T\\d+(?:[-:\\/]\\d+){1,2}(\\.\\d+)?Z?)?/.test(t) ? !1 : !!Date.parse(t);\n}\nfunction T(t) {\n    try {\n        new URL(t, t.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n    } catch  {\n        return !1;\n    }\n    return !0;\n}\nfunction C(t, e, r = \"auto\") {\n    return r === !0 || r === \"auto\" && (I(t) || T(t)) ? t : `${t}${E(e)}`;\n}\nObject.fromEntries(Object.entries(c).map((t)=>t.reverse()));\nObject.fromEntries(Object.entries(s).map((t)=>t.reverse()));\nvar S = `${Object.values(s).map((t)=>`\\\\u{${t.toString(16)}}`).join(\"\")}`, f = new RegExp(`[${S}]{4,}`, \"gu\");\nfunction _(t) {\n    var e;\n    return {\n        cleaned: t.replace(f, \"\"),\n        encoded: ((e = t.match(f)) == null ? void 0 : e[0]) || \"\"\n    };\n}\nfunction O(t) {\n    return t && JSON.parse(_(JSON.stringify(t)).cleaned);\n}\nfunction stegaClean(result) {\n    return O(result);\n}\nconst vercelStegaCleanAll = stegaClean;\n //# sourceMappingURL=stegaClean.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzYW5pdHkrY2xpZW50QDYuMjkuMV9kZWJ1Z0A0LjQuMy9ub2RlX21vZHVsZXMvQHNhbml0eS9jbGllbnQvZGlzdC9fY2h1bmtzLWVzL3N0ZWdhQ2xlYW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBSUEsSUFBSTtJQUFFLEdBQUc7SUFBTSxHQUFHO0lBQU0sR0FBRztJQUFNLEdBQUc7SUFBTSxHQUFHO0lBQU0sR0FBRztJQUFNLEdBQUc7SUFBTyxHQUFHO0lBQU0sR0FBRztJQUFRLEdBQUc7SUFBUUMsR0FBRztJQUFRQyxHQUFHO0lBQVFDLEdBQUc7SUFBUUMsR0FBRztJQUFRQyxHQUFHO0lBQVFDLEdBQUc7QUFBTyxHQUFHSCxJQUFJO0lBQUUsR0FBRztJQUFNLEdBQUc7SUFBTSxHQUFHO0lBQU0sR0FBRztBQUFNLEdBQUdJLElBQUksSUFBSUMsTUFBTSxHQUFHQyxJQUFJLENBQUNDLE9BQU9DLGFBQWEsQ0FBQ1IsQ0FBQyxDQUFDLEVBQUUsR0FBR1MsSUFBSSxDQUFDO0FBQ2pSLFNBQVNDLEVBQUVDLENBQUM7SUFDVixJQUFJVCxJQUFJVSxLQUFLQyxTQUFTLENBQUNGO0lBQ3ZCLE9BQU8sQ0FBQyxFQUFFUCxFQUFFLEVBQUVDLE1BQU1TLElBQUksQ0FBQ1osR0FBR2EsR0FBRyxDQUFDLENBQUNDO1FBQy9CLElBQUlDLElBQUlELEVBQUVFLFVBQVUsQ0FBQztRQUNyQixJQUFJRCxJQUFJLEtBQUssTUFBTSxJQUFJRSxNQUFNLENBQUMsZ0VBQWdFLEVBQUVqQixFQUFFLGNBQWMsRUFBRWMsRUFBRSxFQUFFLEVBQUVDLEVBQUUsQ0FBQyxDQUFDO1FBQzVILE9BQU9aLE1BQU1TLElBQUksQ0FBQ0csRUFBRUcsUUFBUSxDQUFDLEdBQUdDLFFBQVEsQ0FBQyxHQUFHLE1BQU1OLEdBQUcsQ0FBQyxDQUFDTyxJQUFNZixPQUFPQyxhQUFhLENBQUNSLENBQUMsQ0FBQ3NCLEVBQUUsR0FBR2IsSUFBSSxDQUFDO0lBQ2hHLEdBQUdBLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDZjtBQUNBLFNBQVNjLEVBQUVaLENBQUM7SUFDVixPQUFPLENBQUNhLE9BQU9DLEtBQUssQ0FBQ0QsT0FBT2IsT0FBTyxTQUFTZSxJQUFJLENBQUNmLE1BQU0sQ0FBQywyREFBMkRlLElBQUksQ0FBQ2YsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDZ0IsS0FBS0MsS0FBSyxDQUFDakI7QUFDako7QUFDQSxTQUFTa0IsRUFBRWxCLENBQUM7SUFDVixJQUFJO1FBQ0YsSUFBSW1CLElBQUluQixHQUFHQSxFQUFFb0IsVUFBVSxDQUFDLE9BQU8scUJBQXFCLEtBQUs7SUFDM0QsRUFBRSxPQUFNO1FBQ04sT0FBTyxDQUFDO0lBQ1Y7SUFDQSxPQUFPLENBQUM7QUFDVjtBQUNBLFNBQVNDLEVBQUVyQixDQUFDLEVBQUVULENBQUMsRUFBRWMsSUFBSSxNQUFNO0lBQ3pCLE9BQU9BLE1BQU0sQ0FBQyxLQUFLQSxNQUFNLFVBQVdPLENBQUFBLEVBQUVaLE1BQU1rQixFQUFFbEIsRUFBQyxJQUFLQSxJQUFJLENBQUMsRUFBRUEsRUFBRSxFQUFFRCxFQUFFUixHQUFHLENBQUM7QUFDdkU7QUFDQStCLE9BQU9DLFdBQVcsQ0FBQ0QsT0FBT0UsT0FBTyxDQUFDbkMsR0FBR2UsR0FBRyxDQUFDLENBQUNKLElBQU1BLEVBQUV5QixPQUFPO0FBQ3pESCxPQUFPQyxXQUFXLENBQUNELE9BQU9FLE9BQU8sQ0FBQ3RDLEdBQUdrQixHQUFHLENBQUMsQ0FBQ0osSUFBTUEsRUFBRXlCLE9BQU87QUFDekQsSUFBSUMsSUFBSSxDQUFDLEVBQUVKLE9BQU9LLE1BQU0sQ0FBQ3pDLEdBQUdrQixHQUFHLENBQUMsQ0FBQ0osSUFBTSxDQUFDLElBQUksRUFBRUEsRUFBRVMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUVYLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRU4sSUFBSSxJQUFJb0MsT0FBTyxDQUFDLENBQUMsRUFBRUYsRUFBRSxLQUFLLENBQUMsRUFBRTtBQUMxRyxTQUFTRyxFQUFFN0IsQ0FBQztJQUNWLElBQUlUO0lBQ0osT0FBTztRQUFFdUMsU0FBUzlCLEVBQUUrQixPQUFPLENBQUN2QyxHQUFHO1FBQUt3QyxTQUFTLENBQUMsQ0FBQ3pDLElBQUlTLEVBQUVpQyxLQUFLLENBQUN6QyxFQUFDLEtBQU0sT0FBTyxLQUFLLElBQUlELENBQUMsQ0FBQyxFQUFFLEtBQUs7SUFBRztBQUNoRztBQUNBLFNBQVMyQyxFQUFFbEMsQ0FBQztJQUNWLE9BQU9BLEtBQUtDLEtBQUtnQixLQUFLLENBQUNZLEVBQUU1QixLQUFLQyxTQUFTLENBQUNGLElBQUk4QixPQUFPO0FBQ3JEO0FBQ0EsU0FBU0ssV0FBV0MsTUFBTTtJQUN4QixPQUFPRixFQUFFRTtBQUNYO0FBQ0EsTUFBTUMsc0JBQXNCRjtBQUsxQixDQUNGLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BzbXBsYXQvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FuaXR5K2NsaWVudEA2LjI5LjFfZGVidWdANC40LjMvbm9kZV9tb2R1bGVzL0BzYW5pdHkvY2xpZW50L2Rpc3QvX2NodW5rcy1lcy9zdGVnYUNsZWFuLmpzP2Q0MzkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHMgPSB7IDA6IDgyMDMsIDE6IDgyMDQsIDI6IDgyMDUsIDM6IDgyOTAsIDQ6IDgyOTEsIDU6IDgyODgsIDY6IDY1Mjc5LCA3OiA4Mjg5LCA4OiAxMTkxNTUsIDk6IDExOTE1NiwgYTogMTE5MTU3LCBiOiAxMTkxNTgsIGM6IDExOTE1OSwgZDogMTE5MTYwLCBlOiAxMTkxNjEsIGY6IDExOTE2MiB9LCBjID0geyAwOiA4MjAzLCAxOiA4MjA0LCAyOiA4MjA1LCAzOiA2NTI3OSB9LCB1ID0gbmV3IEFycmF5KDQpLmZpbGwoU3RyaW5nLmZyb21Db2RlUG9pbnQoY1swXSkpLmpvaW4oXCJcIik7XG5mdW5jdGlvbiBFKHQpIHtcbiAgbGV0IGUgPSBKU09OLnN0cmluZ2lmeSh0KTtcbiAgcmV0dXJuIGAke3V9JHtBcnJheS5mcm9tKGUpLm1hcCgocikgPT4ge1xuICAgIGxldCBuID0gci5jaGFyQ29kZUF0KDApO1xuICAgIGlmIChuID4gMjU1KSB0aHJvdyBuZXcgRXJyb3IoYE9ubHkgQVNDSUkgZWRpdCBpbmZvIGNhbiBiZSBlbmNvZGVkLiBFcnJvciBhdHRlbXB0aW5nIHRvIGVuY29kZSAke2V9IG9uIGNoYXJhY3RlciAke3J9ICgke259KWApO1xuICAgIHJldHVybiBBcnJheS5mcm9tKG4udG9TdHJpbmcoNCkucGFkU3RhcnQoNCwgXCIwXCIpKS5tYXAoKG8pID0+IFN0cmluZy5mcm9tQ29kZVBvaW50KGNbb10pKS5qb2luKFwiXCIpO1xuICB9KS5qb2luKFwiXCIpfWA7XG59XG5mdW5jdGlvbiBJKHQpIHtcbiAgcmV0dXJuICFOdW1iZXIuaXNOYU4oTnVtYmVyKHQpKSB8fCAvW2Etel0vaS50ZXN0KHQpICYmICEvXFxkKyg/OlstOlxcL11cXGQrKXsyfSg/OlRcXGQrKD86Wy06XFwvXVxcZCspezEsMn0oXFwuXFxkKyk/Wj8pPy8udGVzdCh0KSA/ICExIDogISFEYXRlLnBhcnNlKHQpO1xufVxuZnVuY3Rpb24gVCh0KSB7XG4gIHRyeSB7XG4gICAgbmV3IFVSTCh0LCB0LnN0YXJ0c1dpdGgoXCIvXCIpID8gXCJodHRwczovL2FjbWUuY29tXCIgOiB2b2lkIDApO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gITE7XG4gIH1cbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gQyh0LCBlLCByID0gXCJhdXRvXCIpIHtcbiAgcmV0dXJuIHIgPT09ICEwIHx8IHIgPT09IFwiYXV0b1wiICYmIChJKHQpIHx8IFQodCkpID8gdCA6IGAke3R9JHtFKGUpfWA7XG59XG5PYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYykubWFwKCh0KSA9PiB0LnJldmVyc2UoKSkpO1xuT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKHMpLm1hcCgodCkgPT4gdC5yZXZlcnNlKCkpKTtcbnZhciBTID0gYCR7T2JqZWN0LnZhbHVlcyhzKS5tYXAoKHQpID0+IGBcXFxcdXske3QudG9TdHJpbmcoMTYpfX1gKS5qb2luKFwiXCIpfWAsIGYgPSBuZXcgUmVnRXhwKGBbJHtTfV17NCx9YCwgXCJndVwiKTtcbmZ1bmN0aW9uIF8odCkge1xuICB2YXIgZTtcbiAgcmV0dXJuIHsgY2xlYW5lZDogdC5yZXBsYWNlKGYsIFwiXCIpLCBlbmNvZGVkOiAoKGUgPSB0Lm1hdGNoKGYpKSA9PSBudWxsID8gdm9pZCAwIDogZVswXSkgfHwgXCJcIiB9O1xufVxuZnVuY3Rpb24gTyh0KSB7XG4gIHJldHVybiB0ICYmIEpTT04ucGFyc2UoXyhKU09OLnN0cmluZ2lmeSh0KSkuY2xlYW5lZCk7XG59XG5mdW5jdGlvbiBzdGVnYUNsZWFuKHJlc3VsdCkge1xuICByZXR1cm4gTyhyZXN1bHQpO1xufVxuY29uc3QgdmVyY2VsU3RlZ2FDbGVhbkFsbCA9IHN0ZWdhQ2xlYW47XG5leHBvcnQge1xuICBDLFxuICBzdGVnYUNsZWFuLFxuICB2ZXJjZWxTdGVnYUNsZWFuQWxsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RlZ2FDbGVhbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJzIiwiYSIsImIiLCJjIiwiZCIsImUiLCJmIiwidSIsIkFycmF5IiwiZmlsbCIsIlN0cmluZyIsImZyb21Db2RlUG9pbnQiLCJqb2luIiwiRSIsInQiLCJKU09OIiwic3RyaW5naWZ5IiwiZnJvbSIsIm1hcCIsInIiLCJuIiwiY2hhckNvZGVBdCIsIkVycm9yIiwidG9TdHJpbmciLCJwYWRTdGFydCIsIm8iLCJJIiwiTnVtYmVyIiwiaXNOYU4iLCJ0ZXN0IiwiRGF0ZSIsInBhcnNlIiwiVCIsIlVSTCIsInN0YXJ0c1dpdGgiLCJDIiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIiwicmV2ZXJzZSIsIlMiLCJ2YWx1ZXMiLCJSZWdFeHAiLCJfIiwiY2xlYW5lZCIsInJlcGxhY2UiLCJlbmNvZGVkIiwibWF0Y2giLCJPIiwic3RlZ2FDbGVhbiIsInJlc3VsdCIsInZlcmNlbFN0ZWdhQ2xlYW5BbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sanity+client@6.29.1_debug@4.4.3/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sanity+client@6.29.1_debug@4.4.3/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js":
/*!**************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sanity+client@6.29.1_debug@4.4.3/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeIntoResult: () => (/* binding */ encodeIntoResult),\n/* harmony export */   stegaEncodeSourceMap: () => (/* binding */ stegaEncodeSourceMap),\n/* harmony export */   stegaEncodeSourceMap$1: () => (/* binding */ stegaEncodeSourceMap$1)\n/* harmony export */ });\n/* harmony import */ var _stegaClean_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stegaClean.js */ \"(rsc)/../../node_modules/.pnpm/@sanity+client@6.29.1_debug@4.4.3/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\");\n\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nfunction isKeySegment(segment) {\n    return typeof segment == \"string\" ? reKeySegment.test(segment.trim()) : typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction toString(path) {\n    if (!Array.isArray(path)) throw new Error(\"Path is not an array\");\n    return path.reduce((target, segment, i)=>{\n        const segmentType = typeof segment;\n        if (segmentType === \"number\") return `${target}[${segment}]`;\n        if (segmentType === \"string\") return `${target}${i === 0 ? \"\" : \".\"}${segment}`;\n        if (isKeySegment(segment) && segment._key) return `${target}[_key==\"${segment._key}\"]`;\n        if (Array.isArray(segment)) {\n            const [from, to] = segment;\n            return `${target}[${from}:${to}]`;\n        }\n        throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``);\n    }, \"\");\n}\nconst ESCAPE = {\n    \"\\f\": \"\\\\f\",\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\t\": \"\\\\t\",\n    \"'\": \"\\\\'\",\n    \"\\\\\": \"\\\\\\\\\"\n}, UNESCAPE = {\n    \"\\\\f\": \"\\f\",\n    \"\\\\n\": `\n`,\n    \"\\\\r\": \"\\r\",\n    \"\\\\t\": \"\t\",\n    \"\\\\'\": \"'\",\n    \"\\\\\\\\\": \"\\\\\"\n};\nfunction jsonPath(path) {\n    return `$${path.map((segment)=>typeof segment == \"string\" ? `['${segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match)=>ESCAPE[match])}']` : typeof segment == \"number\" ? `[${segment}]` : segment._key !== \"\" ? `[?(@._key=='${segment._key.replace(/['\\\\]/g, (match)=>ESCAPE[match])}')]` : `[${segment._index}]`).join(\"\")}`;\n}\nfunction parseJsonPath(path) {\n    const parsed = [], parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n    let match;\n    for(; (match = parseRe.exec(path)) !== null;){\n        if (match[1] !== void 0) {\n            const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m)=>UNESCAPE[m]);\n            parsed.push(key);\n            continue;\n        }\n        if (match[2] !== void 0) {\n            parsed.push(parseInt(match[2], 10));\n            continue;\n        }\n        if (match[3] !== void 0) {\n            const _key = match[3].replace(/\\\\(\\\\')/g, (m)=>UNESCAPE[m]);\n            parsed.push({\n                _key,\n                _index: -1\n            });\n            continue;\n        }\n    }\n    return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment == \"string\" || typeof segment == \"number\") return segment;\n        if (segment._key !== \"\") return {\n            _key: segment._key\n        };\n        if (segment._index !== -1) return segment._index;\n        throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n    });\n}\nfunction jsonPathToMappingPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment == \"string\" || typeof segment == \"number\") return segment;\n        if (segment._index !== -1) return segment._index;\n        throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n    });\n}\nfunction resolveMapping(resultPath, csm) {\n    if (!csm?.mappings) return;\n    const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n    if (csm.mappings[resultMappingPath] !== void 0) return {\n        mapping: csm.mappings[resultMappingPath],\n        matchedPath: resultMappingPath,\n        pathSuffix: \"\"\n    };\n    const mappings = Object.entries(csm.mappings).filter(([key])=>resultMappingPath.startsWith(key)).sort(([key1], [key2])=>key2.length - key1.length);\n    if (mappings.length == 0) return;\n    const [matchedPath, mapping] = mappings[0], pathSuffix = resultMappingPath.substring(matchedPath.length);\n    return {\n        mapping,\n        matchedPath,\n        pathSuffix\n    };\n}\nfunction isArray(value) {\n    return value !== null && Array.isArray(value);\n}\nfunction isRecord(value) {\n    return typeof value == \"object\" && value !== null;\n}\nfunction walkMap(value, mappingFn, path = []) {\n    if (isArray(value)) return value.map((v, idx)=>{\n        if (isRecord(v)) {\n            const _key = v._key;\n            if (typeof _key == \"string\") return walkMap(v, mappingFn, path.concat({\n                _key,\n                _index: idx\n            }));\n        }\n        return walkMap(v, mappingFn, path.concat(idx));\n    });\n    if (isRecord(value)) {\n        if (value._type === \"block\" || value._type === \"span\") {\n            const result = {\n                ...value\n            };\n            return value._type === \"block\" ? result.children = walkMap(value.children, mappingFn, path.concat(\"children\")) : value._type === \"span\" && (result.text = walkMap(value.text, mappingFn, path.concat(\"text\"))), result;\n        }\n        return Object.fromEntries(Object.entries(value).map(([k, v])=>[\n                k,\n                walkMap(v, mappingFn, path.concat(k))\n            ]));\n    }\n    return mappingFn(value, path);\n}\nfunction encodeIntoResult(result, csm, encoder) {\n    return walkMap(result, (value, path)=>{\n        if (typeof value != \"string\") return value;\n        const resolveMappingResult = resolveMapping(path, csm);\n        if (!resolveMappingResult) return value;\n        const { mapping, matchedPath } = resolveMappingResult;\n        if (mapping.type !== \"value\" || mapping.source.type !== \"documentValue\") return value;\n        const sourceDocument = csm.documents[mapping.source.document], sourcePath = csm.paths[mapping.source.path], matchPathSegments = parseJsonPath(matchedPath), fullSourceSegments = parseJsonPath(sourcePath).concat(path.slice(matchPathSegments.length));\n        return encoder({\n            sourcePath: fullSourceSegments,\n            sourceDocument,\n            resultPath: path,\n            value\n        });\n    });\n}\nconst DRAFTS_FOLDER = \"drafts\", VERSION_FOLDER = \"versions\", PATH_SEPARATOR = \".\", DRAFTS_PREFIX = `${DRAFTS_FOLDER}${PATH_SEPARATOR}`, VERSION_PREFIX = `${VERSION_FOLDER}${PATH_SEPARATOR}`;\nfunction isDraftId(id) {\n    return id.startsWith(DRAFTS_PREFIX);\n}\nfunction isVersionId(id) {\n    return id.startsWith(VERSION_PREFIX);\n}\nfunction isPublishedId(id) {\n    return !isDraftId(id) && !isVersionId(id);\n}\nfunction getVersionFromId(id) {\n    if (!isVersionId(id)) return;\n    const [_versionPrefix, versionId, ..._publishedId] = id.split(PATH_SEPARATOR);\n    return versionId;\n}\nfunction getPublishedId(id) {\n    return isVersionId(id) ? id.split(PATH_SEPARATOR).slice(2).join(PATH_SEPARATOR) : isDraftId(id) ? id.slice(DRAFTS_PREFIX.length) : id;\n}\nfunction createEditUrl(options) {\n    const { baseUrl, workspace: _workspace = \"default\", tool: _tool = \"default\", id: _id, type, path, projectId, dataset } = options;\n    if (!baseUrl) throw new Error(\"baseUrl is required\");\n    if (!path) throw new Error(\"path is required\");\n    if (!_id) throw new Error(\"id is required\");\n    if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\")) throw new Error(\"baseUrl must not end with a slash\");\n    const workspace = _workspace === \"default\" ? void 0 : _workspace, tool = _tool === \"default\" ? void 0 : _tool, id = getPublishedId(_id), stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path, searchParams = new URLSearchParams({\n        baseUrl,\n        id,\n        type,\n        path: stringifiedPath\n    });\n    if (workspace && searchParams.set(\"workspace\", workspace), tool && searchParams.set(\"tool\", tool), projectId && searchParams.set(\"projectId\", projectId), dataset && searchParams.set(\"dataset\", dataset), isPublishedId(_id)) searchParams.set(\"perspective\", \"published\");\n    else if (isVersionId(_id)) {\n        const versionId = getVersionFromId(_id);\n        searchParams.set(\"perspective\", versionId);\n    }\n    const segments = [\n        baseUrl === \"/\" ? \"\" : baseUrl\n    ];\n    workspace && segments.push(workspace);\n    const routerParams = [\n        \"mode=presentation\",\n        `id=${id}`,\n        `type=${type}`,\n        `path=${encodeURIComponent(stringifiedPath)}`\n    ];\n    return tool && routerParams.push(`tool=${tool}`), segments.push(\"intent\", \"edit\", `${routerParams.join(\";\")}?${searchParams}`), segments.join(\"/\");\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n    let baseUrl = typeof studioUrl == \"string\" ? studioUrl : studioUrl.baseUrl;\n    return baseUrl !== \"/\" && (baseUrl = baseUrl.replace(/\\/$/, \"\")), typeof studioUrl == \"string\" ? {\n        baseUrl\n    } : {\n        ...studioUrl,\n        baseUrl\n    };\n}\nconst filterDefault = ({ sourcePath, resultPath, value })=>{\n    if (isValidDate(value) || isValidURL(value)) return !1;\n    const endPath = sourcePath.at(-1);\n    return !(sourcePath.at(-2) === \"slug\" && endPath === \"current\" || typeof endPath == \"string\" && (endPath.startsWith(\"_\") || endPath.endsWith(\"Id\")) || sourcePath.some((path)=>path === \"meta\" || path === \"metadata\" || path === \"openGraph\" || path === \"seo\") || hasTypeLike(sourcePath) || hasTypeLike(resultPath) || typeof endPath == \"string\" && denylist.has(endPath));\n}, denylist = /* @__PURE__ */ new Set([\n    \"color\",\n    \"colour\",\n    \"currency\",\n    \"email\",\n    \"format\",\n    \"gid\",\n    \"hex\",\n    \"href\",\n    \"hsl\",\n    \"hsla\",\n    \"icon\",\n    \"id\",\n    \"index\",\n    \"key\",\n    \"language\",\n    \"layout\",\n    \"link\",\n    \"linkAction\",\n    \"locale\",\n    \"lqip\",\n    \"page\",\n    \"path\",\n    \"ref\",\n    \"rgb\",\n    \"rgba\",\n    \"route\",\n    \"secret\",\n    \"slug\",\n    \"status\",\n    \"tag\",\n    \"template\",\n    \"theme\",\n    \"type\",\n    \"textTheme\",\n    \"unit\",\n    \"url\",\n    \"username\",\n    \"variant\",\n    \"website\"\n]);\nfunction isValidDate(dateString) {\n    return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? !!Date.parse(dateString) : !1;\n}\nfunction isValidURL(url) {\n    try {\n        new URL(url, url.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n    } catch  {\n        return !1;\n    }\n    return !0;\n}\nfunction hasTypeLike(path) {\n    return path.some((segment)=>typeof segment == \"string\" && segment.match(/type/i) !== null);\n}\nconst TRUNCATE_LENGTH = 20;\nfunction stegaEncodeSourceMap(result, resultSourceMap, config) {\n    const { filter, logger, enabled } = config;\n    if (!enabled) {\n        const msg = \"config.enabled must be true, don't call this function otherwise\";\n        throw logger?.error?.(`[@sanity/client]: ${msg}`, {\n            result,\n            resultSourceMap,\n            config\n        }), new TypeError(msg);\n    }\n    if (!resultSourceMap) return logger?.error?.(\"[@sanity/client]: Missing Content Source Map from response body\", {\n        result,\n        resultSourceMap,\n        config\n    }), result;\n    if (!config.studioUrl) {\n        const msg = \"config.studioUrl must be defined\";\n        throw logger?.error?.(`[@sanity/client]: ${msg}`, {\n            result,\n            resultSourceMap,\n            config\n        }), new TypeError(msg);\n    }\n    const report = {\n        encoded: [],\n        skipped: []\n    }, resultWithStega = encodeIntoResult(result, resultSourceMap, ({ sourcePath, sourceDocument, resultPath, value })=>{\n        if ((typeof filter == \"function\" ? filter({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        }) : filterDefault({\n            sourcePath,\n            resultPath,\n            value\n        })) === !1) return logger && report.skipped.push({\n            path: prettyPathForLogging(sourcePath),\n            value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n            length: value.length\n        }), value;\n        logger && report.encoded.push({\n            path: prettyPathForLogging(sourcePath),\n            value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n            length: value.length\n        });\n        const { baseUrl, workspace, tool } = resolveStudioBaseRoute(typeof config.studioUrl == \"function\" ? config.studioUrl(sourceDocument) : config.studioUrl);\n        if (!baseUrl) return value;\n        const { _id: id, _type: type, _projectId: projectId, _dataset: dataset } = sourceDocument;\n        return (0,_stegaClean_js__WEBPACK_IMPORTED_MODULE_0__.C)(value, {\n            origin: \"sanity.io\",\n            href: createEditUrl({\n                baseUrl,\n                workspace,\n                tool,\n                id,\n                type,\n                path: sourcePath,\n                ...!config.omitCrossDatasetReferenceData && {\n                    dataset,\n                    projectId\n                }\n            })\n        }, // We use custom logic to determine if we should skip encoding\n        !1);\n    });\n    if (logger) {\n        const isSkipping = report.skipped.length, isEncoding = report.encoded.length;\n        if ((isSkipping || isEncoding) && ((logger?.groupCollapsed || logger.log)?.(\"[@sanity/client]: Encoding source map into result\"), logger.log?.(`[@sanity/client]: Paths encoded: ${report.encoded.length}, skipped: ${report.skipped.length}`)), report.encoded.length > 0 && (logger?.log?.(\"[@sanity/client]: Table of encoded paths\"), (logger?.table || logger.log)?.(report.encoded)), report.skipped.length > 0) {\n            const skipped = /* @__PURE__ */ new Set();\n            for (const { path } of report.skipped)skipped.add(path.replace(reKeySegment, \"0\").replace(/\\[\\d+\\]/g, \"[]\"));\n            logger?.log?.(\"[@sanity/client]: List of skipped paths\", [\n                ...skipped.values()\n            ]);\n        }\n        (isSkipping || isEncoding) && logger?.groupEnd?.();\n    }\n    return resultWithStega;\n}\nfunction prettyPathForLogging(path) {\n    return toString(jsonPathToStudioPath(path));\n}\nvar stegaEncodeSourceMap$1 = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    stegaEncodeSourceMap\n});\n //# sourceMappingURL=stegaEncodeSourceMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sanity+client@6.29.1_debug@4.4.3/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sanity+client@6.29.1_debug@4.4.3/node_modules/@sanity/client/dist/index.browser.js":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sanity+client@6.29.1_debug@4.4.3/node_modules/@sanity/client/dist/index.browser.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePatch: () => (/* binding */ BasePatch),\n/* harmony export */   BaseTransaction: () => (/* binding */ BaseTransaction),\n/* harmony export */   ChannelError: () => (/* binding */ ChannelError),\n/* harmony export */   ClientError: () => (/* binding */ ClientError),\n/* harmony export */   ConnectionFailedError: () => (/* binding */ ConnectionFailedError),\n/* harmony export */   CorsOriginError: () => (/* binding */ CorsOriginError),\n/* harmony export */   DisconnectError: () => (/* binding */ DisconnectError),\n/* harmony export */   MessageError: () => (/* binding */ MessageError),\n/* harmony export */   MessageParseError: () => (/* binding */ MessageParseError),\n/* harmony export */   ObservablePatch: () => (/* binding */ ObservablePatch),\n/* harmony export */   ObservableSanityClient: () => (/* binding */ ObservableSanityClient),\n/* harmony export */   ObservableTransaction: () => (/* binding */ ObservableTransaction),\n/* harmony export */   Patch: () => (/* binding */ Patch),\n/* harmony export */   SanityClient: () => (/* binding */ SanityClient),\n/* harmony export */   ServerError: () => (/* binding */ ServerError),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   connectEventSource: () => (/* binding */ connectEventSource),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   \"default\": () => (/* binding */ deprecatedCreateClient),\n/* harmony export */   requester: () => (/* binding */ requester),\n/* harmony export */   unstable__adapter: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_0__.adapter),\n/* harmony export */   unstable__environment: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_0__.environment),\n/* harmony export */   validateApiPerspective: () => (/* binding */ validateApiPerspective)\n/* harmony export */ });\n/* harmony import */ var get_it__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! get-it */ \"(rsc)/../../node_modules/.pnpm/get-it@8.6.10_debug@4.4.3/node_modules/get-it/dist/index.react-server.js\");\n/* harmony import */ var get_it_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! get-it/middleware */ \"(rsc)/../../node_modules/.pnpm/get-it@8.6.10_debug@4.4.3/node_modules/get-it/dist/middleware.browser.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/defer.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/isObservable.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/lastValueFrom.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/catchError.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/concat.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/timer.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/throwError.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/tap.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/finalize.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/share.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/merge.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Observable,catchError,concat,defer,finalize,from,isObservable,lastValueFrom,merge,mergeMap,of,share,shareReplay,tap,throwError,timer!=!rxjs */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/empty.js\");\n/* harmony import */ var _chunks_es_stegaClean_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_chunks-es/stegaClean.js */ \"(rsc)/../../node_modules/.pnpm/@sanity+client@6.29.1_debug@4.4.3/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ \"(rsc)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/cjs/operators/index.js\");\n\n\n\n\n\n\nclass ClientError extends Error {\n    constructor(res){\n        const props = extractErrorProps(res);\n        var _temp;\n        _temp = super(props.message), this.statusCode = 400, _temp, Object.assign(this, props);\n    }\n}\nclass ServerError extends Error {\n    constructor(res){\n        const props = extractErrorProps(res);\n        var _temp;\n        _temp = super(props.message), this.statusCode = 500, _temp, Object.assign(this, props);\n    }\n}\nfunction extractErrorProps(res) {\n    const body = res.body, props = {\n        response: res,\n        statusCode: res.statusCode,\n        responseBody: stringifyBody(body, res),\n        message: \"\",\n        details: void 0\n    };\n    if (body.error && body.message) return props.message = `${body.error} - ${body.message}`, props;\n    if (isMutationError(body) || isActionError(body)) {\n        const allItems = body.error.items || [], items = allItems.slice(0, 5).map((item)=>item.error?.description).filter(Boolean);\n        let itemsStr = items.length ? `:\n- ${items.join(`\n- `)}` : \"\";\n        return allItems.length > 5 && (itemsStr += `\n...and ${allItems.length - 5} more`), props.message = `${body.error.description}${itemsStr}`, props.details = body.error, props;\n    }\n    return body.error && body.error.description ? (props.message = body.error.description, props.details = body.error, props) : (props.message = body.error || body.message || httpErrorMessage(res), props);\n}\nfunction isMutationError(body) {\n    return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"mutationError\" && typeof body.error.description == \"string\";\n}\nfunction isActionError(body) {\n    return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"actionError\" && typeof body.error.description == \"string\";\n}\nfunction isPlainObject(obj) {\n    return typeof obj == \"object\" && obj !== null && !Array.isArray(obj);\n}\nfunction httpErrorMessage(res) {\n    const statusMessage = res.statusMessage ? ` ${res.statusMessage}` : \"\";\n    return `${res.method}-request to ${res.url} resulted in HTTP ${res.statusCode}${statusMessage}`;\n}\nfunction stringifyBody(body, res) {\n    return (res.headers[\"content-type\"] || \"\").toLowerCase().indexOf(\"application/json\") !== -1 ? JSON.stringify(body, null, 2) : body;\n}\nclass CorsOriginError extends Error {\n    constructor({ projectId: projectId2 }){\n        super(\"CorsOriginError\"), this.name = \"CorsOriginError\", this.projectId = projectId2;\n        const url = new URL(`https://sanity.io/manage/project/${projectId2}/api`);\n        if (typeof location < \"u\") {\n            const { origin } = location;\n            url.searchParams.set(\"cors\", \"add\"), url.searchParams.set(\"origin\", origin), this.addOriginUrl = url, this.message = `The current origin is not allowed to connect to the Live Content API. Add it here: ${url}`;\n        } else this.message = `The current origin is not allowed to connect to the Live Content API. Change your configuration here: ${url}`;\n    }\n}\nconst httpError = {\n    onResponse: (res)=>{\n        if (res.statusCode >= 500) throw new ServerError(res);\n        if (res.statusCode >= 400) throw new ClientError(res);\n        return res;\n    }\n};\nfunction printWarnings() {\n    const seen = {};\n    return {\n        onResponse: (res)=>{\n            const warn = res.headers[\"x-sanity-warning\"], warnings = Array.isArray(warn) ? warn : [\n                warn\n            ];\n            for (const msg of warnings)!msg || seen[msg] || (seen[msg] = !0, console.warn(msg));\n            return res;\n        }\n    };\n}\nfunction defineHttpRequest(envMiddleware2) {\n    return (0,get_it__WEBPACK_IMPORTED_MODULE_0__.getIt)([\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry)({\n            shouldRetry\n        }),\n        ...envMiddleware2,\n        printWarnings(),\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonRequest)(),\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonResponse)(),\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.progress)(),\n        httpError,\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.observable)({\n            implementation: _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable\n        })\n    ]);\n}\nfunction shouldRetry(err, attempt, options) {\n    if (options.maxRetries === 0) return !1;\n    const isSafe = options.method === \"GET\" || options.method === \"HEAD\", isQuery2 = (options.uri || options.url).startsWith(\"/data/query\"), isRetriableResponse = err.response && (err.response.statusCode === 429 || err.response.statusCode === 502 || err.response.statusCode === 503);\n    return (isSafe || isQuery2) && isRetriableResponse ? !0 : get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry.shouldRetry(err, attempt, options);\n}\nconst BASE_URL = \"https://www.sanity.io/help/\";\nfunction generateHelpUrl(slug) {\n    return BASE_URL + slug;\n}\nconst VALID_ASSET_TYPES = [\n    \"image\",\n    \"file\"\n], VALID_INSERT_LOCATIONS = [\n    \"before\",\n    \"after\",\n    \"replace\"\n], dataset = (name)=>{\n    if (!/^(~[a-z0-9]{1}[-\\w]{0,63}|[a-z0-9]{1}[-\\w]{0,63})$/.test(name)) throw new Error(\"Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters\");\n}, projectId = (id)=>{\n    if (!/^[-a-z0-9]+$/i.test(id)) throw new Error(\"`projectId` can only contain only a-z, 0-9 and dashes\");\n}, validateAssetType = (type)=>{\n    if (VALID_ASSET_TYPES.indexOf(type) === -1) throw new Error(`Invalid asset type: ${type}. Must be one of ${VALID_ASSET_TYPES.join(\", \")}`);\n}, validateObject = (op, val)=>{\n    if (val === null || typeof val != \"object\" || Array.isArray(val)) throw new Error(`${op}() takes an object of properties`);\n}, validateDocumentId = (op, id)=>{\n    if (typeof id != \"string\" || !/^[a-z0-9_][a-z0-9_.-]{0,127}$/i.test(id) || id.includes(\"..\")) throw new Error(`${op}(): \"${id}\" is not a valid document ID`);\n}, requireDocumentId = (op, doc)=>{\n    if (!doc._id) throw new Error(`${op}() requires that the document contains an ID (\"_id\" property)`);\n    validateDocumentId(op, doc._id);\n}, validateInsert = (at, selector, items)=>{\n    const signature = \"insert(at, selector, items)\";\n    if (VALID_INSERT_LOCATIONS.indexOf(at) === -1) {\n        const valid = VALID_INSERT_LOCATIONS.map((loc)=>`\"${loc}\"`).join(\", \");\n        throw new Error(`${signature} takes an \"at\"-argument which is one of: ${valid}`);\n    }\n    if (typeof selector != \"string\") throw new Error(`${signature} takes a \"selector\"-argument which must be a string`);\n    if (!Array.isArray(items)) throw new Error(`${signature} takes an \"items\"-argument which must be an array`);\n}, hasDataset = (config)=>{\n    if (!config.dataset) throw new Error(\"`dataset` must be provided to perform queries\");\n    return config.dataset || \"\";\n}, requestTag = (tag)=>{\n    if (typeof tag != \"string\" || !/^[a-z0-9._-]{1,75}$/i.test(tag)) throw new Error(\"Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.\");\n    return tag;\n}, resourceConfig = (config)=>{\n    if (!config[\"~experimental_resource\"]) throw new Error(\"`resource` must be provided to perform resource queries\");\n    const { type, id } = config[\"~experimental_resource\"];\n    switch(type){\n        case \"dataset\":\n            {\n                if (id.split(\".\").length !== 2) throw new Error('Dataset resource ID must be in the format \"project.dataset\"');\n                return;\n            }\n        case \"dashboard\":\n        case \"media-library\":\n        case \"canvas\":\n            return;\n        default:\n            throw new Error(`Unsupported resource type: ${type.toString()}`);\n    }\n}, resourceGuard = (service, config)=>{\n    if (config[\"~experimental_resource\"]) throw new Error(`\\`${service}\\` does not support resource-based operations`);\n};\nfunction once(fn) {\n    let didCall = !1, returnValue;\n    return (...args)=>(didCall || (returnValue = fn(...args), didCall = !0), returnValue);\n}\nconst createWarningPrinter = (message)=>// eslint-disable-next-line no-console\n    once((...args)=>console.warn(message.join(\" \"), ...args)), printCdnAndWithCredentialsWarning = createWarningPrinter([\n    \"Because you set `withCredentials` to true, we will override your `useCdn`\",\n    \"setting to be false since (cookie-based) credentials are never set on the CDN\"\n]), printCdnWarning = createWarningPrinter([\n    \"Since you haven't set a value for `useCdn`, we will deliver content using our\",\n    \"global, edge-cached API-CDN. If you wish to have content delivered faster, set\",\n    \"`useCdn: false` to use the Live API. Note: You may incur higher costs using the live API.\"\n]), printCdnPreviewDraftsWarning = createWarningPrinter([\n    \"The Sanity client is configured with the `perspective` set to `drafts` or `previewDrafts`, which doesn't support the API-CDN.\",\n    \"The Live API will be used instead. Set `useCdn: false` in your configuration to hide this warning.\"\n]), printPreviewDraftsDeprecationWarning = createWarningPrinter([\n    \"The `previewDrafts` perspective has been renamed to  `drafts` and will be removed in a future API version\"\n]), printBrowserTokenWarning = createWarningPrinter([\n    \"You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.\",\n    `See ${generateHelpUrl(\"js-client-browser-token\")} for more information and how to hide this warning.`\n]), printCredentialedTokenWarning = createWarningPrinter([\n    \"You have configured Sanity client to use a token, but also provided `withCredentials: true`.\",\n    \"This is no longer supported - only token will be used - remove `withCredentials: true`.\"\n]), printNoApiVersionSpecifiedWarning = createWarningPrinter([\n    \"Using the Sanity client without specifying an API version is deprecated.\",\n    `See ${generateHelpUrl(\"js-client-api-version\")}`\n]), printNoDefaultExport = createWarningPrinter([\n    \"The default export of @sanity/client has been deprecated. Use the named export `createClient` instead.\"\n]), defaultCdnHost = \"apicdn.sanity.io\", defaultConfig = {\n    apiHost: \"https://api.sanity.io\",\n    apiVersion: \"1\",\n    useProjectHostname: !0,\n    stega: {\n        enabled: !1\n    }\n}, LOCALHOSTS = [\n    \"localhost\",\n    \"127.0.0.1\",\n    \"0.0.0.0\"\n], isLocal = (host)=>LOCALHOSTS.indexOf(host) !== -1;\nfunction validateApiVersion(apiVersion) {\n    if (apiVersion === \"1\" || apiVersion === \"X\") return;\n    const apiDate = new Date(apiVersion);\n    if (!(/^\\d{4}-\\d{2}-\\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0)) throw new Error(\"Invalid API version string, expected `1` or date in format `YYYY-MM-DD`\");\n}\nfunction validateApiPerspective(perspective) {\n    if (Array.isArray(perspective) && perspective.length > 1 && perspective.includes(\"raw\")) throw new TypeError('Invalid API perspective value: \"raw\". The raw-perspective can not be combined with other perspectives');\n}\nconst initConfig = (config, prevConfig)=>{\n    const specifiedConfig = {\n        ...prevConfig,\n        ...config,\n        stega: {\n            ...typeof prevConfig.stega == \"boolean\" ? {\n                enabled: prevConfig.stega\n            } : prevConfig.stega || defaultConfig.stega,\n            ...typeof config.stega == \"boolean\" ? {\n                enabled: config.stega\n            } : config.stega || {}\n        }\n    };\n    specifiedConfig.apiVersion || printNoApiVersionSpecifiedWarning();\n    const newConfig = {\n        ...defaultConfig,\n        ...specifiedConfig\n    }, projectBased = newConfig.useProjectHostname && !newConfig[\"~experimental_resource\"];\n    if (typeof Promise > \"u\") {\n        const helpUrl = generateHelpUrl(\"js-client-promise-polyfill\");\n        throw new Error(`No native Promise-implementation found, polyfill needed - see ${helpUrl}`);\n    }\n    if (projectBased && !newConfig.projectId) throw new Error(\"Configuration must contain `projectId`\");\n    if (newConfig[\"~experimental_resource\"] && resourceConfig(newConfig), typeof newConfig.perspective < \"u\" && validateApiPerspective(newConfig.perspective), \"encodeSourceMap\" in newConfig) throw new Error(\"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMap' is not supported in '@sanity/client'. Did you mean 'stega.enabled'?\");\n    if (\"encodeSourceMapAtPath\" in newConfig) throw new Error(\"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMapAtPath' is not supported in '@sanity/client'. Did you mean 'stega.filter'?\");\n    if (typeof newConfig.stega.enabled != \"boolean\") throw new Error(`stega.enabled must be a boolean, received ${newConfig.stega.enabled}`);\n    if (newConfig.stega.enabled && newConfig.stega.studioUrl === void 0) throw new Error(\"stega.studioUrl must be defined when stega.enabled is true\");\n    if (newConfig.stega.enabled && typeof newConfig.stega.studioUrl != \"string\" && typeof newConfig.stega.studioUrl != \"function\") throw new Error(`stega.studioUrl must be a string or a function, received ${newConfig.stega.studioUrl}`);\n    const isBrowser =  false && 0, isLocalhost = isBrowser && isLocal(window.location.hostname), hasToken = !!newConfig.token;\n    newConfig.withCredentials && hasToken && (printCredentialedTokenWarning(), newConfig.withCredentials = !1), isBrowser && isLocalhost && hasToken && newConfig.ignoreBrowserTokenWarning !== !0 ? printBrowserTokenWarning() : typeof newConfig.useCdn > \"u\" && printCdnWarning(), projectBased && projectId(newConfig.projectId), newConfig.dataset && dataset(newConfig.dataset), \"requestTagPrefix\" in newConfig && (newConfig.requestTagPrefix = newConfig.requestTagPrefix ? requestTag(newConfig.requestTagPrefix).replace(/\\.+$/, \"\") : void 0), newConfig.apiVersion = `${newConfig.apiVersion}`.replace(/^v/, \"\"), newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost, newConfig.useCdn === !0 && newConfig.withCredentials && printCdnAndWithCredentialsWarning(), newConfig.useCdn = newConfig.useCdn !== !1 && !newConfig.withCredentials, validateApiVersion(newConfig.apiVersion);\n    const hostParts = newConfig.apiHost.split(\"://\", 2), protocol = hostParts[0], host = hostParts[1], cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host;\n    return projectBased ? (newConfig.url = `${protocol}://${newConfig.projectId}.${host}/v${newConfig.apiVersion}`, newConfig.cdnUrl = `${protocol}://${newConfig.projectId}.${cdnHost}/v${newConfig.apiVersion}`) : (newConfig.url = `${newConfig.apiHost}/v${newConfig.apiVersion}`, newConfig.cdnUrl = newConfig.url), newConfig;\n};\nclass ConnectionFailedError extends Error {\n    constructor(...args){\n        super(...args);\n        this.name = \"ConnectionFailedError\";\n    }\n}\nclass DisconnectError extends Error {\n    constructor(message, reason, options = {}){\n        var _temp;\n        _temp = super(message, options), this.name = \"DisconnectError\", _temp, this.reason = reason;\n    }\n}\nclass ChannelError extends Error {\n    constructor(message, data){\n        var _temp;\n        _temp = super(message), this.name = \"ChannelError\", _temp, this.data = data;\n    }\n}\nclass MessageError extends Error {\n    constructor(message, data, options = {}){\n        var _temp;\n        _temp = super(message, options), this.name = \"MessageError\", _temp, this.data = data;\n    }\n}\nclass MessageParseError extends Error {\n    constructor(...args){\n        super(...args);\n        this.name = \"MessageParseError\";\n    }\n}\nconst REQUIRED_EVENTS = [\n    \"channelError\",\n    \"disconnect\"\n];\nfunction connectEventSource(initEventSource, events) {\n    return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_3__.defer)(()=>{\n        const es = initEventSource();\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_4__.isObservable)(es) ? es : (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(es);\n    }).pipe((0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)((es)=>connectWithESInstance(es, events)));\n}\nfunction connectWithESInstance(es, events) {\n    return new _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>{\n        const emitOpen = events.includes(\"open\"), emitReconnect = events.includes(\"reconnect\");\n        function onError(evt) {\n            if (\"data\" in evt) {\n                const [parseError, event] = parseEvent(evt);\n                observer.error(parseError ? new MessageParseError(\"Unable to parse EventSource error message\", {\n                    cause: event\n                }) : new MessageError((event?.data).message, event));\n                return;\n            }\n            es.readyState === es.CLOSED ? observer.error(new ConnectionFailedError(\"EventSource connection failed\")) : emitReconnect && observer.next({\n                type: \"reconnect\"\n            });\n        }\n        function onOpen() {\n            observer.next({\n                type: \"open\"\n            });\n        }\n        function onMessage(message) {\n            const [parseError, event] = parseEvent(message);\n            if (parseError) {\n                observer.error(new MessageParseError(\"Unable to parse EventSource message\", {\n                    cause: parseError\n                }));\n                return;\n            }\n            if (message.type === \"channelError\") {\n                observer.error(new ChannelError(extractErrorMessage(event?.data), event.data));\n                return;\n            }\n            if (message.type === \"disconnect\") {\n                observer.error(new DisconnectError(`Server disconnected client: ${event.data?.reason || \"unknown error\"}`));\n                return;\n            }\n            observer.next({\n                type: message.type,\n                id: message.lastEventId,\n                ...event.data ? {\n                    data: event.data\n                } : {}\n            });\n        }\n        es.addEventListener(\"error\", onError), emitOpen && es.addEventListener(\"open\", onOpen);\n        const cleanedEvents = [\n            .../* @__PURE__ */ new Set([\n                ...REQUIRED_EVENTS,\n                ...events\n            ])\n        ].filter((type)=>type !== \"error\" && type !== \"open\" && type !== \"reconnect\");\n        return cleanedEvents.forEach((type)=>es.addEventListener(type, onMessage)), ()=>{\n            es.removeEventListener(\"error\", onError), emitOpen && es.removeEventListener(\"open\", onOpen), cleanedEvents.forEach((type)=>es.removeEventListener(type, onMessage)), es.close();\n        };\n    });\n}\nfunction parseEvent(message) {\n    try {\n        const data = typeof message.data == \"string\" && JSON.parse(message.data);\n        return [\n            null,\n            {\n                type: message.type,\n                id: message.lastEventId,\n                ...isEmptyObject(data) ? {} : {\n                    data\n                }\n            }\n        ];\n    } catch (err) {\n        return [\n            err,\n            null\n        ];\n    }\n}\nfunction extractErrorMessage(err) {\n    return err.error ? err.error.description ? err.error.description : typeof err.error == \"string\" ? err.error : JSON.stringify(err.error, null, 2) : err.message || \"Unknown listener error\";\n}\nfunction isEmptyObject(data) {\n    for(const _ in data)return !1;\n    return !0;\n}\nfunction getSelection(sel) {\n    if (typeof sel == \"string\") return {\n        id: sel\n    };\n    if (Array.isArray(sel)) return {\n        query: \"*[_id in $ids]\",\n        params: {\n            ids: sel\n        }\n    };\n    if (typeof sel == \"object\" && sel !== null && \"query\" in sel && typeof sel.query == \"string\") return \"params\" in sel && typeof sel.params == \"object\" && sel.params !== null ? {\n        query: sel.query,\n        params: sel.params\n    } : {\n        query: sel.query\n    };\n    const selectionOpts = [\n        \"* Document ID (<docId>)\",\n        \"* Array of document IDs\",\n        \"* Object containing `query`\"\n    ].join(`\n`);\n    throw new Error(`Unknown selection - must be one of:\n\n${selectionOpts}`);\n}\nclass BasePatch {\n    constructor(selection, operations = {}){\n        this.selection = selection, this.operations = operations;\n    }\n    /**\n   * Sets the given attributes to the document. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */ set(attrs) {\n        return this._assign(\"set\", attrs);\n    }\n    /**\n   * Sets the given attributes to the document if they are not currently set. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */ setIfMissing(attrs) {\n        return this._assign(\"setIfMissing\", attrs);\n    }\n    /**\n   * Performs a \"diff-match-patch\" operation on the string attributes provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to perform operation on. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"dmp\"\\}\n   */ diffMatchPatch(attrs) {\n        return validateObject(\"diffMatchPatch\", attrs), this._assign(\"diffMatchPatch\", attrs);\n    }\n    /**\n   * Unsets the attribute paths provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attribute paths to unset.\n   */ unset(attrs) {\n        if (!Array.isArray(attrs)) throw new Error(\"unset(attrs) takes an array of attributes to unset, non-array given\");\n        return this.operations = Object.assign({}, this.operations, {\n            unset: attrs\n        }), this;\n    }\n    /**\n   * Increment a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to increment, values representing the number to increment by.\n   */ inc(attrs) {\n        return this._assign(\"inc\", attrs);\n    }\n    /**\n   * Decrement a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to decrement, values representing the number to decrement by.\n   */ dec(attrs) {\n        return this._assign(\"dec\", attrs);\n    }\n    /**\n   * Provides methods for modifying arrays, by inserting, appending and replacing elements via a JSONPath expression.\n   *\n   * @param at - Location to insert at, relative to the given selector, or 'replace' the matched path\n   * @param selector - JSONPath expression, eg `comments[-1]` or `blocks[_key==\"abc123\"]`\n   * @param items - Array of items to insert/replace\n   */ insert(at, selector, items) {\n        return validateInsert(at, selector, items), this._assign(\"insert\", {\n            [at]: selector,\n            items\n        });\n    }\n    /**\n   * Append the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to append to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to append to the array\n   */ append(selector, items) {\n        return this.insert(\"after\", `${selector}[-1]`, items);\n    }\n    /**\n   * Prepend the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to prepend to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to prepend to the array\n   */ prepend(selector, items) {\n        return this.insert(\"before\", `${selector}[0]`, items);\n    }\n    /**\n   * Change the contents of an array by removing existing elements and/or adding new elements.\n   *\n   * @param selector - Attribute or JSONPath expression for array\n   * @param start - Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.x\n   * @param deleteCount - An integer indicating the number of old array elements to remove.\n   * @param items - The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.\n   */ splice(selector, start, deleteCount, items) {\n        const delAll = typeof deleteCount > \"u\" || deleteCount === -1, startIndex = start < 0 ? start - 1 : start, delCount = delAll ? -1 : Math.max(0, start + deleteCount), delRange = startIndex < 0 && delCount >= 0 ? \"\" : delCount, rangeSelector = `${selector}[${startIndex}:${delRange}]`;\n        return this.insert(\"replace\", rangeSelector, items || []);\n    }\n    /**\n   * Adds a revision clause, preventing the document from being patched if the `_rev` property does not match the given value\n   *\n   * @param rev - Revision to lock the patch to\n   */ ifRevisionId(rev) {\n        return this.operations.ifRevisionID = rev, this;\n    }\n    /**\n   * Return a plain JSON representation of the patch\n   */ serialize() {\n        return {\n            ...getSelection(this.selection),\n            ...this.operations\n        };\n    }\n    /**\n   * Return a plain JSON representation of the patch\n   */ toJSON() {\n        return this.serialize();\n    }\n    /**\n   * Clears the patch of all operations\n   */ reset() {\n        return this.operations = {}, this;\n    }\n    _assign(op, props, merge2 = !0) {\n        return validateObject(op, props), this.operations = Object.assign({}, this.operations, {\n            [op]: Object.assign({}, merge2 && this.operations[op] || {}, props)\n        }), this;\n    }\n    _set(op, props) {\n        return this._assign(op, props, !1);\n    }\n}\nclass ObservablePatch extends BasePatch {\n    #client;\n    constructor(selection, operations, client){\n        super(selection, operations), this.#client = client;\n    }\n    /**\n   * Clones the patch\n   */ clone() {\n        return new ObservablePatch(this.selection, {\n            ...this.operations\n        }, this.#client);\n    }\n    commit(options) {\n        if (!this.#client) throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n        const returnFirst = typeof this.selection == \"string\", opts = Object.assign({\n            returnFirst,\n            returnDocuments: !0\n        }, options);\n        return this.#client.mutate({\n            patch: this.serialize()\n        }, opts);\n    }\n}\nclass Patch extends BasePatch {\n    #client;\n    constructor(selection, operations, client){\n        super(selection, operations), this.#client = client;\n    }\n    /**\n   * Clones the patch\n   */ clone() {\n        return new Patch(this.selection, {\n            ...this.operations\n        }, this.#client);\n    }\n    commit(options) {\n        if (!this.#client) throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n        const returnFirst = typeof this.selection == \"string\", opts = Object.assign({\n            returnFirst,\n            returnDocuments: !0\n        }, options);\n        return this.#client.mutate({\n            patch: this.serialize()\n        }, opts);\n    }\n}\nconst defaultMutateOptions = {\n    returnDocuments: !1\n};\nclass BaseTransaction {\n    constructor(operations = [], transactionId){\n        this.operations = operations, this.trxId = transactionId;\n    }\n    /**\n   * Creates a new Sanity document. If `_id` is provided and already exists, the mutation will fail. If no `_id` is given, one will automatically be generated by the database.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create. Requires a `_type` property.\n   */ create(doc) {\n        return validateObject(\"create\", doc), this._add({\n            create: doc\n        });\n    }\n    /**\n   * Creates a new Sanity document. If a document with the same `_id` already exists, the create operation will be ignored.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create if it does not already exist. Requires `_id` and `_type` properties.\n   */ createIfNotExists(doc) {\n        const op = \"createIfNotExists\";\n        return validateObject(op, doc), requireDocumentId(op, doc), this._add({\n            [op]: doc\n        });\n    }\n    /**\n   * Creates a new Sanity document, or replaces an existing one if the same `_id` is already used.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create or replace. Requires `_id` and `_type` properties.\n   */ createOrReplace(doc) {\n        const op = \"createOrReplace\";\n        return validateObject(op, doc), requireDocumentId(op, doc), this._add({\n            [op]: doc\n        });\n    }\n    /**\n   * Deletes the document with the given document ID\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param documentId - Document ID to delete\n   */ delete(documentId) {\n        return validateDocumentId(\"delete\", documentId), this._add({\n            delete: {\n                id: documentId\n            }\n        });\n    }\n    transactionId(id) {\n        return id ? (this.trxId = id, this) : this.trxId;\n    }\n    /**\n   * Return a plain JSON representation of the transaction\n   */ serialize() {\n        return [\n            ...this.operations\n        ];\n    }\n    /**\n   * Return a plain JSON representation of the transaction\n   */ toJSON() {\n        return this.serialize();\n    }\n    /**\n   * Clears the transaction of all operations\n   */ reset() {\n        return this.operations = [], this;\n    }\n    _add(mut) {\n        return this.operations.push(mut), this;\n    }\n}\nclass Transaction extends BaseTransaction {\n    #client;\n    constructor(operations, client, transactionId){\n        super(operations, transactionId), this.#client = client;\n    }\n    /**\n   * Clones the transaction\n   */ clone() {\n        return new Transaction([\n            ...this.operations\n        ], this.#client, this.trxId);\n    }\n    commit(options) {\n        if (!this.#client) throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n        return this.#client.mutate(this.serialize(), Object.assign({\n            transactionId: this.trxId\n        }, defaultMutateOptions, options || {}));\n    }\n    patch(patchOrDocumentId, patchOps) {\n        const isBuilder = typeof patchOps == \"function\", isPatch = typeof patchOrDocumentId != \"string\" && patchOrDocumentId instanceof Patch, isMutationSelection = typeof patchOrDocumentId == \"object\" && (\"query\" in patchOrDocumentId || \"id\" in patchOrDocumentId);\n        if (isPatch) return this._add({\n            patch: patchOrDocumentId.serialize()\n        });\n        if (isBuilder) {\n            const patch = patchOps(new Patch(patchOrDocumentId, {}, this.#client));\n            if (!(patch instanceof Patch)) throw new Error(\"function passed to `patch()` must return the patch\");\n            return this._add({\n                patch: patch.serialize()\n            });\n        }\n        if (isMutationSelection) {\n            const patch = new Patch(patchOrDocumentId, patchOps || {}, this.#client);\n            return this._add({\n                patch: patch.serialize()\n            });\n        }\n        return this._add({\n            patch: {\n                id: patchOrDocumentId,\n                ...patchOps\n            }\n        });\n    }\n}\nclass ObservableTransaction extends BaseTransaction {\n    #client;\n    constructor(operations, client, transactionId){\n        super(operations, transactionId), this.#client = client;\n    }\n    /**\n   * Clones the transaction\n   */ clone() {\n        return new ObservableTransaction([\n            ...this.operations\n        ], this.#client, this.trxId);\n    }\n    commit(options) {\n        if (!this.#client) throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n        return this.#client.mutate(this.serialize(), Object.assign({\n            transactionId: this.trxId\n        }, defaultMutateOptions, options || {}));\n    }\n    patch(patchOrDocumentId, patchOps) {\n        const isBuilder = typeof patchOps == \"function\";\n        if (typeof patchOrDocumentId != \"string\" && patchOrDocumentId instanceof ObservablePatch) return this._add({\n            patch: patchOrDocumentId.serialize()\n        });\n        if (isBuilder) {\n            const patch = patchOps(new ObservablePatch(patchOrDocumentId, {}, this.#client));\n            if (!(patch instanceof ObservablePatch)) throw new Error(\"function passed to `patch()` must return the patch\");\n            return this._add({\n                patch: patch.serialize()\n            });\n        }\n        return this._add({\n            patch: {\n                id: patchOrDocumentId,\n                ...patchOps\n            }\n        });\n    }\n}\nconst projectHeader = \"X-Sanity-Project-ID\";\nfunction requestOptions(config, overrides = {}) {\n    const headers = {}, token = overrides.token || config.token;\n    token && (headers.Authorization = `Bearer ${token}`), !overrides.useGlobalApi && !config.useProjectHostname && config.projectId && (headers[projectHeader] = config.projectId);\n    const withCredentials = !!(typeof overrides.withCredentials > \"u\" ? config.withCredentials : overrides.withCredentials), timeout = typeof overrides.timeout > \"u\" ? config.timeout : overrides.timeout;\n    return Object.assign({}, overrides, {\n        headers: Object.assign({}, headers, overrides.headers || {}),\n        timeout: typeof timeout > \"u\" ? 5 * 60 * 1e3 : timeout,\n        proxy: overrides.proxy || config.proxy,\n        json: !0,\n        withCredentials,\n        fetch: typeof overrides.fetch == \"object\" && typeof config.fetch == \"object\" ? {\n            ...config.fetch,\n            ...overrides.fetch\n        } : overrides.fetch || config.fetch\n    });\n}\nconst encodeQueryString = ({ query, params = {}, options = {} })=>{\n    const searchParams = new URLSearchParams(), { tag, includeMutations, returnQuery, ...opts } = options;\n    tag && searchParams.append(\"tag\", tag), searchParams.append(\"query\", query);\n    for (const [key, value] of Object.entries(params))searchParams.append(`$${key}`, JSON.stringify(value));\n    for (const [key, value] of Object.entries(opts))value && searchParams.append(key, `${value}`);\n    return returnQuery === !1 && searchParams.append(\"returnQuery\", \"false\"), includeMutations === !1 && searchParams.append(\"includeMutations\", \"false\"), `?${searchParams}`;\n}, excludeFalsey = (param, defValue)=>param === !1 ? void 0 : typeof param > \"u\" ? defValue : param, getMutationQuery = (options = {})=>({\n        dryRun: options.dryRun,\n        returnIds: !0,\n        returnDocuments: excludeFalsey(options.returnDocuments, !0),\n        visibility: options.visibility || \"sync\",\n        autoGenerateArrayKeys: options.autoGenerateArrayKeys,\n        skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation\n    }), isResponse = (event)=>event.type === \"response\", getBody = (event)=>event.body, indexBy = (docs, attr)=>docs.reduce((indexed, doc)=>(indexed[attr(doc)] = doc, indexed), /* @__PURE__ */ Object.create(null)), getQuerySizeLimit = 11264;\nfunction _fetch(client, httpRequest, _stega, query, _params = {}, options = {}) {\n    const stega = \"stega\" in options ? {\n        ..._stega || {},\n        ...typeof options.stega == \"boolean\" ? {\n            enabled: options.stega\n        } : options.stega || {}\n    } : _stega, params = stega.enabled ? (0,_chunks_es_stegaClean_js__WEBPACK_IMPORTED_MODULE_7__.stegaClean)(_params) : _params, mapResponse = options.filterResponse === !1 ? (res)=>res : (res)=>res.result, { cache, next, ...opts } = {\n        // Opt out of setting a `signal` on an internal `fetch` if one isn't provided.\n        // This is necessary in React Server Components to avoid opting out of Request Memoization.\n        useAbortSignal: typeof options.signal < \"u\",\n        // Set `resultSourceMap' when stega is enabled, as it's required for encoding.\n        resultSourceMap: stega.enabled ? \"withKeyArraySelector\" : options.resultSourceMap,\n        ...options,\n        // Default to not returning the query, unless `filterResponse` is `false`,\n        // or `returnQuery` is explicitly set. `true` is the default in Content Lake, so skip if truthy\n        returnQuery: options.filterResponse === !1 && options.returnQuery !== !1\n    }, reqOpts = typeof cache < \"u\" || typeof next < \"u\" ? {\n        ...opts,\n        fetch: {\n            cache,\n            next\n        }\n    } : opts, $request = _dataRequest(client, httpRequest, \"query\", {\n        query,\n        params\n    }, reqOpts);\n    return stega.enabled ? $request.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.combineLatestWith)((0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(__webpack_require__.e(/*! import() */ \"vendor-chunks/@sanity+client@6.29.1_debug@4.4.3\").then(__webpack_require__.bind(__webpack_require__, /*! ./_chunks-es/stegaEncodeSourceMap.js */ \"(rsc)/../../node_modules/.pnpm/@sanity+client@6.29.1_debug@4.4.3/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js\")).then(function(n) {\n        return n.stegaEncodeSourceMap$1;\n    }).then(({ stegaEncodeSourceMap })=>stegaEncodeSourceMap))), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(([res, stegaEncodeSourceMap])=>{\n        const result = stegaEncodeSourceMap(res.result, res.resultSourceMap, stega);\n        return mapResponse({\n            ...res,\n            result\n        });\n    })) : $request.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(mapResponse));\n}\nfunction _getDocument(client, httpRequest, id, opts = {}) {\n    const options = {\n        uri: _getDataUrl(client, \"doc\", id),\n        json: !0,\n        tag: opts.tag,\n        signal: opts.signal\n    };\n    return _requestObservable(client, httpRequest, options).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)(isResponse), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event)=>event.body.documents && event.body.documents[0]));\n}\nfunction _getDocuments(client, httpRequest, ids, opts = {}) {\n    const options = {\n        uri: _getDataUrl(client, \"doc\", ids.join(\",\")),\n        json: !0,\n        tag: opts.tag,\n        signal: opts.signal\n    };\n    return _requestObservable(client, httpRequest, options).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)(isResponse), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event)=>{\n        const indexed = indexBy(event.body.documents || [], (doc)=>doc._id);\n        return ids.map((id)=>indexed[id] || null);\n    }));\n}\nfunction _createIfNotExists(client, httpRequest, doc, options) {\n    return requireDocumentId(\"createIfNotExists\", doc), _create(client, httpRequest, doc, \"createIfNotExists\", options);\n}\nfunction _createOrReplace(client, httpRequest, doc, options) {\n    return requireDocumentId(\"createOrReplace\", doc), _create(client, httpRequest, doc, \"createOrReplace\", options);\n}\nfunction _delete(client, httpRequest, selection, options) {\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: [\n            {\n                delete: getSelection(selection)\n            }\n        ]\n    }, options);\n}\nfunction _mutate(client, httpRequest, mutations, options) {\n    let mut;\n    mutations instanceof Patch || mutations instanceof ObservablePatch ? mut = {\n        patch: mutations.serialize()\n    } : mutations instanceof Transaction || mutations instanceof ObservableTransaction ? mut = mutations.serialize() : mut = mutations;\n    const muts = Array.isArray(mut) ? mut : [\n        mut\n    ], transactionId = options && options.transactionId || void 0;\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: muts,\n        transactionId\n    }, options);\n}\nfunction _action(client, httpRequest, actions, options) {\n    const acts = Array.isArray(actions) ? actions : [\n        actions\n    ], transactionId = options && options.transactionId || void 0, skipCrossDatasetReferenceValidation = options && options.skipCrossDatasetReferenceValidation || void 0, dryRun = options && options.dryRun || void 0;\n    return _dataRequest(client, httpRequest, \"actions\", {\n        actions: acts,\n        transactionId,\n        skipCrossDatasetReferenceValidation,\n        dryRun\n    }, options);\n}\nfunction _dataRequest(client, httpRequest, endpoint, body, options = {}) {\n    const isMutation = endpoint === \"mutate\", isAction = endpoint === \"actions\", isQuery2 = endpoint === \"query\", strQuery = isMutation || isAction ? \"\" : encodeQueryString(body), useGet = !isMutation && !isAction && strQuery.length < getQuerySizeLimit, stringQuery = useGet ? strQuery : \"\", returnFirst = options.returnFirst, { timeout, token, tag, headers, returnQuery, lastLiveEventId, cacheMode } = options, uri = _getDataUrl(client, endpoint, stringQuery), reqOptions = {\n        method: useGet ? \"GET\" : \"POST\",\n        uri,\n        json: !0,\n        body: useGet ? void 0 : body,\n        query: isMutation && getMutationQuery(options),\n        timeout,\n        headers,\n        token,\n        tag,\n        returnQuery,\n        perspective: options.perspective,\n        resultSourceMap: options.resultSourceMap,\n        lastLiveEventId: Array.isArray(lastLiveEventId) ? lastLiveEventId[0] : lastLiveEventId,\n        cacheMode,\n        canUseCdn: isQuery2,\n        signal: options.signal,\n        fetch: options.fetch,\n        useAbortSignal: options.useAbortSignal,\n        useCdn: options.useCdn\n    };\n    return _requestObservable(client, httpRequest, reqOptions).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)(isResponse), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(getBody), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((res)=>{\n        if (!isMutation) return res;\n        const results = res.results || [];\n        if (options.returnDocuments) return returnFirst ? results[0] && results[0].document : results.map((mut)=>mut.document);\n        const key = returnFirst ? \"documentId\" : \"documentIds\", ids = returnFirst ? results[0] && results[0].id : results.map((mut)=>mut.id);\n        return {\n            transactionId: res.transactionId,\n            results,\n            [key]: ids\n        };\n    }));\n}\nfunction _create(client, httpRequest, doc, op, options = {}) {\n    const mutation = {\n        [op]: doc\n    }, opts = Object.assign({\n        returnFirst: !0,\n        returnDocuments: !0\n    }, options);\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: [\n            mutation\n        ]\n    }, opts);\n}\nconst hasDataConfig = (client)=>client.config().dataset !== void 0 && client.config().projectId !== void 0 || client.config()[\"~experimental_resource\"] !== void 0, isQuery = (client, uri)=>hasDataConfig(client) && uri.startsWith(_getDataUrl(client, \"query\")), isMutate = (client, uri)=>hasDataConfig(client) && uri.startsWith(_getDataUrl(client, \"mutate\")), isDoc = (client, uri)=>hasDataConfig(client) && uri.startsWith(_getDataUrl(client, \"doc\", \"\")), isListener = (client, uri)=>hasDataConfig(client) && uri.startsWith(_getDataUrl(client, \"listen\")), isHistory = (client, uri)=>hasDataConfig(client) && uri.startsWith(_getDataUrl(client, \"history\", \"\")), isData = (client, uri)=>uri.startsWith(\"/data/\") || isQuery(client, uri) || isMutate(client, uri) || isDoc(client, uri) || isListener(client, uri) || isHistory(client, uri);\nfunction _requestObservable(client, httpRequest, options) {\n    const uri = options.url || options.uri, config = client.config(), canUseCdn = typeof options.canUseCdn > \"u\" ? [\n        \"GET\",\n        \"HEAD\"\n    ].indexOf(options.method || \"GET\") >= 0 && isData(client, uri) : options.canUseCdn;\n    let useCdn = (options.useCdn ?? config.useCdn) && canUseCdn;\n    const tag = options.tag && config.requestTagPrefix ? [\n        config.requestTagPrefix,\n        options.tag\n    ].join(\".\") : options.tag || config.requestTagPrefix;\n    if (tag && options.tag !== null && (options.query = {\n        tag: requestTag(tag),\n        ...options.query\n    }), [\n        \"GET\",\n        \"HEAD\",\n        \"POST\"\n    ].indexOf(options.method || \"GET\") >= 0 && isQuery(client, uri)) {\n        const resultSourceMap = options.resultSourceMap ?? config.resultSourceMap;\n        resultSourceMap !== void 0 && resultSourceMap !== !1 && (options.query = {\n            resultSourceMap,\n            ...options.query\n        });\n        const perspectiveOption = options.perspective || config.perspective;\n        typeof perspectiveOption < \"u\" && (perspectiveOption === \"previewDrafts\" && printPreviewDraftsDeprecationWarning(), validateApiPerspective(perspectiveOption), options.query = {\n            perspective: Array.isArray(perspectiveOption) ? perspectiveOption.join(\",\") : perspectiveOption,\n            ...options.query\n        }, (Array.isArray(perspectiveOption) && perspectiveOption.length > 0 || // previewDrafts was renamed to drafts, but keep for backwards compat\n        perspectiveOption === \"previewDrafts\" || perspectiveOption === \"drafts\") && useCdn && (useCdn = !1, printCdnPreviewDraftsWarning())), options.lastLiveEventId && (options.query = {\n            ...options.query,\n            lastLiveEventId: options.lastLiveEventId\n        }), options.returnQuery === !1 && (options.query = {\n            returnQuery: \"false\",\n            ...options.query\n        }), useCdn && options.cacheMode == \"noStale\" && (options.query = {\n            cacheMode: \"noStale\",\n            ...options.query\n        });\n    }\n    const reqOptions = requestOptions(config, Object.assign({}, options, {\n        url: _getUrl(client, uri, useCdn)\n    })), request = new _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((subscriber)=>httpRequest(reqOptions, config.requester).subscribe(subscriber));\n    return options.signal ? request.pipe(_withAbortSignal(options.signal)) : request;\n}\nfunction _request(client, httpRequest, options) {\n    return _requestObservable(client, httpRequest, options).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)((event)=>event.type === \"response\"), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event)=>event.body));\n}\nfunction _getDataUrl(client, operation, path) {\n    const config = client.config();\n    if (config[\"~experimental_resource\"]) {\n        resourceConfig(config);\n        const resourceBase = resourceDataBase(config), uri2 = path !== void 0 ? `${operation}/${path}` : operation;\n        return `${resourceBase}/${uri2}`.replace(/\\/($|\\?)/, \"$1\");\n    }\n    const catalog = hasDataset(config), baseUri = `/${operation}/${catalog}`;\n    return `/data${path !== void 0 ? `${baseUri}/${path}` : baseUri}`.replace(/\\/($|\\?)/, \"$1\");\n}\nfunction _getUrl(client, uri, canUseCdn = !1) {\n    const { url, cdnUrl } = client.config();\n    return `${canUseCdn ? cdnUrl : url}/${uri.replace(/^\\//, \"\")}`;\n}\nfunction _withAbortSignal(signal) {\n    return (input)=>new _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>{\n            const abort = ()=>observer.error(_createAbortError(signal));\n            if (signal && signal.aborted) {\n                abort();\n                return;\n            }\n            const subscription = input.subscribe(observer);\n            return signal.addEventListener(\"abort\", abort), ()=>{\n                signal.removeEventListener(\"abort\", abort), subscription.unsubscribe();\n            };\n        });\n}\nconst isDomExceptionSupported = !!globalThis.DOMException;\nfunction _createAbortError(signal) {\n    if (isDomExceptionSupported) return new DOMException(signal?.reason ?? \"The operation was aborted.\", \"AbortError\");\n    const error = new Error(signal?.reason ?? \"The operation was aborted.\");\n    return error.name = \"AbortError\", error;\n}\nconst resourceDataBase = (config)=>{\n    if (!config[\"~experimental_resource\"]) throw new Error(\"`resource` must be provided to perform resource queries\");\n    const { type, id } = config[\"~experimental_resource\"];\n    switch(type){\n        case \"dataset\":\n            {\n                const segments = id.split(\".\");\n                if (segments.length !== 2) throw new Error('Dataset ID must be in the format \"project.dataset\"');\n                return `/projects/${segments[0]}/datasets/${segments[1]}`;\n            }\n        case \"canvas\":\n            return `/canvases/${id}`;\n        case \"media-library\":\n            return `/media-libraries/${id}`;\n        case \"dashboard\":\n            return `/dashboards/${id}`;\n        default:\n            throw new Error(`Unsupported resource type: ${type.toString()}`);\n    }\n};\nclass ObservableAssetsClient {\n    #client;\n    #httpRequest;\n    constructor(client, httpRequest){\n        this.#client = client, this.#httpRequest = httpRequest;\n    }\n    upload(assetType, body, options) {\n        return _upload(this.#client, this.#httpRequest, assetType, body, options);\n    }\n}\nclass AssetsClient {\n    #client;\n    #httpRequest;\n    constructor(client, httpRequest){\n        this.#client = client, this.#httpRequest = httpRequest;\n    }\n    upload(assetType, body, options) {\n        const observable2 = _upload(this.#client, this.#httpRequest, assetType, body, options);\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(observable2.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)((event)=>event.type === \"response\"), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event)=>event.body.document)));\n    }\n}\nfunction _upload(client, httpRequest, assetType, body, opts = {}) {\n    validateAssetType(assetType);\n    let meta = opts.extract || void 0;\n    meta && !meta.length && (meta = [\n        \"none\"\n    ]);\n    const config = client.config(), options = optionsFromFile(opts, body), { tag, label, title, description, creditLine, filename, source } = options, query = {\n        label,\n        title,\n        description,\n        filename,\n        meta,\n        creditLine\n    };\n    return source && (query.sourceId = source.id, query.sourceName = source.name, query.sourceUrl = source.url), _requestObservable(client, httpRequest, {\n        tag,\n        method: \"POST\",\n        timeout: options.timeout || 0,\n        uri: buildAssetUploadUrl(config, assetType),\n        headers: options.contentType ? {\n            \"Content-Type\": options.contentType\n        } : {},\n        query,\n        body\n    });\n}\nfunction buildAssetUploadUrl(config, assetType) {\n    const assetTypeEndpoint = assetType === \"image\" ? \"images\" : \"files\";\n    if (config[\"~experimental_resource\"]) {\n        const { type, id } = config[\"~experimental_resource\"];\n        switch(type){\n            case \"dataset\":\n                throw new Error(\"Assets are not supported for dataset resources, yet. Configure the client with `{projectId: <projectId>, dataset: <datasetId>}` instead.\");\n            case \"canvas\":\n                return `/canvases/${id}/assets/${assetTypeEndpoint}`;\n            case \"media-library\":\n                return `/media-libraries/${id}/upload`;\n            case \"dashboard\":\n                return `/dashboards/${id}/assets/${assetTypeEndpoint}`;\n            default:\n                throw new Error(`Unsupported resource type: ${type.toString()}`);\n        }\n    }\n    const dataset2 = hasDataset(config);\n    return `assets/${assetTypeEndpoint}/${dataset2}`;\n}\nfunction optionsFromFile(opts, file) {\n    return typeof File > \"u\" || !(file instanceof File) ? opts : Object.assign({\n        filename: opts.preserveFilename === !1 ? void 0 : file.name,\n        contentType: file.type\n    }, opts);\n}\nvar defaults = (obj, defaults2)=>Object.keys(defaults2).concat(Object.keys(obj)).reduce((target, prop)=>(target[prop] = typeof obj[prop] > \"u\" ? defaults2[prop] : obj[prop], target), {});\nconst pick = (obj, props)=>props.reduce((selection, prop)=>(typeof obj[prop] > \"u\" || (selection[prop] = obj[prop]), selection), {}), eventSourcePolyfill = (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_3__.defer)(()=>Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@sanity+eventsource@5.0.2\"), __webpack_require__.e(\"vendor-chunks/eventsource@2.0.2\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! @sanity/eventsource */ \"(rsc)/../../node_modules/.pnpm/@sanity+eventsource@5.0.2/node_modules/@sanity/eventsource/node.js\", 19))).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(({ default: EventSource2 })=>EventSource2), (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_11__.shareReplay)(1));\nfunction reconnectOnConnectionFailure() {\n    return function(source) {\n        return source.pipe((0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_12__.catchError)((err, caught)=>err instanceof ConnectionFailedError ? (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_13__.concat)((0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_5__.of)({\n                type: \"reconnect\"\n            }), (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_14__.timer)(1e3).pipe((0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)(()=>caught))) : (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_15__.throwError)(()=>err)));\n    };\n}\nconst MAX_URL_LENGTH = 14800, possibleOptions = [\n    \"includePreviousRevision\",\n    \"includeResult\",\n    \"includeMutations\",\n    \"includeAllVersions\",\n    \"visibility\",\n    \"effectFormat\",\n    \"tag\"\n], defaultOptions = {\n    includeResult: !0\n};\nfunction _listen(query, params, opts = {}) {\n    const { url, token, withCredentials, requestTagPrefix } = this.config(), tag = opts.tag && requestTagPrefix ? [\n        requestTagPrefix,\n        opts.tag\n    ].join(\".\") : opts.tag, options = {\n        ...defaults(opts, defaultOptions),\n        tag\n    }, listenOpts = pick(options, possibleOptions), qs = encodeQueryString({\n        query,\n        params,\n        options: {\n            tag,\n            ...listenOpts\n        }\n    }), uri = `${url}${_getDataUrl(this, \"listen\", qs)}`;\n    if (uri.length > MAX_URL_LENGTH) return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_15__.throwError)(()=>new Error(\"Query too large for listener\"));\n    const listenFor = options.events ? options.events : [\n        \"mutation\"\n    ], esOptions = {};\n    return withCredentials && (esOptions.withCredentials = !0), token && (esOptions.headers = {\n        Authorization: `Bearer ${token}`\n    }), connectEventSource(()=>// use polyfill if there is no global EventSource or if we need to set headers\n        (typeof EventSource > \"u\" || esOptions.headers ? eventSourcePolyfill : (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(EventSource)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((EventSource2)=>new EventSource2(uri, esOptions))), listenFor).pipe(reconnectOnConnectionFailure(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)((event)=>listenFor.includes(event.type)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event)=>({\n            type: event.type,\n            ...\"data\" in event ? event.data : {}\n        })));\n}\nfunction shareReplayLatest(configOrPredicate, config) {\n    return _shareReplayLatest(typeof configOrPredicate == \"function\" ? {\n        predicate: configOrPredicate,\n        ...config\n    } : configOrPredicate);\n}\nfunction _shareReplayLatest(config) {\n    return (source)=>{\n        let latest, emitted = !1;\n        const { predicate, ...shareConfig } = config, wrapped = source.pipe((0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_16__.tap)((value)=>{\n            config.predicate(value) && (emitted = !0, latest = value);\n        }), (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.finalize)(()=>{\n            emitted = !1, latest = void 0;\n        }), (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.share)(shareConfig)), emitLatest = new _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((subscriber)=>{\n            emitted && subscriber.next(// this cast is safe because of the emitted check which asserts that we got T from the source\n            latest), subscriber.complete();\n        });\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.merge)(wrapped, emitLatest);\n    };\n}\nconst requiredApiVersion = \"2021-03-25\";\nclass LiveClient {\n    #client;\n    constructor(client){\n        this.#client = client;\n    }\n    /**\n   * Requires `apiVersion` to be `2021-03-25` or later.\n   */ events({ includeDrafts = !1, tag: _tag } = {}) {\n        resourceGuard(\"live\", this.#client.config());\n        const { projectId: projectId2, apiVersion: _apiVersion, token, withCredentials, requestTagPrefix } = this.#client.config(), apiVersion = _apiVersion.replace(/^v/, \"\");\n        if (apiVersion !== \"X\" && apiVersion < requiredApiVersion) throw new Error(`The live events API requires API version ${requiredApiVersion} or later. The current API version is ${apiVersion}. Please update your API version to use this feature.`);\n        if (includeDrafts && !token && !withCredentials) throw new Error(\"The live events API requires a token or withCredentials when 'includeDrafts: true'. Please update your client configuration. The token should have the lowest possible access role.\");\n        const path = _getDataUrl(this.#client, \"live/events\"), url = new URL(this.#client.getUrl(path, !1)), tag = _tag && requestTagPrefix ? [\n            requestTagPrefix,\n            _tag\n        ].join(\".\") : _tag;\n        tag && url.searchParams.set(\"tag\", tag), includeDrafts && url.searchParams.set(\"includeDrafts\", \"true\");\n        const esOptions = {};\n        includeDrafts && token && (esOptions.headers = {\n            Authorization: `Bearer ${token}`\n        }), includeDrafts && withCredentials && (esOptions.withCredentials = !0);\n        const key = `${url.href}::${JSON.stringify(esOptions)}`, existing = eventsCache.get(key);\n        if (existing) return existing;\n        const events = connectEventSource(()=>// use polyfill if there is no global EventSource or if we need to set headers\n            (typeof EventSource > \"u\" || esOptions.headers ? eventSourcePolyfill : (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(EventSource)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((EventSource2)=>new EventSource2(url.href, esOptions))), [\n            \"message\",\n            \"restart\",\n            \"welcome\",\n            \"reconnect\",\n            \"goaway\"\n        ]).pipe(reconnectOnConnectionFailure(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event)=>{\n            if (event.type === \"message\") {\n                const { data, ...rest } = event;\n                return {\n                    ...rest,\n                    tags: data.tags\n                };\n            }\n            return event;\n        })), checkCors = fetchObservable(url, {\n            method: \"OPTIONS\",\n            mode: \"cors\",\n            credentials: esOptions.withCredentials ? \"include\" : \"omit\",\n            headers: esOptions.headers\n        }).pipe((0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)(()=>_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.EMPTY), (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_12__.catchError)(()=>{\n            throw new CorsOriginError({\n                projectId: projectId2\n            });\n        })), observable2 = (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_13__.concat)(checkCors, events).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.finalize)(()=>eventsCache.delete(key)), shareReplayLatest({\n            predicate: (event)=>event.type === \"welcome\"\n        }));\n        return eventsCache.set(key, observable2), observable2;\n    }\n}\nfunction fetchObservable(url, init) {\n    return new _barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>{\n        const controller = new AbortController(), signal = controller.signal;\n        return fetch(url, {\n            ...init,\n            signal: controller.signal\n        }).then((response)=>{\n            observer.next(response), observer.complete();\n        }, (err)=>{\n            signal.aborted || observer.error(err);\n        }), ()=>controller.abort();\n    });\n}\nconst eventsCache = /* @__PURE__ */ new Map();\nclass ObservableDatasetsClient {\n    #client;\n    #httpRequest;\n    constructor(client, httpRequest){\n        this.#client = client, this.#httpRequest = httpRequest;\n    }\n    /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */ create(name, options) {\n        return _modify(this.#client, this.#httpRequest, \"PUT\", name, options);\n    }\n    /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */ edit(name, options) {\n        return _modify(this.#client, this.#httpRequest, \"PATCH\", name, options);\n    }\n    /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */ delete(name) {\n        return _modify(this.#client, this.#httpRequest, \"DELETE\", name);\n    }\n    /**\n   * Fetch a list of datasets for the configured project\n   */ list() {\n        return _request(this.#client, this.#httpRequest, {\n            uri: \"/datasets\",\n            tag: null\n        });\n    }\n}\nclass DatasetsClient {\n    #client;\n    #httpRequest;\n    constructor(client, httpRequest){\n        this.#client = client, this.#httpRequest = httpRequest;\n    }\n    /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */ create(name, options) {\n        return resourceGuard(\"dataset\", this.#client.config()), (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_modify(this.#client, this.#httpRequest, \"PUT\", name, options));\n    }\n    /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */ edit(name, options) {\n        return resourceGuard(\"dataset\", this.#client.config()), (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_modify(this.#client, this.#httpRequest, \"PATCH\", name, options));\n    }\n    /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */ delete(name) {\n        return resourceGuard(\"dataset\", this.#client.config()), (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_modify(this.#client, this.#httpRequest, \"DELETE\", name));\n    }\n    /**\n   * Fetch a list of datasets for the configured project\n   */ list() {\n        return resourceGuard(\"dataset\", this.#client.config()), (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_request(this.#client, this.#httpRequest, {\n            uri: \"/datasets\",\n            tag: null\n        }));\n    }\n}\nfunction _modify(client, httpRequest, method, name, options) {\n    return resourceGuard(\"dataset\", client.config()), dataset(name), _request(client, httpRequest, {\n        method,\n        uri: `/datasets/${name}`,\n        body: options,\n        tag: null\n    });\n}\nclass ObservableProjectsClient {\n    #client;\n    #httpRequest;\n    constructor(client, httpRequest){\n        this.#client = client, this.#httpRequest = httpRequest;\n    }\n    list(options) {\n        resourceGuard(\"projects\", this.#client.config());\n        const uri = options?.includeMembers === !1 ? \"/projects?includeMembers=false\" : \"/projects\";\n        return _request(this.#client, this.#httpRequest, {\n            uri\n        });\n    }\n    /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */ getById(projectId2) {\n        return resourceGuard(\"projects\", this.#client.config()), _request(this.#client, this.#httpRequest, {\n            uri: `/projects/${projectId2}`\n        });\n    }\n}\nclass ProjectsClient {\n    #client;\n    #httpRequest;\n    constructor(client, httpRequest){\n        this.#client = client, this.#httpRequest = httpRequest;\n    }\n    list(options) {\n        resourceGuard(\"projects\", this.#client.config());\n        const uri = options?.includeMembers === !1 ? \"/projects?includeMembers=false\" : \"/projects\";\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_request(this.#client, this.#httpRequest, {\n            uri\n        }));\n    }\n    /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */ getById(projectId2) {\n        return resourceGuard(\"projects\", this.#client.config()), (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_request(this.#client, this.#httpRequest, {\n            uri: `/projects/${projectId2}`\n        }));\n    }\n}\nclass ObservableUsersClient {\n    #client;\n    #httpRequest;\n    constructor(client, httpRequest){\n        this.#client = client, this.#httpRequest = httpRequest;\n    }\n    /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */ getById(id) {\n        return _request(this.#client, this.#httpRequest, {\n            uri: `/users/${id}`\n        });\n    }\n}\nclass UsersClient {\n    #client;\n    #httpRequest;\n    constructor(client, httpRequest){\n        this.#client = client, this.#httpRequest = httpRequest;\n    }\n    /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */ getById(id) {\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_request(this.#client, this.#httpRequest, {\n            uri: `/users/${id}`\n        }));\n    }\n}\nclass ObservableSanityClient {\n    /**\n   * Private properties\n   */ #clientConfig;\n    #httpRequest;\n    constructor(httpRequest, config = defaultConfig){\n        /**\n   * Instance properties\n   */ this.listen = _listen;\n        this.config(config), this.#httpRequest = httpRequest, this.assets = new ObservableAssetsClient(this, this.#httpRequest), this.datasets = new ObservableDatasetsClient(this, this.#httpRequest), this.live = new LiveClient(this), this.projects = new ObservableProjectsClient(this, this.#httpRequest), this.users = new ObservableUsersClient(this, this.#httpRequest);\n    }\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new ObservableSanityClient(this.#httpRequest, this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) return {\n            ...this.#clientConfig\n        };\n        if (this.#clientConfig && this.#clientConfig.allowReconfigure === !1) throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n        return this.#clientConfig = initConfig(newConfig, this.#clientConfig || {}), this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        const thisConfig = this.config();\n        return new ObservableSanityClient(this.#httpRequest, {\n            ...thisConfig,\n            ...newConfig,\n            stega: {\n                ...thisConfig.stega || {},\n                ...typeof newConfig?.stega == \"boolean\" ? {\n                    enabled: newConfig.stega\n                } : newConfig?.stega || {}\n            }\n        });\n    }\n    fetch(query, params, options) {\n        return _fetch(this, this.#httpRequest, this.#clientConfig.stega, query, params, options);\n    }\n    /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */ getDocument(id, options) {\n        return _getDocument(this, this.#httpRequest, id, options);\n    }\n    /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */ getDocuments(ids, options) {\n        return _getDocuments(this, this.#httpRequest, ids, options);\n    }\n    create(document, options) {\n        return _create(this, this.#httpRequest, document, \"create\", options);\n    }\n    createIfNotExists(document, options) {\n        return _createIfNotExists(this, this.#httpRequest, document, options);\n    }\n    createOrReplace(document, options) {\n        return _createOrReplace(this, this.#httpRequest, document, options);\n    }\n    delete(selection, options) {\n        return _delete(this, this.#httpRequest, selection, options);\n    }\n    mutate(operations, options) {\n        return _mutate(this, this.#httpRequest, operations, options);\n    }\n    /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */ patch(selection, operations) {\n        return new ObservablePatch(selection, operations, this);\n    }\n    /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */ transaction(operations) {\n        return new ObservableTransaction(operations, this);\n    }\n    /**\n   * Perform action operations against the configured dataset\n   *\n   * @param operations - Action operation(s) to execute\n   * @param options - Action options\n   */ action(operations, options) {\n        return _action(this, this.#httpRequest, operations, options);\n    }\n    /**\n   * Perform an HTTP request against the Sanity API\n   *\n   * @param options - Request options\n   */ request(options) {\n        return _request(this, this.#httpRequest, options);\n    }\n    /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */ getUrl(uri, canUseCdn) {\n        return _getUrl(this, uri, canUseCdn);\n    }\n    /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */ getDataUrl(operation, path) {\n        return _getDataUrl(this, operation, path);\n    }\n}\nclass SanityClient {\n    /**\n   * Private properties\n   */ #clientConfig;\n    #httpRequest;\n    constructor(httpRequest, config = defaultConfig){\n        /**\n   * Instance properties\n   */ this.listen = _listen;\n        this.config(config), this.#httpRequest = httpRequest, this.assets = new AssetsClient(this, this.#httpRequest), this.datasets = new DatasetsClient(this, this.#httpRequest), this.live = new LiveClient(this), this.projects = new ProjectsClient(this, this.#httpRequest), this.users = new UsersClient(this, this.#httpRequest), this.observable = new ObservableSanityClient(httpRequest, config);\n    }\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new SanityClient(this.#httpRequest, this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) return {\n            ...this.#clientConfig\n        };\n        if (this.#clientConfig && this.#clientConfig.allowReconfigure === !1) throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n        return this.observable && this.observable.config(newConfig), this.#clientConfig = initConfig(newConfig, this.#clientConfig || {}), this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        const thisConfig = this.config();\n        return new SanityClient(this.#httpRequest, {\n            ...thisConfig,\n            ...newConfig,\n            stega: {\n                ...thisConfig.stega || {},\n                ...typeof newConfig?.stega == \"boolean\" ? {\n                    enabled: newConfig.stega\n                } : newConfig?.stega || {}\n            }\n        });\n    }\n    fetch(query, params, options) {\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_fetch(this, this.#httpRequest, this.#clientConfig.stega, query, params, options));\n    }\n    /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */ getDocument(id, options) {\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_getDocument(this, this.#httpRequest, id, options));\n    }\n    /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */ getDocuments(ids, options) {\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_getDocuments(this, this.#httpRequest, ids, options));\n    }\n    create(document, options) {\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_create(this, this.#httpRequest, document, \"create\", options));\n    }\n    createIfNotExists(document, options) {\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_createIfNotExists(this, this.#httpRequest, document, options));\n    }\n    createOrReplace(document, options) {\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_createOrReplace(this, this.#httpRequest, document, options));\n    }\n    delete(selection, options) {\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_delete(this, this.#httpRequest, selection, options));\n    }\n    mutate(operations, options) {\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_mutate(this, this.#httpRequest, operations, options));\n    }\n    /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */ patch(documentId, operations) {\n        return new Patch(documentId, operations, this);\n    }\n    /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */ transaction(operations) {\n        return new Transaction(operations, this);\n    }\n    /**\n   * Perform action operations against the configured dataset\n   * Returns a promise that resolves to the transaction result\n   *\n   * @param operations - Action operation(s) to execute\n   * @param options - Action options\n   */ action(operations, options) {\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_action(this, this.#httpRequest, operations, options));\n    }\n    /**\n   * Perform a request against the Sanity API\n   * NOTE: Only use this for Sanity API endpoints, not for your own APIs!\n   *\n   * @param options - Request options\n   * @returns Promise resolving to the response body\n   */ request(options) {\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_request(this, this.#httpRequest, options));\n    }\n    /**\n   * Perform an HTTP request a `/data` sub-endpoint\n   * NOTE: Considered internal, thus marked as deprecated. Use `request` instead.\n   *\n   * @deprecated - Use `request()` or your own HTTP library instead\n   * @param endpoint - Endpoint to hit (mutate, query etc)\n   * @param body - Request body\n   * @param options - Request options\n   * @internal\n   */ dataRequest(endpoint, body, options) {\n        return (0,_barrel_optimize_names_EMPTY_Observable_catchError_concat_defer_finalize_from_isObservable_lastValueFrom_merge_mergeMap_of_share_shareReplay_tap_throwError_timer_rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_dataRequest(this, this.#httpRequest, endpoint, body, options));\n    }\n    /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */ getUrl(uri, canUseCdn) {\n        return _getUrl(this, uri, canUseCdn);\n    }\n    /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */ getDataUrl(operation, path) {\n        return _getDataUrl(this, operation, path);\n    }\n}\nfunction defineCreateClientExports(envMiddleware2, ClassConstructor) {\n    return {\n        requester: defineHttpRequest(envMiddleware2),\n        createClient: (config)=>{\n            const clientRequester = defineHttpRequest(envMiddleware2);\n            return new ClassConstructor((options, requester2)=>(requester2 || clientRequester)({\n                    maxRedirects: 0,\n                    maxRetries: config.maxRetries,\n                    retryDelay: config.retryDelay,\n                    ...options\n                }), config);\n        }\n    };\n}\nfunction defineDeprecatedCreateClient(createClient2) {\n    return function(config) {\n        return printNoDefaultExport(), createClient2(config);\n    };\n}\nvar envMiddleware = [];\nconst exp = defineCreateClientExports(envMiddleware, SanityClient), requester = exp.requester, createClient = exp.createClient, deprecatedCreateClient = defineDeprecatedCreateClient(createClient);\n //# sourceMappingURL=index.browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sanity+client@6.29.1_debug@4.4.3/node_modules/@sanity/client/dist/index.browser.js\n");

/***/ })

};
;