"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_payloadcms_richtext-lexical_dist_exports_client_Field-F2KOJLMQ_js"],{

/***/ "(app-pages-browser)/./node_modules/@lexical/dragon/LexicalDragon.dev.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@lexical/dragon/LexicalDragon.dev.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   registerDragonSupport: () => (/* binding */ registerDragonSupport)\n/* harmony export */ });\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction registerDragonSupport(editor) {\n  const origin = window.location.origin;\n  const handler = event => {\n    if (event.origin !== origin) {\n      return;\n    }\n    const rootElement = editor.getRootElement();\n    if (document.activeElement !== rootElement) {\n      return;\n    }\n    const data = event.data;\n    if (typeof data === 'string') {\n      let parsedData;\n      try {\n        parsedData = JSON.parse(data);\n      } catch (e) {\n        return;\n      }\n      if (parsedData && parsedData.protocol === 'nuanria_messaging' && parsedData.type === 'request') {\n        const payload = parsedData.payload;\n        if (payload && payload.functionId === 'makeChanges') {\n          const args = payload.args;\n          if (args) {\n            const [elementStart, elementLength, text, selStart, selLength, formatCommand] = args;\n            editor.update(() => {\n              const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getSelection)();\n              if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(selection)) {\n                const anchor = selection.anchor;\n                let anchorNode = anchor.getNode();\n                let setSelStart = 0;\n                let setSelEnd = 0;\n                if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(anchorNode)) {\n                  // set initial selection\n                  if (elementStart >= 0 && elementLength >= 0) {\n                    setSelStart = elementStart;\n                    setSelEnd = elementStart + elementLength;\n                    // If the offset is more than the end, make it the end\n                    selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                  }\n                }\n                if (setSelStart !== setSelEnd || text !== '') {\n                  selection.insertRawText(text);\n                  anchorNode = anchor.getNode();\n                }\n                if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(anchorNode)) {\n                  // set final selection\n                  setSelStart = selStart;\n                  setSelEnd = selStart + selLength;\n                  const anchorNodeTextLength = anchorNode.getTextContentSize();\n                  // If the offset is more than the end, make it the end\n                  setSelStart = setSelStart > anchorNodeTextLength ? anchorNodeTextLength : setSelStart;\n                  setSelEnd = setSelEnd > anchorNodeTextLength ? anchorNodeTextLength : setSelEnd;\n                  selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                }\n\n                // block the chrome extension from handling this event\n                event.stopImmediatePropagation();\n              }\n            });\n          }\n        }\n      }\n    }\n  };\n  window.addEventListener('message', handler, true);\n  return () => {\n    window.removeEventListener('message', handler, true);\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9kcmFnb24vTGV4aWNhbERyYWdvbi5kZXYubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXdFOztBQUV4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHNEQUFhO0FBQzdDLGtCQUFrQiwwREFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isb0RBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9EQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWlDIiwic291cmNlcyI6WyIvVXNlcnMvbWFnbnVzb2hsZS9jdXJzb3Jwcm9qZWN0cy9zbXBsYXQvYXBwcy1jbXMtcGF5bG9hZC9ub2RlX21vZHVsZXMvQGxleGljYWwvZHJhZ29uL0xleGljYWxEcmFnb24uZGV2Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmltcG9ydCB7ICRnZXRTZWxlY3Rpb24sICRpc1JhbmdlU2VsZWN0aW9uLCAkaXNUZXh0Tm9kZSB9IGZyb20gJ2xleGljYWwnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmZ1bmN0aW9uIHJlZ2lzdGVyRHJhZ29uU3VwcG9ydChlZGl0b3IpIHtcbiAgY29uc3Qgb3JpZ2luID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbjtcbiAgY29uc3QgaGFuZGxlciA9IGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnQub3JpZ2luICE9PSBvcmlnaW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgcm9vdEVsZW1lbnQgPSBlZGl0b3IuZ2V0Um9vdEVsZW1lbnQoKTtcbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gcm9vdEVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGV2ZW50LmRhdGE7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgbGV0IHBhcnNlZERhdGE7XG4gICAgICB0cnkge1xuICAgICAgICBwYXJzZWREYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHBhcnNlZERhdGEgJiYgcGFyc2VkRGF0YS5wcm90b2NvbCA9PT0gJ251YW5yaWFfbWVzc2FnaW5nJyAmJiBwYXJzZWREYXRhLnR5cGUgPT09ICdyZXF1ZXN0Jykge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gcGFyc2VkRGF0YS5wYXlsb2FkO1xuICAgICAgICBpZiAocGF5bG9hZCAmJiBwYXlsb2FkLmZ1bmN0aW9uSWQgPT09ICdtYWtlQ2hhbmdlcycpIHtcbiAgICAgICAgICBjb25zdCBhcmdzID0gcGF5bG9hZC5hcmdzO1xuICAgICAgICAgIGlmIChhcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBbZWxlbWVudFN0YXJ0LCBlbGVtZW50TGVuZ3RoLCB0ZXh0LCBzZWxTdGFydCwgc2VsTGVuZ3RoLCBmb3JtYXRDb21tYW5kXSA9IGFyZ3M7XG4gICAgICAgICAgICBlZGl0b3IudXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gJGdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICBpZiAoJGlzUmFuZ2VTZWxlY3Rpb24oc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IHNlbGVjdGlvbi5hbmNob3I7XG4gICAgICAgICAgICAgICAgbGV0IGFuY2hvck5vZGUgPSBhbmNob3IuZ2V0Tm9kZSgpO1xuICAgICAgICAgICAgICAgIGxldCBzZXRTZWxTdGFydCA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IHNldFNlbEVuZCA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKCRpc1RleHROb2RlKGFuY2hvck5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBzZXQgaW5pdGlhbCBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50U3RhcnQgPj0gMCAmJiBlbGVtZW50TGVuZ3RoID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0U2VsU3RhcnQgPSBlbGVtZW50U3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIHNldFNlbEVuZCA9IGVsZW1lbnRTdGFydCArIGVsZW1lbnRMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvZmZzZXQgaXMgbW9yZSB0aGFuIHRoZSBlbmQsIG1ha2UgaXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uc2V0VGV4dE5vZGVSYW5nZShhbmNob3JOb2RlLCBzZXRTZWxTdGFydCwgYW5jaG9yTm9kZSwgc2V0U2VsRW5kKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNldFNlbFN0YXJ0ICE9PSBzZXRTZWxFbmQgfHwgdGV4dCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5pbnNlcnRSYXdUZXh0KHRleHQpO1xuICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IGFuY2hvci5nZXROb2RlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgkaXNUZXh0Tm9kZShhbmNob3JOb2RlKSkge1xuICAgICAgICAgICAgICAgICAgLy8gc2V0IGZpbmFsIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgc2V0U2VsU3RhcnQgPSBzZWxTdGFydDtcbiAgICAgICAgICAgICAgICAgIHNldFNlbEVuZCA9IHNlbFN0YXJ0ICsgc2VsTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yTm9kZVRleHRMZW5ndGggPSBhbmNob3JOb2RlLmdldFRleHRDb250ZW50U2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG9mZnNldCBpcyBtb3JlIHRoYW4gdGhlIGVuZCwgbWFrZSBpdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICBzZXRTZWxTdGFydCA9IHNldFNlbFN0YXJ0ID4gYW5jaG9yTm9kZVRleHRMZW5ndGggPyBhbmNob3JOb2RlVGV4dExlbmd0aCA6IHNldFNlbFN0YXJ0O1xuICAgICAgICAgICAgICAgICAgc2V0U2VsRW5kID0gc2V0U2VsRW5kID4gYW5jaG9yTm9kZVRleHRMZW5ndGggPyBhbmNob3JOb2RlVGV4dExlbmd0aCA6IHNldFNlbEVuZDtcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5zZXRUZXh0Tm9kZVJhbmdlKGFuY2hvck5vZGUsIHNldFNlbFN0YXJ0LCBhbmNob3JOb2RlLCBzZXRTZWxFbmQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGJsb2NrIHRoZSBjaHJvbWUgZXh0ZW5zaW9uIGZyb20gaGFuZGxpbmcgdGhpcyBldmVudFxuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgaGFuZGxlciwgdHJ1ZSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVyLCB0cnVlKTtcbiAgfTtcbn1cblxuZXhwb3J0IHsgcmVnaXN0ZXJEcmFnb25TdXBwb3J0IH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/dragon/LexicalDragon.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/history/LexicalHistory.dev.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@lexical/history/LexicalHistory.dev.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEmptyHistoryState: () => (/* binding */ createEmptyHistoryState),\n/* harmony export */   registerHistory: () => (/* binding */ registerHistory)\n/* harmony export */ });\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HISTORY_MERGE = 0;\nconst HISTORY_PUSH = 1;\nconst DISCARD_HISTORY_CANDIDATE = 2;\nconst OTHER = 0;\nconst COMPOSING_CHARACTER = 1;\nconst INSERT_CHARACTER_AFTER_SELECTION = 2;\nconst DELETE_CHARACTER_BEFORE_SELECTION = 3;\nconst DELETE_CHARACTER_AFTER_SELECTION = 4;\nfunction getDirtyNodes(editorState, dirtyLeaves, dirtyElements) {\n  const nodeMap = editorState._nodeMap;\n  const nodes = [];\n  for (const dirtyLeafKey of dirtyLeaves) {\n    const dirtyLeaf = nodeMap.get(dirtyLeafKey);\n    if (dirtyLeaf !== undefined) {\n      nodes.push(dirtyLeaf);\n    }\n  }\n  for (const [dirtyElementKey, intentionallyMarkedAsDirty] of dirtyElements) {\n    if (!intentionallyMarkedAsDirty) {\n      continue;\n    }\n    const dirtyElement = nodeMap.get(dirtyElementKey);\n    if (dirtyElement !== undefined && !(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRootNode)(dirtyElement)) {\n      nodes.push(dirtyElement);\n    }\n  }\n  return nodes;\n}\nfunction getChangeType(prevEditorState, nextEditorState, dirtyLeavesSet, dirtyElementsSet, isComposing) {\n  if (prevEditorState === null || dirtyLeavesSet.size === 0 && dirtyElementsSet.size === 0 && !isComposing) {\n    return OTHER;\n  }\n  const nextSelection = nextEditorState._selection;\n  const prevSelection = prevEditorState._selection;\n  if (isComposing) {\n    return COMPOSING_CHARACTER;\n  }\n  if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(nextSelection) || !(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(prevSelection) || !prevSelection.isCollapsed() || !nextSelection.isCollapsed()) {\n    return OTHER;\n  }\n  const dirtyNodes = getDirtyNodes(nextEditorState, dirtyLeavesSet, dirtyElementsSet);\n  if (dirtyNodes.length === 0) {\n    return OTHER;\n  }\n\n  // Catching the case when inserting new text node into an element (e.g. first char in paragraph/list),\n  // or after existing node.\n  if (dirtyNodes.length > 1) {\n    const nextNodeMap = nextEditorState._nodeMap;\n    const nextAnchorNode = nextNodeMap.get(nextSelection.anchor.key);\n    const prevAnchorNode = nextNodeMap.get(prevSelection.anchor.key);\n    if (nextAnchorNode && prevAnchorNode && !prevEditorState._nodeMap.has(nextAnchorNode.__key) && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextAnchorNode) && nextAnchorNode.__text.length === 1 && nextSelection.anchor.offset === 1) {\n      return INSERT_CHARACTER_AFTER_SELECTION;\n    }\n    return OTHER;\n  }\n  const nextDirtyNode = dirtyNodes[0];\n  const prevDirtyNode = prevEditorState._nodeMap.get(nextDirtyNode.__key);\n  if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevDirtyNode) || !(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextDirtyNode) || prevDirtyNode.__mode !== nextDirtyNode.__mode) {\n    return OTHER;\n  }\n  const prevText = prevDirtyNode.__text;\n  const nextText = nextDirtyNode.__text;\n  if (prevText === nextText) {\n    return OTHER;\n  }\n  const nextAnchor = nextSelection.anchor;\n  const prevAnchor = prevSelection.anchor;\n  if (nextAnchor.key !== prevAnchor.key || nextAnchor.type !== 'text') {\n    return OTHER;\n  }\n  const nextAnchorOffset = nextAnchor.offset;\n  const prevAnchorOffset = prevAnchor.offset;\n  const textDiff = nextText.length - prevText.length;\n  if (textDiff === 1 && prevAnchorOffset === nextAnchorOffset - 1) {\n    return INSERT_CHARACTER_AFTER_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset + 1) {\n    return DELETE_CHARACTER_BEFORE_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset) {\n    return DELETE_CHARACTER_AFTER_SELECTION;\n  }\n  return OTHER;\n}\nfunction isTextNodeUnchanged(key, prevEditorState, nextEditorState) {\n  const prevNode = prevEditorState._nodeMap.get(key);\n  const nextNode = nextEditorState._nodeMap.get(key);\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  const isDeletingLine = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(prevSelection) && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(nextSelection) && prevSelection.anchor.type === 'element' && prevSelection.focus.type === 'element' && nextSelection.anchor.type === 'text' && nextSelection.focus.type === 'text';\n  if (!isDeletingLine && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevNode) && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextNode) && prevNode.__parent === nextNode.__parent) {\n    // This has the assumption that object key order won't change if the\n    // content did not change, which should normally be safe given\n    // the manner in which nodes and exportJSON are typically implemented.\n    return JSON.stringify(prevEditorState.read(() => prevNode.exportJSON())) === JSON.stringify(nextEditorState.read(() => nextNode.exportJSON()));\n  }\n  return false;\n}\nfunction createMergeActionGetter(editor, delay) {\n  let prevChangeTime = Date.now();\n  let prevChangeType = OTHER;\n  return (prevEditorState, nextEditorState, currentHistoryEntry, dirtyLeaves, dirtyElements, tags) => {\n    const changeTime = Date.now();\n\n    // If applying changes from history stack there's no need\n    // to run history logic again, as history entries already calculated\n    if (tags.has(lexical__WEBPACK_IMPORTED_MODULE_0__.HISTORIC_TAG)) {\n      prevChangeType = OTHER;\n      prevChangeTime = changeTime;\n      return DISCARD_HISTORY_CANDIDATE;\n    }\n    const changeType = getChangeType(prevEditorState, nextEditorState, dirtyLeaves, dirtyElements, editor.isComposing());\n    const mergeAction = (() => {\n      const isSameEditor = currentHistoryEntry === null || currentHistoryEntry.editor === editor;\n      const shouldPushHistory = tags.has(lexical__WEBPACK_IMPORTED_MODULE_0__.HISTORY_PUSH_TAG);\n      const shouldMergeHistory = !shouldPushHistory && isSameEditor && tags.has(lexical__WEBPACK_IMPORTED_MODULE_0__.HISTORY_MERGE_TAG);\n      if (shouldMergeHistory) {\n        return HISTORY_MERGE;\n      }\n      if (prevEditorState === null) {\n        return HISTORY_PUSH;\n      }\n      const selection = nextEditorState._selection;\n      const hasDirtyNodes = dirtyLeaves.size > 0 || dirtyElements.size > 0;\n      if (!hasDirtyNodes) {\n        if (selection !== null) {\n          return HISTORY_MERGE;\n        }\n        return DISCARD_HISTORY_CANDIDATE;\n      }\n      if (shouldPushHistory === false && changeType !== OTHER && changeType === prevChangeType && changeTime < prevChangeTime + delay && isSameEditor) {\n        return HISTORY_MERGE;\n      }\n\n      // A single node might have been marked as dirty, but not have changed\n      // due to some node transform reverting the change.\n      if (dirtyLeaves.size === 1) {\n        const dirtyLeafKey = Array.from(dirtyLeaves)[0];\n        if (isTextNodeUnchanged(dirtyLeafKey, prevEditorState, nextEditorState)) {\n          return HISTORY_MERGE;\n        }\n      }\n      return HISTORY_PUSH;\n    })();\n    prevChangeTime = changeTime;\n    prevChangeType = changeType;\n    return mergeAction;\n  };\n}\nfunction redo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  if (redoStack.length !== 0) {\n    const current = historyState.current;\n    if (current !== null) {\n      undoStack.push(current);\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, true);\n    }\n    const historyStateEntry = redoStack.pop();\n    if (redoStack.length === 0) {\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: lexical__WEBPACK_IMPORTED_MODULE_0__.HISTORIC_TAG\n      });\n    }\n  }\n}\nfunction undo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  const undoStackLength = undoStack.length;\n  if (undoStackLength !== 0) {\n    const current = historyState.current;\n    const historyStateEntry = undoStack.pop();\n    if (current !== null) {\n      redoStack.push(current);\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, true);\n    }\n    if (undoStack.length === 0) {\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: lexical__WEBPACK_IMPORTED_MODULE_0__.HISTORIC_TAG\n      });\n    }\n  }\n}\nfunction clearHistory(historyState) {\n  historyState.undoStack = [];\n  historyState.redoStack = [];\n  historyState.current = null;\n}\n\n/**\n * Registers necessary listeners to manage undo/redo history stack and related editor commands.\n * It returns `unregister` callback that cleans up all listeners and should be called on editor unmount.\n * @param editor - The lexical editor.\n * @param historyState - The history state, containing the current state and the undo/redo stack.\n * @param delay - The time (in milliseconds) the editor should delay generating a new history stack,\n * instead of merging the current changes with the current stack.\n * @returns The listeners cleanup callback function.\n */\nfunction registerHistory(editor, historyState, delay) {\n  const getMergeAction = createMergeActionGetter(editor, delay);\n  const applyChange = ({\n    editorState,\n    prevEditorState,\n    dirtyLeaves,\n    dirtyElements,\n    tags\n  }) => {\n    const current = historyState.current;\n    const redoStack = historyState.redoStack;\n    const undoStack = historyState.undoStack;\n    const currentEditorState = current === null ? null : current.editorState;\n    if (current !== null && editorState === currentEditorState) {\n      return;\n    }\n    const mergeAction = getMergeAction(prevEditorState, editorState, current, dirtyLeaves, dirtyElements, tags);\n    if (mergeAction === HISTORY_PUSH) {\n      if (redoStack.length !== 0) {\n        historyState.redoStack = [];\n        editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, false);\n      }\n      if (current !== null) {\n        undoStack.push({\n          ...current\n        });\n        editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, true);\n      }\n    } else if (mergeAction === DISCARD_HISTORY_CANDIDATE) {\n      return;\n    }\n\n    // Else we merge\n    historyState.current = {\n      editor,\n      editorState\n    };\n  };\n  const unregister = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_1__.mergeRegister)(editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.UNDO_COMMAND, () => {\n    undo(editor, historyState);\n    return true;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.REDO_COMMAND, () => {\n    redo(editor, historyState);\n    return true;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CLEAR_EDITOR_COMMAND, () => {\n    clearHistory(historyState);\n    return false;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CLEAR_HISTORY_COMMAND, () => {\n    clearHistory(historyState);\n    editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, false);\n    editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, false);\n    return true;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerUpdateListener(applyChange));\n  return unregister;\n}\n\n/**\n * Creates an empty history state.\n * @returns - The empty history state, as an object.\n */\nfunction createEmptyHistoryState() {\n  return {\n    current: null,\n    redoStack: [],\n    undoStack: []\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9oaXN0b3J5L0xleGljYWxIaXN0b3J5LmRldi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUrQztBQUNnTjs7QUFFL1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsb0RBQVc7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sMERBQWlCLG9CQUFvQiwwREFBaUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRyxvREFBVztBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLG9EQUFXLG9CQUFvQixvREFBVztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiwwREFBaUIsbUJBQW1CLDBEQUFpQjtBQUM5RSx5QkFBeUIsb0RBQVcsY0FBYyxvREFBVztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixpREFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxxREFBZ0I7QUFDekQsZ0ZBQWdGLHNEQUFpQjtBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIscURBQWdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixxREFBZ0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGlEQUFZO0FBQ3pCLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIscURBQWdCO0FBQzdDO0FBQ0E7QUFDQSw2QkFBNkIscURBQWdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxpREFBWTtBQUN6QixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IscURBQWdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULCtCQUErQixxREFBZ0I7QUFDL0M7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNkRBQWEsd0JBQXdCLGlEQUFZO0FBQ3RFO0FBQ0E7QUFDQSxHQUFHLEVBQUUsNERBQXVCLDBCQUEwQixpREFBWTtBQUNsRTtBQUNBO0FBQ0EsR0FBRyxFQUFFLDREQUF1QiwwQkFBMEIseURBQW9CO0FBQzFFO0FBQ0E7QUFDQSxHQUFHLEVBQUUsNERBQXVCLDBCQUEwQiwwREFBcUI7QUFDM0U7QUFDQSwyQkFBMkIscURBQWdCO0FBQzNDLDJCQUEyQixxREFBZ0I7QUFDM0M7QUFDQSxHQUFHLEVBQUUsNERBQXVCO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFb0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWdudXNvaGxlL2N1cnNvcnByb2plY3RzL3NtcGxhdC9hcHBzLWNtcy1wYXlsb2FkL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9oaXN0b3J5L0xleGljYWxIaXN0b3J5LmRldi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgeyBtZXJnZVJlZ2lzdGVyIH0gZnJvbSAnQGxleGljYWwvdXRpbHMnO1xuaW1wb3J0IHsgVU5ET19DT01NQU5ELCBDT01NQU5EX1BSSU9SSVRZX0VESVRPUiwgUkVET19DT01NQU5ELCBDTEVBUl9FRElUT1JfQ09NTUFORCwgQ0xFQVJfSElTVE9SWV9DT01NQU5ELCBDQU5fUkVET19DT01NQU5ELCBDQU5fVU5ET19DT01NQU5ELCBISVNUT1JJQ19UQUcsIEhJU1RPUllfUFVTSF9UQUcsIEhJU1RPUllfTUVSR0VfVEFHLCAkaXNSYW5nZVNlbGVjdGlvbiwgJGlzVGV4dE5vZGUsICRpc1Jvb3ROb2RlIH0gZnJvbSAnbGV4aWNhbCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuY29uc3QgSElTVE9SWV9NRVJHRSA9IDA7XG5jb25zdCBISVNUT1JZX1BVU0ggPSAxO1xuY29uc3QgRElTQ0FSRF9ISVNUT1JZX0NBTkRJREFURSA9IDI7XG5jb25zdCBPVEhFUiA9IDA7XG5jb25zdCBDT01QT1NJTkdfQ0hBUkFDVEVSID0gMTtcbmNvbnN0IElOU0VSVF9DSEFSQUNURVJfQUZURVJfU0VMRUNUSU9OID0gMjtcbmNvbnN0IERFTEVURV9DSEFSQUNURVJfQkVGT1JFX1NFTEVDVElPTiA9IDM7XG5jb25zdCBERUxFVEVfQ0hBUkFDVEVSX0FGVEVSX1NFTEVDVElPTiA9IDQ7XG5mdW5jdGlvbiBnZXREaXJ0eU5vZGVzKGVkaXRvclN0YXRlLCBkaXJ0eUxlYXZlcywgZGlydHlFbGVtZW50cykge1xuICBjb25zdCBub2RlTWFwID0gZWRpdG9yU3RhdGUuX25vZGVNYXA7XG4gIGNvbnN0IG5vZGVzID0gW107XG4gIGZvciAoY29uc3QgZGlydHlMZWFmS2V5IG9mIGRpcnR5TGVhdmVzKSB7XG4gICAgY29uc3QgZGlydHlMZWFmID0gbm9kZU1hcC5nZXQoZGlydHlMZWFmS2V5KTtcbiAgICBpZiAoZGlydHlMZWFmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vZGVzLnB1c2goZGlydHlMZWFmKTtcbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBbZGlydHlFbGVtZW50S2V5LCBpbnRlbnRpb25hbGx5TWFya2VkQXNEaXJ0eV0gb2YgZGlydHlFbGVtZW50cykge1xuICAgIGlmICghaW50ZW50aW9uYWxseU1hcmtlZEFzRGlydHkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBkaXJ0eUVsZW1lbnQgPSBub2RlTWFwLmdldChkaXJ0eUVsZW1lbnRLZXkpO1xuICAgIGlmIChkaXJ0eUVsZW1lbnQgIT09IHVuZGVmaW5lZCAmJiAhJGlzUm9vdE5vZGUoZGlydHlFbGVtZW50KSkge1xuICAgICAgbm9kZXMucHVzaChkaXJ0eUVsZW1lbnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5mdW5jdGlvbiBnZXRDaGFuZ2VUeXBlKHByZXZFZGl0b3JTdGF0ZSwgbmV4dEVkaXRvclN0YXRlLCBkaXJ0eUxlYXZlc1NldCwgZGlydHlFbGVtZW50c1NldCwgaXNDb21wb3NpbmcpIHtcbiAgaWYgKHByZXZFZGl0b3JTdGF0ZSA9PT0gbnVsbCB8fCBkaXJ0eUxlYXZlc1NldC5zaXplID09PSAwICYmIGRpcnR5RWxlbWVudHNTZXQuc2l6ZSA9PT0gMCAmJiAhaXNDb21wb3NpbmcpIHtcbiAgICByZXR1cm4gT1RIRVI7XG4gIH1cbiAgY29uc3QgbmV4dFNlbGVjdGlvbiA9IG5leHRFZGl0b3JTdGF0ZS5fc2VsZWN0aW9uO1xuICBjb25zdCBwcmV2U2VsZWN0aW9uID0gcHJldkVkaXRvclN0YXRlLl9zZWxlY3Rpb247XG4gIGlmIChpc0NvbXBvc2luZykge1xuICAgIHJldHVybiBDT01QT1NJTkdfQ0hBUkFDVEVSO1xuICB9XG4gIGlmICghJGlzUmFuZ2VTZWxlY3Rpb24obmV4dFNlbGVjdGlvbikgfHwgISRpc1JhbmdlU2VsZWN0aW9uKHByZXZTZWxlY3Rpb24pIHx8ICFwcmV2U2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgfHwgIW5leHRTZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgIHJldHVybiBPVEhFUjtcbiAgfVxuICBjb25zdCBkaXJ0eU5vZGVzID0gZ2V0RGlydHlOb2RlcyhuZXh0RWRpdG9yU3RhdGUsIGRpcnR5TGVhdmVzU2V0LCBkaXJ0eUVsZW1lbnRzU2V0KTtcbiAgaWYgKGRpcnR5Tm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIE9USEVSO1xuICB9XG5cbiAgLy8gQ2F0Y2hpbmcgdGhlIGNhc2Ugd2hlbiBpbnNlcnRpbmcgbmV3IHRleHQgbm9kZSBpbnRvIGFuIGVsZW1lbnQgKGUuZy4gZmlyc3QgY2hhciBpbiBwYXJhZ3JhcGgvbGlzdCksXG4gIC8vIG9yIGFmdGVyIGV4aXN0aW5nIG5vZGUuXG4gIGlmIChkaXJ0eU5vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICBjb25zdCBuZXh0Tm9kZU1hcCA9IG5leHRFZGl0b3JTdGF0ZS5fbm9kZU1hcDtcbiAgICBjb25zdCBuZXh0QW5jaG9yTm9kZSA9IG5leHROb2RlTWFwLmdldChuZXh0U2VsZWN0aW9uLmFuY2hvci5rZXkpO1xuICAgIGNvbnN0IHByZXZBbmNob3JOb2RlID0gbmV4dE5vZGVNYXAuZ2V0KHByZXZTZWxlY3Rpb24uYW5jaG9yLmtleSk7XG4gICAgaWYgKG5leHRBbmNob3JOb2RlICYmIHByZXZBbmNob3JOb2RlICYmICFwcmV2RWRpdG9yU3RhdGUuX25vZGVNYXAuaGFzKG5leHRBbmNob3JOb2RlLl9fa2V5KSAmJiAkaXNUZXh0Tm9kZShuZXh0QW5jaG9yTm9kZSkgJiYgbmV4dEFuY2hvck5vZGUuX190ZXh0Lmxlbmd0aCA9PT0gMSAmJiBuZXh0U2VsZWN0aW9uLmFuY2hvci5vZmZzZXQgPT09IDEpIHtcbiAgICAgIHJldHVybiBJTlNFUlRfQ0hBUkFDVEVSX0FGVEVSX1NFTEVDVElPTjtcbiAgICB9XG4gICAgcmV0dXJuIE9USEVSO1xuICB9XG4gIGNvbnN0IG5leHREaXJ0eU5vZGUgPSBkaXJ0eU5vZGVzWzBdO1xuICBjb25zdCBwcmV2RGlydHlOb2RlID0gcHJldkVkaXRvclN0YXRlLl9ub2RlTWFwLmdldChuZXh0RGlydHlOb2RlLl9fa2V5KTtcbiAgaWYgKCEkaXNUZXh0Tm9kZShwcmV2RGlydHlOb2RlKSB8fCAhJGlzVGV4dE5vZGUobmV4dERpcnR5Tm9kZSkgfHwgcHJldkRpcnR5Tm9kZS5fX21vZGUgIT09IG5leHREaXJ0eU5vZGUuX19tb2RlKSB7XG4gICAgcmV0dXJuIE9USEVSO1xuICB9XG4gIGNvbnN0IHByZXZUZXh0ID0gcHJldkRpcnR5Tm9kZS5fX3RleHQ7XG4gIGNvbnN0IG5leHRUZXh0ID0gbmV4dERpcnR5Tm9kZS5fX3RleHQ7XG4gIGlmIChwcmV2VGV4dCA9PT0gbmV4dFRleHQpIHtcbiAgICByZXR1cm4gT1RIRVI7XG4gIH1cbiAgY29uc3QgbmV4dEFuY2hvciA9IG5leHRTZWxlY3Rpb24uYW5jaG9yO1xuICBjb25zdCBwcmV2QW5jaG9yID0gcHJldlNlbGVjdGlvbi5hbmNob3I7XG4gIGlmIChuZXh0QW5jaG9yLmtleSAhPT0gcHJldkFuY2hvci5rZXkgfHwgbmV4dEFuY2hvci50eXBlICE9PSAndGV4dCcpIHtcbiAgICByZXR1cm4gT1RIRVI7XG4gIH1cbiAgY29uc3QgbmV4dEFuY2hvck9mZnNldCA9IG5leHRBbmNob3Iub2Zmc2V0O1xuICBjb25zdCBwcmV2QW5jaG9yT2Zmc2V0ID0gcHJldkFuY2hvci5vZmZzZXQ7XG4gIGNvbnN0IHRleHREaWZmID0gbmV4dFRleHQubGVuZ3RoIC0gcHJldlRleHQubGVuZ3RoO1xuICBpZiAodGV4dERpZmYgPT09IDEgJiYgcHJldkFuY2hvck9mZnNldCA9PT0gbmV4dEFuY2hvck9mZnNldCAtIDEpIHtcbiAgICByZXR1cm4gSU5TRVJUX0NIQVJBQ1RFUl9BRlRFUl9TRUxFQ1RJT047XG4gIH1cbiAgaWYgKHRleHREaWZmID09PSAtMSAmJiBwcmV2QW5jaG9yT2Zmc2V0ID09PSBuZXh0QW5jaG9yT2Zmc2V0ICsgMSkge1xuICAgIHJldHVybiBERUxFVEVfQ0hBUkFDVEVSX0JFRk9SRV9TRUxFQ1RJT047XG4gIH1cbiAgaWYgKHRleHREaWZmID09PSAtMSAmJiBwcmV2QW5jaG9yT2Zmc2V0ID09PSBuZXh0QW5jaG9yT2Zmc2V0KSB7XG4gICAgcmV0dXJuIERFTEVURV9DSEFSQUNURVJfQUZURVJfU0VMRUNUSU9OO1xuICB9XG4gIHJldHVybiBPVEhFUjtcbn1cbmZ1bmN0aW9uIGlzVGV4dE5vZGVVbmNoYW5nZWQoa2V5LCBwcmV2RWRpdG9yU3RhdGUsIG5leHRFZGl0b3JTdGF0ZSkge1xuICBjb25zdCBwcmV2Tm9kZSA9IHByZXZFZGl0b3JTdGF0ZS5fbm9kZU1hcC5nZXQoa2V5KTtcbiAgY29uc3QgbmV4dE5vZGUgPSBuZXh0RWRpdG9yU3RhdGUuX25vZGVNYXAuZ2V0KGtleSk7XG4gIGNvbnN0IHByZXZTZWxlY3Rpb24gPSBwcmV2RWRpdG9yU3RhdGUuX3NlbGVjdGlvbjtcbiAgY29uc3QgbmV4dFNlbGVjdGlvbiA9IG5leHRFZGl0b3JTdGF0ZS5fc2VsZWN0aW9uO1xuICBjb25zdCBpc0RlbGV0aW5nTGluZSA9ICRpc1JhbmdlU2VsZWN0aW9uKHByZXZTZWxlY3Rpb24pICYmICRpc1JhbmdlU2VsZWN0aW9uKG5leHRTZWxlY3Rpb24pICYmIHByZXZTZWxlY3Rpb24uYW5jaG9yLnR5cGUgPT09ICdlbGVtZW50JyAmJiBwcmV2U2VsZWN0aW9uLmZvY3VzLnR5cGUgPT09ICdlbGVtZW50JyAmJiBuZXh0U2VsZWN0aW9uLmFuY2hvci50eXBlID09PSAndGV4dCcgJiYgbmV4dFNlbGVjdGlvbi5mb2N1cy50eXBlID09PSAndGV4dCc7XG4gIGlmICghaXNEZWxldGluZ0xpbmUgJiYgJGlzVGV4dE5vZGUocHJldk5vZGUpICYmICRpc1RleHROb2RlKG5leHROb2RlKSAmJiBwcmV2Tm9kZS5fX3BhcmVudCA9PT0gbmV4dE5vZGUuX19wYXJlbnQpIHtcbiAgICAvLyBUaGlzIGhhcyB0aGUgYXNzdW1wdGlvbiB0aGF0IG9iamVjdCBrZXkgb3JkZXIgd29uJ3QgY2hhbmdlIGlmIHRoZVxuICAgIC8vIGNvbnRlbnQgZGlkIG5vdCBjaGFuZ2UsIHdoaWNoIHNob3VsZCBub3JtYWxseSBiZSBzYWZlIGdpdmVuXG4gICAgLy8gdGhlIG1hbm5lciBpbiB3aGljaCBub2RlcyBhbmQgZXhwb3J0SlNPTiBhcmUgdHlwaWNhbGx5IGltcGxlbWVudGVkLlxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShwcmV2RWRpdG9yU3RhdGUucmVhZCgoKSA9PiBwcmV2Tm9kZS5leHBvcnRKU09OKCkpKSA9PT0gSlNPTi5zdHJpbmdpZnkobmV4dEVkaXRvclN0YXRlLnJlYWQoKCkgPT4gbmV4dE5vZGUuZXhwb3J0SlNPTigpKSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY3JlYXRlTWVyZ2VBY3Rpb25HZXR0ZXIoZWRpdG9yLCBkZWxheSkge1xuICBsZXQgcHJldkNoYW5nZVRpbWUgPSBEYXRlLm5vdygpO1xuICBsZXQgcHJldkNoYW5nZVR5cGUgPSBPVEhFUjtcbiAgcmV0dXJuIChwcmV2RWRpdG9yU3RhdGUsIG5leHRFZGl0b3JTdGF0ZSwgY3VycmVudEhpc3RvcnlFbnRyeSwgZGlydHlMZWF2ZXMsIGRpcnR5RWxlbWVudHMsIHRhZ3MpID0+IHtcbiAgICBjb25zdCBjaGFuZ2VUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgIC8vIElmIGFwcGx5aW5nIGNoYW5nZXMgZnJvbSBoaXN0b3J5IHN0YWNrIHRoZXJlJ3Mgbm8gbmVlZFxuICAgIC8vIHRvIHJ1biBoaXN0b3J5IGxvZ2ljIGFnYWluLCBhcyBoaXN0b3J5IGVudHJpZXMgYWxyZWFkeSBjYWxjdWxhdGVkXG4gICAgaWYgKHRhZ3MuaGFzKEhJU1RPUklDX1RBRykpIHtcbiAgICAgIHByZXZDaGFuZ2VUeXBlID0gT1RIRVI7XG4gICAgICBwcmV2Q2hhbmdlVGltZSA9IGNoYW5nZVRpbWU7XG4gICAgICByZXR1cm4gRElTQ0FSRF9ISVNUT1JZX0NBTkRJREFURTtcbiAgICB9XG4gICAgY29uc3QgY2hhbmdlVHlwZSA9IGdldENoYW5nZVR5cGUocHJldkVkaXRvclN0YXRlLCBuZXh0RWRpdG9yU3RhdGUsIGRpcnR5TGVhdmVzLCBkaXJ0eUVsZW1lbnRzLCBlZGl0b3IuaXNDb21wb3NpbmcoKSk7XG4gICAgY29uc3QgbWVyZ2VBY3Rpb24gPSAoKCkgPT4ge1xuICAgICAgY29uc3QgaXNTYW1lRWRpdG9yID0gY3VycmVudEhpc3RvcnlFbnRyeSA9PT0gbnVsbCB8fCBjdXJyZW50SGlzdG9yeUVudHJ5LmVkaXRvciA9PT0gZWRpdG9yO1xuICAgICAgY29uc3Qgc2hvdWxkUHVzaEhpc3RvcnkgPSB0YWdzLmhhcyhISVNUT1JZX1BVU0hfVEFHKTtcbiAgICAgIGNvbnN0IHNob3VsZE1lcmdlSGlzdG9yeSA9ICFzaG91bGRQdXNoSGlzdG9yeSAmJiBpc1NhbWVFZGl0b3IgJiYgdGFncy5oYXMoSElTVE9SWV9NRVJHRV9UQUcpO1xuICAgICAgaWYgKHNob3VsZE1lcmdlSGlzdG9yeSkge1xuICAgICAgICByZXR1cm4gSElTVE9SWV9NRVJHRTtcbiAgICAgIH1cbiAgICAgIGlmIChwcmV2RWRpdG9yU3RhdGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIEhJU1RPUllfUFVTSDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IG5leHRFZGl0b3JTdGF0ZS5fc2VsZWN0aW9uO1xuICAgICAgY29uc3QgaGFzRGlydHlOb2RlcyA9IGRpcnR5TGVhdmVzLnNpemUgPiAwIHx8IGRpcnR5RWxlbWVudHMuc2l6ZSA+IDA7XG4gICAgICBpZiAoIWhhc0RpcnR5Tm9kZXMpIHtcbiAgICAgICAgaWYgKHNlbGVjdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBISVNUT1JZX01FUkdFO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBESVNDQVJEX0hJU1RPUllfQ0FORElEQVRFO1xuICAgICAgfVxuICAgICAgaWYgKHNob3VsZFB1c2hIaXN0b3J5ID09PSBmYWxzZSAmJiBjaGFuZ2VUeXBlICE9PSBPVEhFUiAmJiBjaGFuZ2VUeXBlID09PSBwcmV2Q2hhbmdlVHlwZSAmJiBjaGFuZ2VUaW1lIDwgcHJldkNoYW5nZVRpbWUgKyBkZWxheSAmJiBpc1NhbWVFZGl0b3IpIHtcbiAgICAgICAgcmV0dXJuIEhJU1RPUllfTUVSR0U7XG4gICAgICB9XG5cbiAgICAgIC8vIEEgc2luZ2xlIG5vZGUgbWlnaHQgaGF2ZSBiZWVuIG1hcmtlZCBhcyBkaXJ0eSwgYnV0IG5vdCBoYXZlIGNoYW5nZWRcbiAgICAgIC8vIGR1ZSB0byBzb21lIG5vZGUgdHJhbnNmb3JtIHJldmVydGluZyB0aGUgY2hhbmdlLlxuICAgICAgaWYgKGRpcnR5TGVhdmVzLnNpemUgPT09IDEpIHtcbiAgICAgICAgY29uc3QgZGlydHlMZWFmS2V5ID0gQXJyYXkuZnJvbShkaXJ0eUxlYXZlcylbMF07XG4gICAgICAgIGlmIChpc1RleHROb2RlVW5jaGFuZ2VkKGRpcnR5TGVhZktleSwgcHJldkVkaXRvclN0YXRlLCBuZXh0RWRpdG9yU3RhdGUpKSB7XG4gICAgICAgICAgcmV0dXJuIEhJU1RPUllfTUVSR0U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBISVNUT1JZX1BVU0g7XG4gICAgfSkoKTtcbiAgICBwcmV2Q2hhbmdlVGltZSA9IGNoYW5nZVRpbWU7XG4gICAgcHJldkNoYW5nZVR5cGUgPSBjaGFuZ2VUeXBlO1xuICAgIHJldHVybiBtZXJnZUFjdGlvbjtcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlZG8oZWRpdG9yLCBoaXN0b3J5U3RhdGUpIHtcbiAgY29uc3QgcmVkb1N0YWNrID0gaGlzdG9yeVN0YXRlLnJlZG9TdGFjaztcbiAgY29uc3QgdW5kb1N0YWNrID0gaGlzdG9yeVN0YXRlLnVuZG9TdGFjaztcbiAgaWYgKHJlZG9TdGFjay5sZW5ndGggIT09IDApIHtcbiAgICBjb25zdCBjdXJyZW50ID0gaGlzdG9yeVN0YXRlLmN1cnJlbnQ7XG4gICAgaWYgKGN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgIHVuZG9TdGFjay5wdXNoKGN1cnJlbnQpO1xuICAgICAgZWRpdG9yLmRpc3BhdGNoQ29tbWFuZChDQU5fVU5ET19DT01NQU5ELCB0cnVlKTtcbiAgICB9XG4gICAgY29uc3QgaGlzdG9yeVN0YXRlRW50cnkgPSByZWRvU3RhY2sucG9wKCk7XG4gICAgaWYgKHJlZG9TdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgIGVkaXRvci5kaXNwYXRjaENvbW1hbmQoQ0FOX1JFRE9fQ09NTUFORCwgZmFsc2UpO1xuICAgIH1cbiAgICBoaXN0b3J5U3RhdGUuY3VycmVudCA9IGhpc3RvcnlTdGF0ZUVudHJ5IHx8IG51bGw7XG4gICAgaWYgKGhpc3RvcnlTdGF0ZUVudHJ5KSB7XG4gICAgICBoaXN0b3J5U3RhdGVFbnRyeS5lZGl0b3Iuc2V0RWRpdG9yU3RhdGUoaGlzdG9yeVN0YXRlRW50cnkuZWRpdG9yU3RhdGUsIHtcbiAgICAgICAgdGFnOiBISVNUT1JJQ19UQUdcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gdW5kbyhlZGl0b3IsIGhpc3RvcnlTdGF0ZSkge1xuICBjb25zdCByZWRvU3RhY2sgPSBoaXN0b3J5U3RhdGUucmVkb1N0YWNrO1xuICBjb25zdCB1bmRvU3RhY2sgPSBoaXN0b3J5U3RhdGUudW5kb1N0YWNrO1xuICBjb25zdCB1bmRvU3RhY2tMZW5ndGggPSB1bmRvU3RhY2subGVuZ3RoO1xuICBpZiAodW5kb1N0YWNrTGVuZ3RoICE9PSAwKSB7XG4gICAgY29uc3QgY3VycmVudCA9IGhpc3RvcnlTdGF0ZS5jdXJyZW50O1xuICAgIGNvbnN0IGhpc3RvcnlTdGF0ZUVudHJ5ID0gdW5kb1N0YWNrLnBvcCgpO1xuICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICByZWRvU3RhY2sucHVzaChjdXJyZW50KTtcbiAgICAgIGVkaXRvci5kaXNwYXRjaENvbW1hbmQoQ0FOX1JFRE9fQ09NTUFORCwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmICh1bmRvU3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgICBlZGl0b3IuZGlzcGF0Y2hDb21tYW5kKENBTl9VTkRPX0NPTU1BTkQsIGZhbHNlKTtcbiAgICB9XG4gICAgaGlzdG9yeVN0YXRlLmN1cnJlbnQgPSBoaXN0b3J5U3RhdGVFbnRyeSB8fCBudWxsO1xuICAgIGlmIChoaXN0b3J5U3RhdGVFbnRyeSkge1xuICAgICAgaGlzdG9yeVN0YXRlRW50cnkuZWRpdG9yLnNldEVkaXRvclN0YXRlKGhpc3RvcnlTdGF0ZUVudHJ5LmVkaXRvclN0YXRlLCB7XG4gICAgICAgIHRhZzogSElTVE9SSUNfVEFHXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNsZWFySGlzdG9yeShoaXN0b3J5U3RhdGUpIHtcbiAgaGlzdG9yeVN0YXRlLnVuZG9TdGFjayA9IFtdO1xuICBoaXN0b3J5U3RhdGUucmVkb1N0YWNrID0gW107XG4gIGhpc3RvcnlTdGF0ZS5jdXJyZW50ID0gbnVsbDtcbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgbmVjZXNzYXJ5IGxpc3RlbmVycyB0byBtYW5hZ2UgdW5kby9yZWRvIGhpc3Rvcnkgc3RhY2sgYW5kIHJlbGF0ZWQgZWRpdG9yIGNvbW1hbmRzLlxuICogSXQgcmV0dXJucyBgdW5yZWdpc3RlcmAgY2FsbGJhY2sgdGhhdCBjbGVhbnMgdXAgYWxsIGxpc3RlbmVycyBhbmQgc2hvdWxkIGJlIGNhbGxlZCBvbiBlZGl0b3IgdW5tb3VudC5cbiAqIEBwYXJhbSBlZGl0b3IgLSBUaGUgbGV4aWNhbCBlZGl0b3IuXG4gKiBAcGFyYW0gaGlzdG9yeVN0YXRlIC0gVGhlIGhpc3Rvcnkgc3RhdGUsIGNvbnRhaW5pbmcgdGhlIGN1cnJlbnQgc3RhdGUgYW5kIHRoZSB1bmRvL3JlZG8gc3RhY2suXG4gKiBAcGFyYW0gZGVsYXkgLSBUaGUgdGltZSAoaW4gbWlsbGlzZWNvbmRzKSB0aGUgZWRpdG9yIHNob3VsZCBkZWxheSBnZW5lcmF0aW5nIGEgbmV3IGhpc3Rvcnkgc3RhY2ssXG4gKiBpbnN0ZWFkIG9mIG1lcmdpbmcgdGhlIGN1cnJlbnQgY2hhbmdlcyB3aXRoIHRoZSBjdXJyZW50IHN0YWNrLlxuICogQHJldHVybnMgVGhlIGxpc3RlbmVycyBjbGVhbnVwIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiByZWdpc3Rlckhpc3RvcnkoZWRpdG9yLCBoaXN0b3J5U3RhdGUsIGRlbGF5KSB7XG4gIGNvbnN0IGdldE1lcmdlQWN0aW9uID0gY3JlYXRlTWVyZ2VBY3Rpb25HZXR0ZXIoZWRpdG9yLCBkZWxheSk7XG4gIGNvbnN0IGFwcGx5Q2hhbmdlID0gKHtcbiAgICBlZGl0b3JTdGF0ZSxcbiAgICBwcmV2RWRpdG9yU3RhdGUsXG4gICAgZGlydHlMZWF2ZXMsXG4gICAgZGlydHlFbGVtZW50cyxcbiAgICB0YWdzXG4gIH0pID0+IHtcbiAgICBjb25zdCBjdXJyZW50ID0gaGlzdG9yeVN0YXRlLmN1cnJlbnQ7XG4gICAgY29uc3QgcmVkb1N0YWNrID0gaGlzdG9yeVN0YXRlLnJlZG9TdGFjaztcbiAgICBjb25zdCB1bmRvU3RhY2sgPSBoaXN0b3J5U3RhdGUudW5kb1N0YWNrO1xuICAgIGNvbnN0IGN1cnJlbnRFZGl0b3JTdGF0ZSA9IGN1cnJlbnQgPT09IG51bGwgPyBudWxsIDogY3VycmVudC5lZGl0b3JTdGF0ZTtcbiAgICBpZiAoY3VycmVudCAhPT0gbnVsbCAmJiBlZGl0b3JTdGF0ZSA9PT0gY3VycmVudEVkaXRvclN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1lcmdlQWN0aW9uID0gZ2V0TWVyZ2VBY3Rpb24ocHJldkVkaXRvclN0YXRlLCBlZGl0b3JTdGF0ZSwgY3VycmVudCwgZGlydHlMZWF2ZXMsIGRpcnR5RWxlbWVudHMsIHRhZ3MpO1xuICAgIGlmIChtZXJnZUFjdGlvbiA9PT0gSElTVE9SWV9QVVNIKSB7XG4gICAgICBpZiAocmVkb1N0YWNrLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBoaXN0b3J5U3RhdGUucmVkb1N0YWNrID0gW107XG4gICAgICAgIGVkaXRvci5kaXNwYXRjaENvbW1hbmQoQ0FOX1JFRE9fQ09NTUFORCwgZmFsc2UpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgdW5kb1N0YWNrLnB1c2goe1xuICAgICAgICAgIC4uLmN1cnJlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIGVkaXRvci5kaXNwYXRjaENvbW1hbmQoQ0FOX1VORE9fQ09NTUFORCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChtZXJnZUFjdGlvbiA9PT0gRElTQ0FSRF9ISVNUT1JZX0NBTkRJREFURSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEVsc2Ugd2UgbWVyZ2VcbiAgICBoaXN0b3J5U3RhdGUuY3VycmVudCA9IHtcbiAgICAgIGVkaXRvcixcbiAgICAgIGVkaXRvclN0YXRlXG4gICAgfTtcbiAgfTtcbiAgY29uc3QgdW5yZWdpc3RlciA9IG1lcmdlUmVnaXN0ZXIoZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChVTkRPX0NPTU1BTkQsICgpID0+IHtcbiAgICB1bmRvKGVkaXRvciwgaGlzdG9yeVN0YXRlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSwgQ09NTUFORF9QUklPUklUWV9FRElUT1IpLCBlZGl0b3IucmVnaXN0ZXJDb21tYW5kKFJFRE9fQ09NTUFORCwgKCkgPT4ge1xuICAgIHJlZG8oZWRpdG9yLCBoaXN0b3J5U3RhdGUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9LCBDT01NQU5EX1BSSU9SSVRZX0VESVRPUiksIGVkaXRvci5yZWdpc3RlckNvbW1hbmQoQ0xFQVJfRURJVE9SX0NPTU1BTkQsICgpID0+IHtcbiAgICBjbGVhckhpc3RvcnkoaGlzdG9yeVN0YXRlKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sIENPTU1BTkRfUFJJT1JJVFlfRURJVE9SKSwgZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChDTEVBUl9ISVNUT1JZX0NPTU1BTkQsICgpID0+IHtcbiAgICBjbGVhckhpc3RvcnkoaGlzdG9yeVN0YXRlKTtcbiAgICBlZGl0b3IuZGlzcGF0Y2hDb21tYW5kKENBTl9SRURPX0NPTU1BTkQsIGZhbHNlKTtcbiAgICBlZGl0b3IuZGlzcGF0Y2hDb21tYW5kKENBTl9VTkRPX0NPTU1BTkQsIGZhbHNlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSwgQ09NTUFORF9QUklPUklUWV9FRElUT1IpLCBlZGl0b3IucmVnaXN0ZXJVcGRhdGVMaXN0ZW5lcihhcHBseUNoYW5nZSkpO1xuICByZXR1cm4gdW5yZWdpc3Rlcjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGVtcHR5IGhpc3Rvcnkgc3RhdGUuXG4gKiBAcmV0dXJucyAtIFRoZSBlbXB0eSBoaXN0b3J5IHN0YXRlLCBhcyBhbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVtcHR5SGlzdG9yeVN0YXRlKCkge1xuICByZXR1cm4ge1xuICAgIGN1cnJlbnQ6IG51bGwsXG4gICAgcmVkb1N0YWNrOiBbXSxcbiAgICB1bmRvU3RhY2s6IFtdXG4gIH07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUVtcHR5SGlzdG9yeVN0YXRlLCByZWdpc3Rlckhpc3RvcnkgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/history/LexicalHistory.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalComposer.dev.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalComposer.dev.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LexicalComposer: () => (/* binding */ LexicalComposer)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HISTORY_MERGE_OPTIONS = {\n  tag: lexical__WEBPACK_IMPORTED_MODULE_2__.HISTORY_MERGE_TAG\n};\nfunction LexicalComposer({\n  initialConfig,\n  children\n}) {\n  const composerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const {\n      theme,\n      namespace,\n      nodes,\n      onError,\n      editorState: initialEditorState,\n      html\n    } = initialConfig;\n    const context = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_3__.createLexicalComposerContext)(null, theme);\n    const editor = (0,lexical__WEBPACK_IMPORTED_MODULE_2__.createEditor)({\n      editable: initialConfig.editable,\n      html,\n      namespace,\n      nodes,\n      onError: error => onError(error, editor),\n      theme\n    });\n    initializeEditor(editor, initialEditorState);\n    return [editor, context];\n  },\n  // We only do this for init\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  useLayoutEffectImpl(() => {\n    const isEditable = initialConfig.editable;\n    const [editor] = composerContext;\n    editor.setEditable(isEditable !== undefined ? isEditable : true);\n\n    // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_3__.LexicalComposerContext.Provider, {\n    value: composerContext,\n    children: children\n  });\n}\nfunction initializeEditor(editor, initialEditorState) {\n  if (initialEditorState === null) {\n    return;\n  } else if (initialEditorState === undefined) {\n    editor.update(() => {\n      const root = (0,lexical__WEBPACK_IMPORTED_MODULE_2__.$getRoot)();\n      if (root.isEmpty()) {\n        const paragraph = (0,lexical__WEBPACK_IMPORTED_MODULE_2__.$createParagraphNode)();\n        root.append(paragraph);\n        const activeElement = CAN_USE_DOM ? document.activeElement : null;\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_2__.$getSelection)() !== null || activeElement !== null && activeElement === editor.getRootElement()) {\n          paragraph.select();\n        }\n      }\n    }, HISTORY_MERGE_OPTIONS);\n  } else if (initialEditorState !== null) {\n    switch (typeof initialEditorState) {\n      case 'string':\n        {\n          const parsedEditorState = editor.parseEditorState(initialEditorState);\n          editor.setEditorState(parsedEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'object':\n        {\n          editor.setEditorState(initialEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'function':\n        {\n          editor.update(() => {\n            const root = (0,lexical__WEBPACK_IMPORTED_MODULE_2__.$getRoot)();\n            if (root.isEmpty()) {\n              initialEditorState(editor);\n            }\n          }, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n    }\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXIuZGV2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU2RztBQUNKO0FBQzdDO0FBQ3BCOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGtEQUFlLEdBQUcsNENBQVM7O0FBRXJFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTyxzREFBaUI7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsMEJBQTBCLDhDQUFPO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLG9CQUFvQixtR0FBNEI7QUFDaEQsbUJBQW1CLHFEQUFZO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsc0JBQXNCLHNEQUFHLENBQUMseUZBQXNCO0FBQ2hEO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxtQkFBbUIsaURBQVE7QUFDM0I7QUFDQSwwQkFBMEIsNkRBQW9CO0FBQzlDO0FBQ0E7QUFDQSxZQUFZLHNEQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlEQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUyQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hZ251c29obGUvY3Vyc29ycHJvamVjdHMvc21wbGF0L2FwcHMtY21zLXBheWxvYWQvbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3Nlci5kZXYubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlTGV4aWNhbENvbXBvc2VyQ29udGV4dCwgTGV4aWNhbENvbXBvc2VyQ29udGV4dCB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlRWRpdG9yLCAkZ2V0Um9vdCwgJGNyZWF0ZVBhcmFncmFwaE5vZGUsICRnZXRTZWxlY3Rpb24sIEhJU1RPUllfTUVSR0VfVEFHIH0gZnJvbSAnbGV4aWNhbCc7XG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QsIHVzZUVmZmVjdCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGpzeCB9IGZyb20gJ3JlYWN0L2pzeC1ydW50aW1lJztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5jb25zdCBDQU5fVVNFX0RPTSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuXG4vLyBUaGlzIHdvcmthcm91bmQgaXMgbm8gbG9uZ2VyIG5lY2Vzc2FyeSBpbiBSZWFjdCAxOSxcbi8vIGJ1dCB3ZSBjdXJyZW50bHkgc3VwcG9ydCBSZWFjdCA+PTE3Lnhcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzI2Mzk1XG5jb25zdCB1c2VMYXlvdXRFZmZlY3RJbXBsID0gQ0FOX1VTRV9ET00gPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuY29uc3QgSElTVE9SWV9NRVJHRV9PUFRJT05TID0ge1xuICB0YWc6IEhJU1RPUllfTUVSR0VfVEFHXG59O1xuZnVuY3Rpb24gTGV4aWNhbENvbXBvc2VyKHtcbiAgaW5pdGlhbENvbmZpZyxcbiAgY2hpbGRyZW5cbn0pIHtcbiAgY29uc3QgY29tcG9zZXJDb250ZXh0ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWUsXG4gICAgICBuYW1lc3BhY2UsXG4gICAgICBub2RlcyxcbiAgICAgIG9uRXJyb3IsXG4gICAgICBlZGl0b3JTdGF0ZTogaW5pdGlhbEVkaXRvclN0YXRlLFxuICAgICAgaHRtbFxuICAgIH0gPSBpbml0aWFsQ29uZmlnO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjcmVhdGVMZXhpY2FsQ29tcG9zZXJDb250ZXh0KG51bGwsIHRoZW1lKTtcbiAgICBjb25zdCBlZGl0b3IgPSBjcmVhdGVFZGl0b3Ioe1xuICAgICAgZWRpdGFibGU6IGluaXRpYWxDb25maWcuZWRpdGFibGUsXG4gICAgICBodG1sLFxuICAgICAgbmFtZXNwYWNlLFxuICAgICAgbm9kZXMsXG4gICAgICBvbkVycm9yOiBlcnJvciA9PiBvbkVycm9yKGVycm9yLCBlZGl0b3IpLFxuICAgICAgdGhlbWVcbiAgICB9KTtcbiAgICBpbml0aWFsaXplRWRpdG9yKGVkaXRvciwgaW5pdGlhbEVkaXRvclN0YXRlKTtcbiAgICByZXR1cm4gW2VkaXRvciwgY29udGV4dF07XG4gIH0sXG4gIC8vIFdlIG9ubHkgZG8gdGhpcyBmb3IgaW5pdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIFtdKTtcbiAgdXNlTGF5b3V0RWZmZWN0SW1wbCgoKSA9PiB7XG4gICAgY29uc3QgaXNFZGl0YWJsZSA9IGluaXRpYWxDb25maWcuZWRpdGFibGU7XG4gICAgY29uc3QgW2VkaXRvcl0gPSBjb21wb3NlckNvbnRleHQ7XG4gICAgZWRpdG9yLnNldEVkaXRhYmxlKGlzRWRpdGFibGUgIT09IHVuZGVmaW5lZCA/IGlzRWRpdGFibGUgOiB0cnVlKTtcblxuICAgIC8vIFdlIG9ubHkgZG8gdGhpcyBmb3IgaW5pdFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL2pzeChMZXhpY2FsQ29tcG9zZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbXBvc2VyQ29udGV4dCxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSk7XG59XG5mdW5jdGlvbiBpbml0aWFsaXplRWRpdG9yKGVkaXRvciwgaW5pdGlhbEVkaXRvclN0YXRlKSB7XG4gIGlmIChpbml0aWFsRWRpdG9yU3RhdGUgPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoaW5pdGlhbEVkaXRvclN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICBlZGl0b3IudXBkYXRlKCgpID0+IHtcbiAgICAgIGNvbnN0IHJvb3QgPSAkZ2V0Um9vdCgpO1xuICAgICAgaWYgKHJvb3QuaXNFbXB0eSgpKSB7XG4gICAgICAgIGNvbnN0IHBhcmFncmFwaCA9ICRjcmVhdGVQYXJhZ3JhcGhOb2RlKCk7XG4gICAgICAgIHJvb3QuYXBwZW5kKHBhcmFncmFwaCk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBDQU5fVVNFX0RPTSA/IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgOiBudWxsO1xuICAgICAgICBpZiAoJGdldFNlbGVjdGlvbigpICE9PSBudWxsIHx8IGFjdGl2ZUVsZW1lbnQgIT09IG51bGwgJiYgYWN0aXZlRWxlbWVudCA9PT0gZWRpdG9yLmdldFJvb3RFbGVtZW50KCkpIHtcbiAgICAgICAgICBwYXJhZ3JhcGguc2VsZWN0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBISVNUT1JZX01FUkdFX09QVElPTlMpO1xuICB9IGVsc2UgaWYgKGluaXRpYWxFZGl0b3JTdGF0ZSAhPT0gbnVsbCkge1xuICAgIHN3aXRjaCAodHlwZW9mIGluaXRpYWxFZGl0b3JTdGF0ZSkge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IHBhcnNlZEVkaXRvclN0YXRlID0gZWRpdG9yLnBhcnNlRWRpdG9yU3RhdGUoaW5pdGlhbEVkaXRvclN0YXRlKTtcbiAgICAgICAgICBlZGl0b3Iuc2V0RWRpdG9yU3RhdGUocGFyc2VkRWRpdG9yU3RhdGUsIEhJU1RPUllfTUVSR0VfT1BUSU9OUyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHtcbiAgICAgICAgICBlZGl0b3Iuc2V0RWRpdG9yU3RhdGUoaW5pdGlhbEVkaXRvclN0YXRlLCBISVNUT1JZX01FUkdFX09QVElPTlMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgIHtcbiAgICAgICAgICBlZGl0b3IudXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJvb3QgPSAkZ2V0Um9vdCgpO1xuICAgICAgICAgICAgaWYgKHJvb3QuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgIGluaXRpYWxFZGl0b3JTdGF0ZShlZGl0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIEhJU1RPUllfTUVSR0VfT1BUSU9OUyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgTGV4aWNhbENvbXBvc2VyIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalComposer.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalContentEditable.dev.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalContentEditable.dev.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentEditable: () => (/* binding */ ContentEditable),\n/* harmony export */   ContentEditableElement: () => (/* binding */ ContentEditableElement)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var _lexical_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/text */ \"(app-pages-browser)/./node_modules/@lexical/text/LexicalText.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// Source: https://github.com/gregberge/react-merge-refs/blob/main/src/index.tsx\n\nfunction mergeRefs(...refs) {\n  return value => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction ContentEditableElementImpl({\n  editor,\n  ariaActiveDescendant,\n  ariaAutoComplete,\n  ariaControls,\n  ariaDescribedBy,\n  ariaErrorMessage,\n  ariaExpanded,\n  ariaInvalid,\n  ariaLabel,\n  ariaLabelledBy,\n  ariaMultiline,\n  ariaOwns,\n  ariaRequired,\n  autoCapitalize,\n  className,\n  id,\n  role = 'textbox',\n  spellCheck = true,\n  style,\n  tabIndex,\n  'data-testid': testid,\n  ...rest\n}, ref) {\n  const [isEditable, setEditable] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(editor.isEditable());\n  const handleRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(rootElement => {\n    // defaultView is required for a root element.\n    // In multi-window setups, the defaultView may not exist at certain points.\n    if (rootElement && rootElement.ownerDocument && rootElement.ownerDocument.defaultView) {\n      editor.setRootElement(rootElement);\n    } else {\n      editor.setRootElement(null);\n    }\n  }, [editor]);\n  const mergedRefs = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => mergeRefs(ref, handleRef), [handleRef, ref]);\n  useLayoutEffectImpl(() => {\n    setEditable(editor.isEditable());\n    return editor.registerEditableListener(currentIsEditable => {\n      setEditable(currentIsEditable);\n    });\n  }, [editor]);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n    \"aria-activedescendant\": isEditable ? ariaActiveDescendant : undefined,\n    \"aria-autocomplete\": isEditable ? ariaAutoComplete : 'none',\n    \"aria-controls\": isEditable ? ariaControls : undefined,\n    \"aria-describedby\": ariaDescribedBy\n    // for compat, only override aria-errormessage if ariaErrorMessage is defined\n    ,\n    ...(ariaErrorMessage != null ? {\n      'aria-errormessage': ariaErrorMessage\n    } : {}),\n    \"aria-expanded\": isEditable && role === 'combobox' ? !!ariaExpanded : undefined\n    // for compat, only override aria-invalid if ariaInvalid is defined\n    ,\n    ...(ariaInvalid != null ? {\n      'aria-invalid': ariaInvalid\n    } : {}),\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-multiline\": ariaMultiline,\n    \"aria-owns\": isEditable ? ariaOwns : undefined,\n    \"aria-readonly\": isEditable ? undefined : true,\n    \"aria-required\": ariaRequired,\n    autoCapitalize: autoCapitalize,\n    className: className,\n    contentEditable: isEditable,\n    \"data-testid\": testid,\n    id: id,\n    ref: mergedRefs,\n    role: role,\n    spellCheck: spellCheck,\n    style: style,\n    tabIndex: tabIndex,\n    ...rest\n  });\n}\nconst ContentEditableElement = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(ContentEditableElementImpl);\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction canShowPlaceholderFromCurrentEditorState(editor) {\n  const currentCanShowPlaceholder = editor.getEditorState().read((0,_lexical_text__WEBPACK_IMPORTED_MODULE_2__.$canShowPlaceholderCurry)(editor.isComposing()));\n  return currentCanShowPlaceholder;\n}\nfunction useCanShowPlaceholder(editor) {\n  const [canShowPlaceholder, setCanShowPlaceholder] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => canShowPlaceholderFromCurrentEditorState(editor));\n  useLayoutEffectImpl(() => {\n    function resetCanShowPlaceholder() {\n      const currentCanShowPlaceholder = canShowPlaceholderFromCurrentEditorState(editor);\n      setCanShowPlaceholder(currentCanShowPlaceholder);\n    }\n    resetCanShowPlaceholder();\n    return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_3__.mergeRegister)(editor.registerUpdateListener(() => {\n      resetCanShowPlaceholder();\n    }), editor.registerEditableListener(() => {\n      resetCanShowPlaceholder();\n    }));\n  }, [editor]);\n  return canShowPlaceholder;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n/**\n * @deprecated This type has been renamed to `ContentEditableProps` to provide a clearer and more descriptive name.\n * For backward compatibility, this type is still exported as `Props`, but it is recommended to migrate to using `ContentEditableProps` instead.\n *\n * @note This alias is maintained for compatibility purposes but may be removed in future versions.\n * Please update your codebase to use `ContentEditableProps` to ensure long-term maintainability.\n */\n\nconst ContentEditable = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(ContentEditableImpl);\nfunction ContentEditableImpl(props, ref) {\n  const {\n    placeholder,\n    ...rest\n  } = props;\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)();\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ContentEditableElement, {\n      editor: editor,\n      ...rest,\n      ref: ref\n    }), placeholder != null && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Placeholder, {\n      editor: editor,\n      content: placeholder\n    })]\n  });\n}\nfunction Placeholder({\n  content,\n  editor\n}) {\n  const showPlaceholder = useCanShowPlaceholder(editor);\n  const [isEditable, setEditable] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(editor.isEditable());\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n    setEditable(editor.isEditable());\n    return editor.registerEditableListener(currentIsEditable => {\n      setEditable(currentIsEditable);\n    });\n  }, [editor]);\n  if (!showPlaceholder) {\n    return null;\n  }\n  let placeholder = null;\n  if (typeof content === 'function') {\n    placeholder = content(isEditable);\n  } else if (content !== null) {\n    placeholder = content;\n  }\n  if (placeholder === null) {\n    return null;\n  }\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n    \"aria-hidden\": true,\n    children: placeholder\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalContentEditable.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LexicalErrorBoundary: () => (/* binding */ LexicalErrorBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\n\nvar changedArray = function changedArray(a, b) {\n  if (a === void 0) {\n    a = [];\n  }\n\n  if (b === void 0) {\n    b = [];\n  }\n\n  return a.length !== b.length || a.some(function (item, index) {\n    return !Object.is(item, b[index]);\n  });\n};\n\nvar initialState = {\n  error: null\n};\n\nvar ErrorBoundary = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ErrorBoundary, _React$Component);\n\n  function ErrorBoundary() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n    _this.state = initialState;\n\n    _this.resetErrorBoundary = function () {\n      var _this$props;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this.props.onReset == null ? void 0 : (_this$props = _this.props).onReset.apply(_this$props, args);\n\n      _this.reset();\n    };\n\n    return _this;\n  }\n\n  ErrorBoundary.getDerivedStateFromError = function getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  };\n\n  var _proto = ErrorBoundary.prototype;\n\n  _proto.reset = function reset() {\n    this.setState(initialState);\n  };\n\n  _proto.componentDidCatch = function componentDidCatch(error, info) {\n    var _this$props$onError, _this$props2;\n\n    (_this$props$onError = (_this$props2 = this.props).onError) == null ? void 0 : _this$props$onError.call(_this$props2, error, info);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var error = this.state.error;\n    var resetKeys = this.props.resetKeys; // There's an edge case where if the thing that triggered the error\n    // happens to *also* be in the resetKeys array, we'd end up resetting\n    // the error boundary immediately. This would likely trigger a second\n    // error to be thrown.\n    // So we make sure that we don't check the resetKeys on the first call\n    // of cDU after the error is set\n\n    if (error !== null && prevState.error !== null && changedArray(prevProps.resetKeys, resetKeys)) {\n      var _this$props$onResetKe, _this$props3;\n\n      (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null ? void 0 : _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);\n      this.reset();\n    }\n  };\n\n  _proto.render = function render() {\n    var error = this.state.error;\n    var _this$props4 = this.props,\n        fallbackRender = _this$props4.fallbackRender,\n        FallbackComponent = _this$props4.FallbackComponent,\n        fallback = _this$props4.fallback;\n\n    if (error !== null) {\n      var _props = {\n        error: error,\n        resetErrorBoundary: this.resetErrorBoundary\n      };\n\n      if ( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(fallback)) {\n        return fallback;\n      } else if (typeof fallbackRender === 'function') {\n        return fallbackRender(_props);\n      } else if (FallbackComponent) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FallbackComponent, _props);\n      } else {\n        throw new Error('react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop');\n      }\n    }\n\n    return this.props.children;\n  };\n\n  return ErrorBoundary;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction LexicalErrorBoundary({\n  children,\n  onError\n}) {\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ErrorBoundary, {\n    fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      style: {\n        border: '1px solid #f00',\n        color: '#f00',\n        padding: '8px'\n      },\n      children: \"An error was thrown.\"\n    }),\n    onError: onError,\n    children: children\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsRXJyb3JCb3VuZGFyeS5kZXYubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUrQjtBQUNTOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEseUVBQXlFLGFBQWE7QUFDdEY7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsNkVBQTZFLGVBQWU7QUFDNUY7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QixpREFBb0I7QUFDNUM7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1IsNEJBQTRCLGdEQUFtQjtBQUMvQyxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDLENBQUMsNENBQWU7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxzQkFBc0Isc0RBQUc7QUFDekIsMkJBQTJCLHNEQUFHO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRWdDIiwic291cmNlcyI6WyIvVXNlcnMvbWFnbnVzb2hsZS9jdXJzb3Jwcm9qZWN0cy9zbXBsYXQvYXBwcy1jbXMtcGF5bG9hZC9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEVycm9yQm91bmRhcnkuZGV2Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGpzeCB9IGZyb20gJ3JlYWN0L2pzeC1ydW50aW1lJztcblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbnZhciBjaGFuZ2VkQXJyYXkgPSBmdW5jdGlvbiBjaGFuZ2VkQXJyYXkoYSwgYikge1xuICBpZiAoYSA9PT0gdm9pZCAwKSB7XG4gICAgYSA9IFtdO1xuICB9XG5cbiAgaWYgKGIgPT09IHZvaWQgMCkge1xuICAgIGIgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBhLmxlbmd0aCAhPT0gYi5sZW5ndGggfHwgYS5zb21lKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgIHJldHVybiAhT2JqZWN0LmlzKGl0ZW0sIGJbaW5kZXhdKTtcbiAgfSk7XG59O1xuXG52YXIgaW5pdGlhbFN0YXRlID0ge1xuICBlcnJvcjogbnVsbFxufTtcblxudmFyIEVycm9yQm91bmRhcnkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRXJyb3JCb3VuZGFyeSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRXJyb3JCb3VuZGFyeSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgX2FyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBfYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KF9hcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcblxuICAgIF90aGlzLnJlc2V0RXJyb3JCb3VuZGFyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcztcblxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMucHJvcHMub25SZXNldCA9PSBudWxsID8gdm9pZCAwIDogKF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMpLm9uUmVzZXQuYXBwbHkoX3RoaXMkcHJvcHMsIGFyZ3MpO1xuXG4gICAgICBfdGhpcy5yZXNldCgpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBFcnJvckJvdW5kYXJ5LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogZXJyb3JcbiAgICB9O1xuICB9O1xuXG4gIHZhciBfcHJvdG8gPSBFcnJvckJvdW5kYXJ5LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKGluaXRpYWxTdGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZENhdGNoID0gZnVuY3Rpb24gY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGluZm8pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMkb25FcnJvciwgX3RoaXMkcHJvcHMyO1xuXG4gICAgKF90aGlzJHByb3BzJG9uRXJyb3IgPSAoX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcykub25FcnJvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHByb3BzJG9uRXJyb3IuY2FsbChfdGhpcyRwcm9wczIsIGVycm9yLCBpbmZvKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgdmFyIGVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICB2YXIgcmVzZXRLZXlzID0gdGhpcy5wcm9wcy5yZXNldEtleXM7IC8vIFRoZXJlJ3MgYW4gZWRnZSBjYXNlIHdoZXJlIGlmIHRoZSB0aGluZyB0aGF0IHRyaWdnZXJlZCB0aGUgZXJyb3JcbiAgICAvLyBoYXBwZW5zIHRvICphbHNvKiBiZSBpbiB0aGUgcmVzZXRLZXlzIGFycmF5LCB3ZSdkIGVuZCB1cCByZXNldHRpbmdcbiAgICAvLyB0aGUgZXJyb3IgYm91bmRhcnkgaW1tZWRpYXRlbHkuIFRoaXMgd291bGQgbGlrZWx5IHRyaWdnZXIgYSBzZWNvbmRcbiAgICAvLyBlcnJvciB0byBiZSB0aHJvd24uXG4gICAgLy8gU28gd2UgbWFrZSBzdXJlIHRoYXQgd2UgZG9uJ3QgY2hlY2sgdGhlIHJlc2V0S2V5cyBvbiB0aGUgZmlyc3QgY2FsbFxuICAgIC8vIG9mIGNEVSBhZnRlciB0aGUgZXJyb3IgaXMgc2V0XG5cbiAgICBpZiAoZXJyb3IgIT09IG51bGwgJiYgcHJldlN0YXRlLmVycm9yICE9PSBudWxsICYmIGNoYW5nZWRBcnJheShwcmV2UHJvcHMucmVzZXRLZXlzLCByZXNldEtleXMpKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMkb25SZXNldEtlLCBfdGhpcyRwcm9wczM7XG5cbiAgICAgIChfdGhpcyRwcm9wcyRvblJlc2V0S2UgPSAoX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcykub25SZXNldEtleXNDaGFuZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRwcm9wcyRvblJlc2V0S2UuY2FsbChfdGhpcyRwcm9wczMsIHByZXZQcm9wcy5yZXNldEtleXMsIHJlc2V0S2V5cyk7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZmFsbGJhY2tSZW5kZXIgPSBfdGhpcyRwcm9wczQuZmFsbGJhY2tSZW5kZXIsXG4gICAgICAgIEZhbGxiYWNrQ29tcG9uZW50ID0gX3RoaXMkcHJvcHM0LkZhbGxiYWNrQ29tcG9uZW50LFxuICAgICAgICBmYWxsYmFjayA9IF90aGlzJHByb3BzNC5mYWxsYmFjaztcblxuICAgIGlmIChlcnJvciAhPT0gbnVsbCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHtcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICByZXNldEVycm9yQm91bmRhcnk6IHRoaXMucmVzZXRFcnJvckJvdW5kYXJ5XG4gICAgICB9O1xuXG4gICAgICBpZiAoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChmYWxsYmFjaykpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZmFsbGJhY2tSZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrUmVuZGVyKF9wcm9wcyk7XG4gICAgICB9IGVsc2UgaWYgKEZhbGxiYWNrQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGYWxsYmFja0NvbXBvbmVudCwgX3Byb3BzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmVhY3QtZXJyb3ItYm91bmRhcnkgcmVxdWlyZXMgZWl0aGVyIGEgZmFsbGJhY2ssIGZhbGxiYWNrUmVuZGVyLCBvciBGYWxsYmFja0NvbXBvbmVudCBwcm9wJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH07XG5cbiAgcmV0dXJuIEVycm9yQm91bmRhcnk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gTGV4aWNhbEVycm9yQm91bmRhcnkoe1xuICBjaGlsZHJlbixcbiAgb25FcnJvclxufSkge1xuICByZXR1cm4gLyojX19QVVJFX18qL2pzeChFcnJvckJvdW5kYXJ5LCB7XG4gICAgZmFsbGJhY2s6IC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgc3R5bGU6IHtcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNmMDAnLFxuICAgICAgICBjb2xvcjogJyNmMDAnLFxuICAgICAgICBwYWRkaW5nOiAnOHB4J1xuICAgICAgfSxcbiAgICAgIGNoaWxkcmVuOiBcIkFuIGVycm9yIHdhcyB0aHJvd24uXCJcbiAgICB9KSxcbiAgICBvbkVycm9yOiBvbkVycm9yLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KTtcbn1cblxuZXhwb3J0IHsgTGV4aWNhbEVycm9yQm91bmRhcnkgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HistoryPlugin: () => (/* binding */ HistoryPlugin),\n/* harmony export */   createEmptyHistoryState: () => (/* reexport safe */ _lexical_history__WEBPACK_IMPORTED_MODULE_0__.createEmptyHistoryState)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lexical/history */ \"(app-pages-browser)/./node_modules/@lexical/history/LexicalHistory.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useHistory(editor, externalHistoryState, delay = 1000) {\n  const historyState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => externalHistoryState || (0,_lexical_history__WEBPACK_IMPORTED_MODULE_0__.createEmptyHistoryState)(), [externalHistoryState]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    return (0,_lexical_history__WEBPACK_IMPORTED_MODULE_0__.registerHistory)(editor, historyState, delay);\n  }, [delay, editor, historyState]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction HistoryPlugin({\n  delay,\n  externalHistoryState\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__.useLexicalComposerContext)();\n  useHistory(editor, externalHistoryState, delay);\n  return null;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsSGlzdG9yeVBsdWdpbi5kZXYubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtGO0FBQ047QUFDakI7QUFDaEI7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLDhDQUFPLCtCQUErQix5RUFBdUI7QUFDcEYsRUFBRSxnREFBUztBQUNYLFdBQVcsaUVBQWU7QUFDMUIsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxtQkFBbUIsZ0dBQXlCO0FBQzVDO0FBQ0E7QUFDQTs7QUFFeUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWdudXNvaGxlL2N1cnNvcnByb2plY3RzL3NtcGxhdC9hcHBzLWNtcy1wYXlsb2FkL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsSGlzdG9yeVBsdWdpbi5kZXYubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IHsgdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlRW1wdHlIaXN0b3J5U3RhdGUsIHJlZ2lzdGVySGlzdG9yeSB9IGZyb20gJ0BsZXhpY2FsL2hpc3RvcnknO1xuZXhwb3J0IHsgY3JlYXRlRW1wdHlIaXN0b3J5U3RhdGUgfSBmcm9tICdAbGV4aWNhbC9oaXN0b3J5JztcbmltcG9ydCB7IHVzZU1lbW8sIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiB1c2VIaXN0b3J5KGVkaXRvciwgZXh0ZXJuYWxIaXN0b3J5U3RhdGUsIGRlbGF5ID0gMTAwMCkge1xuICBjb25zdCBoaXN0b3J5U3RhdGUgPSB1c2VNZW1vKCgpID0+IGV4dGVybmFsSGlzdG9yeVN0YXRlIHx8IGNyZWF0ZUVtcHR5SGlzdG9yeVN0YXRlKCksIFtleHRlcm5hbEhpc3RvcnlTdGF0ZV0pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiByZWdpc3Rlckhpc3RvcnkoZWRpdG9yLCBoaXN0b3J5U3RhdGUsIGRlbGF5KTtcbiAgfSwgW2RlbGF5LCBlZGl0b3IsIGhpc3RvcnlTdGF0ZV0pO1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmZ1bmN0aW9uIEhpc3RvcnlQbHVnaW4oe1xuICBkZWxheSxcbiAgZXh0ZXJuYWxIaXN0b3J5U3RhdGVcbn0pIHtcbiAgY29uc3QgW2VkaXRvcl0gPSB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KCk7XG4gIHVzZUhpc3RvcnkoZWRpdG9yLCBleHRlcm5hbEhpc3RvcnlTdGF0ZSwgZGVsYXkpO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IHsgSGlzdG9yeVBsdWdpbiB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnChangePlugin: () => (/* binding */ OnChangePlugin)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction OnChangePlugin({\n  ignoreHistoryMergeTagChange = true,\n  ignoreSelectionChange = false,\n  onChange\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__.useLexicalComposerContext)();\n  useLayoutEffectImpl(() => {\n    if (onChange) {\n      return editor.registerUpdateListener(({\n        editorState,\n        dirtyElements,\n        dirtyLeaves,\n        prevEditorState,\n        tags\n      }) => {\n        if (ignoreSelectionChange && dirtyElements.size === 0 && dirtyLeaves.size === 0 || ignoreHistoryMergeTagChange && tags.has(lexical__WEBPACK_IMPORTED_MODULE_2__.HISTORY_MERGE_TAG) || prevEditorState.isEmpty()) {\n          return;\n        }\n        onChange(editorState, editor, tags);\n      });\n    }\n  }, [editor, ignoreHistoryMergeTagChange, ignoreSelectionChange, onChange]);\n  return null;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsT25DaGFuZ2VQbHVnaW4uZGV2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtGO0FBQ3RDO0FBQ087O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsa0RBQWUsR0FBRyw0Q0FBUzs7QUFFckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUJBQW1CLGdHQUF5QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLG1JQUFtSSxzREFBaUI7QUFDcEo7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRTBCIiwic291cmNlcyI6WyIvVXNlcnMvbWFnbnVzb2hsZS9jdXJzb3Jwcm9qZWN0cy9zbXBsYXQvYXBwcy1jbXMtcGF5bG9hZC9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbE9uQ2hhbmdlUGx1Z2luLmRldi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgeyB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0IH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCc7XG5pbXBvcnQgeyBISVNUT1JZX01FUkdFX1RBRyB9IGZyb20gJ2xleGljYWwnO1xuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0LCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuY29uc3QgQ0FOX1VTRV9ET00gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cblxuLy8gVGhpcyB3b3JrYXJvdW5kIGlzIG5vIGxvbmdlciBuZWNlc3NhcnkgaW4gUmVhY3QgMTksXG4vLyBidXQgd2UgY3VycmVudGx5IHN1cHBvcnQgUmVhY3QgPj0xNy54XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8yNjM5NVxuY29uc3QgdXNlTGF5b3V0RWZmZWN0SW1wbCA9IENBTl9VU0VfRE9NID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmZ1bmN0aW9uIE9uQ2hhbmdlUGx1Z2luKHtcbiAgaWdub3JlSGlzdG9yeU1lcmdlVGFnQ2hhbmdlID0gdHJ1ZSxcbiAgaWdub3JlU2VsZWN0aW9uQ2hhbmdlID0gZmFsc2UsXG4gIG9uQ2hhbmdlXG59KSB7XG4gIGNvbnN0IFtlZGl0b3JdID0gdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCgpO1xuICB1c2VMYXlvdXRFZmZlY3RJbXBsKCgpID0+IHtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIHJldHVybiBlZGl0b3IucmVnaXN0ZXJVcGRhdGVMaXN0ZW5lcigoe1xuICAgICAgICBlZGl0b3JTdGF0ZSxcbiAgICAgICAgZGlydHlFbGVtZW50cyxcbiAgICAgICAgZGlydHlMZWF2ZXMsXG4gICAgICAgIHByZXZFZGl0b3JTdGF0ZSxcbiAgICAgICAgdGFnc1xuICAgICAgfSkgPT4ge1xuICAgICAgICBpZiAoaWdub3JlU2VsZWN0aW9uQ2hhbmdlICYmIGRpcnR5RWxlbWVudHMuc2l6ZSA9PT0gMCAmJiBkaXJ0eUxlYXZlcy5zaXplID09PSAwIHx8IGlnbm9yZUhpc3RvcnlNZXJnZVRhZ0NoYW5nZSAmJiB0YWdzLmhhcyhISVNUT1JZX01FUkdFX1RBRykgfHwgcHJldkVkaXRvclN0YXRlLmlzRW1wdHkoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBvbkNoYW5nZShlZGl0b3JTdGF0ZSwgZWRpdG9yLCB0YWdzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2VkaXRvciwgaWdub3JlSGlzdG9yeU1lcmdlVGFnQ2hhbmdlLCBpZ25vcmVTZWxlY3Rpb25DaGFuZ2UsIG9uQ2hhbmdlXSk7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgeyBPbkNoYW5nZVBsdWdpbiB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RichTextPlugin: () => (/* binding */ RichTextPlugin)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_react_useLexicalEditable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @lexical/react/useLexicalEditable */ \"(app-pages-browser)/./node_modules/@lexical/react/useLexicalEditable.dev.mjs\");\n/* harmony import */ var _lexical_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lexical/text */ \"(app-pages-browser)/./node_modules/@lexical/text/LexicalText.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var _lexical_dragon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lexical/dragon */ \"(app-pages-browser)/./node_modules/@lexical/dragon/LexicalDragon.dev.mjs\");\n/* harmony import */ var _lexical_rich_text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lexical/rich-text */ \"(app-pages-browser)/./node_modules/@lexical/rich-text/LexicalRichText.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction canShowPlaceholderFromCurrentEditorState(editor) {\n  const currentCanShowPlaceholder = editor.getEditorState().read((0,_lexical_text__WEBPACK_IMPORTED_MODULE_3__.$canShowPlaceholderCurry)(editor.isComposing()));\n  return currentCanShowPlaceholder;\n}\nfunction useCanShowPlaceholder(editor) {\n  const [canShowPlaceholder, setCanShowPlaceholder] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => canShowPlaceholderFromCurrentEditorState(editor));\n  useLayoutEffectImpl(() => {\n    function resetCanShowPlaceholder() {\n      const currentCanShowPlaceholder = canShowPlaceholderFromCurrentEditorState(editor);\n      setCanShowPlaceholder(currentCanShowPlaceholder);\n    }\n    resetCanShowPlaceholder();\n    return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_4__.mergeRegister)(editor.registerUpdateListener(() => {\n      resetCanShowPlaceholder();\n    }), editor.registerEditableListener(() => {\n      resetCanShowPlaceholder();\n    }));\n  }, [editor]);\n  return canShowPlaceholder;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useDecorators(editor, ErrorBoundary) {\n  const [decorators, setDecorators] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => editor.getDecorators());\n\n  // Subscribe to changes\n  useLayoutEffectImpl(() => {\n    return editor.registerDecoratorListener(nextDecorators => {\n      (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(() => {\n        setDecorators(nextDecorators);\n      });\n    });\n  }, [editor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    // If the content editable mounts before the subscription is added, then\n    // nothing will be rendered on initial pass. We can get around that by\n    // ensuring that we set the value.\n    setDecorators(editor.getDecorators());\n  }, [editor]);\n\n  // Return decorators defined as React Portals\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const decoratedPortals = [];\n    const decoratorKeys = Object.keys(decorators);\n    for (let i = 0; i < decoratorKeys.length; i++) {\n      const nodeKey = decoratorKeys[i];\n      const reactDecorator = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ErrorBoundary, {\n        onError: e => editor._onError(e),\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n          fallback: null,\n          children: decorators[nodeKey]\n        })\n      });\n      const element = editor.getElementByKey(nodeKey);\n      if (element !== null) {\n        decoratedPortals.push(/*#__PURE__*/(0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(reactDecorator, element, nodeKey));\n      }\n    }\n    return decoratedPortals;\n  }, [ErrorBoundary, decorators, editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useRichTextSetup(editor) {\n  useLayoutEffectImpl(() => {\n    return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_4__.mergeRegister)((0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_5__.registerRichText)(editor), (0,_lexical_dragon__WEBPACK_IMPORTED_MODULE_6__.registerDragonSupport)(editor));\n\n    // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction RichTextPlugin({\n  contentEditable,\n  // TODO Remove. This property is now part of ContentEditable\n  placeholder = null,\n  ErrorBoundary\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_7__.useLexicalComposerContext)();\n  const decorators = useDecorators(editor, ErrorBoundary);\n  useRichTextSetup(editor);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n    children: [contentEditable, /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Placeholder, {\n      content: placeholder\n    }), decorators]\n  });\n}\n\n// TODO remove\nfunction Placeholder({\n  content\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_7__.useLexicalComposerContext)();\n  const showPlaceholder = useCanShowPlaceholder(editor);\n  const editable = (0,_lexical_react_useLexicalEditable__WEBPACK_IMPORTED_MODULE_8__.useLexicalEditable)();\n  if (!showPlaceholder) {\n    return null;\n  }\n  if (typeof content === 'function') {\n    return content(editable);\n  } else {\n    return content;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/text/LexicalText.dev.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@lexical/text/LexicalText.dev.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $canShowPlaceholder: () => (/* binding */ $canShowPlaceholder),\n/* harmony export */   $canShowPlaceholderCurry: () => (/* binding */ $canShowPlaceholderCurry),\n/* harmony export */   $findTextIntersectionFromCharacters: () => (/* binding */ $findTextIntersectionFromCharacters),\n/* harmony export */   $isRootTextContentEmpty: () => (/* binding */ $isRootTextContentEmpty),\n/* harmony export */   $isRootTextContentEmptyCurry: () => (/* binding */ $isRootTextContentEmptyCurry),\n/* harmony export */   $rootTextContent: () => (/* binding */ $rootTextContent),\n/* harmony export */   registerLexicalTextEntity: () => (/* binding */ registerLexicalTextEntity)\n/* harmony export */ });\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Returns the root's text content.\n * @returns The root's text content.\n */\nfunction $rootTextContent() {\n  const root = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getRoot)();\n  return root.getTextContent();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Determines if the root has any text content and can trim any whitespace if it does.\n * @param isEditorComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @param trim - Should the root text have its whitespaced trimmed? Defaults to true.\n * @returns true if text content is empty, false if there is text or isEditorComposing is true.\n */\nfunction $isRootTextContentEmpty(isEditorComposing, trim = true) {\n  if (isEditorComposing) {\n    return false;\n  }\n  let text = $rootTextContent();\n  if (trim) {\n    text = text.trim();\n  }\n  return text === '';\n}\n\n/**\n * Returns a function that executes {@link $isRootTextContentEmpty}\n * @param isEditorComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @param trim - Should the root text have its whitespaced trimmed? Defaults to true.\n * @returns A function that executes $isRootTextContentEmpty based on arguments.\n */\nfunction $isRootTextContentEmptyCurry(isEditorComposing, trim) {\n  return () => $isRootTextContentEmpty(isEditorComposing, trim);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Determines if the input should show the placeholder. If anything is in\n * in the root the placeholder should not be shown.\n * @param isComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @returns true if the input should show the placeholder, false otherwise.\n */\nfunction $canShowPlaceholder(isComposing) {\n  if (!$isRootTextContentEmpty(isComposing, false)) {\n    return false;\n  }\n  const root = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getRoot)();\n  const children = root.getChildren();\n  const childrenLength = children.length;\n  if (childrenLength > 1) {\n    return false;\n  }\n  for (let i = 0; i < childrenLength; i++) {\n    const topBlock = children[i];\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isDecoratorNode)(topBlock)) {\n      return false;\n    }\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isElementNode)(topBlock)) {\n      if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isParagraphNode)(topBlock)) {\n        return false;\n      }\n      if (topBlock.__indent !== 0) {\n        return false;\n      }\n      const topBlockChildren = topBlock.getChildren();\n      const topBlockChildrenLength = topBlockChildren.length;\n      for (let s = 0; s < topBlockChildrenLength; s++) {\n        const child = topBlockChildren[i];\n        if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(child)) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a function that executes {@link $canShowPlaceholder}\n * @param isEditorComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @returns A function that executes $canShowPlaceholder with arguments.\n */\nfunction $canShowPlaceholderCurry(isEditorComposing) {\n  return () => $canShowPlaceholder(isEditorComposing);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Finds a TextNode with a size larger than targetCharacters and returns\n * the node along with the remaining length of the text.\n * @param root - The RootNode.\n * @param targetCharacters - The number of characters whose TextNode must be larger than.\n * @returns The TextNode and the intersections offset, or null if no TextNode is found.\n */\nfunction $findTextIntersectionFromCharacters(root, targetCharacters) {\n  let node = root.getFirstChild();\n  let currentCharacters = 0;\n  mainLoop: while (node !== null) {\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isElementNode)(node)) {\n      const child = node.getFirstChild();\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n    } else if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(node)) {\n      const characters = node.getTextContentSize();\n      if (currentCharacters + characters > targetCharacters) {\n        return {\n          node,\n          offset: targetCharacters - currentCharacters\n        };\n      }\n      currentCharacters += characters;\n    }\n    const sibling = node.getNextSibling();\n    if (sibling !== null) {\n      node = sibling;\n      continue;\n    }\n    let parent = node.getParent();\n    while (parent !== null) {\n      const parentSibling = parent.getNextSibling();\n      if (parentSibling !== null) {\n        node = parentSibling;\n        continue mainLoop;\n      }\n      parent = parent.getParent();\n    }\n    break;\n  }\n  return null;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// Do not require this module directly! Use normal `invariant` calls.\n\nfunction formatDevErrorMessage(message) {\n  throw new Error(message);\n}\n\n/**\n * Returns a tuple that can be rested (...) into mergeRegister to clean up\n * node transforms listeners that transforms text into another node, eg. a HashtagNode.\n * @example\n * ```ts\n *   useEffect(() => {\n    return mergeRegister(\n      ...registerLexicalTextEntity(editor, getMatch, targetNode, createNode),\n    );\n  }, [createNode, editor, getMatch, targetNode]);\n * ```\n * Where targetNode is the type of node containing the text you want to transform (like a text input),\n * then getMatch uses a regex to find a matching text and creates the proper node to include the matching text.\n * @param editor - The lexical editor.\n * @param getMatch - Finds a matching string that satisfies a regex expression.\n * @param targetNode - The node type that contains text to match with. eg. HashtagNode\n * @param createNode - A function that creates a new node to contain the matched text. eg createHashtagNode\n * @returns An array containing the plain text and reverse node transform listeners.\n */\nfunction registerLexicalTextEntity(editor, getMatch, targetNode, createNode) {\n  const isTargetNode = node => {\n    return node instanceof targetNode;\n  };\n  const $replaceWithSimpleText = node => {\n    const textNode = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$createTextNode)(node.getTextContent());\n    textNode.setFormat(node.getFormat());\n    node.replace(textNode);\n  };\n  const getMode = node => {\n    return node.getLatest().__mode;\n  };\n  const $textNodeTransform = node => {\n    if (!node.isSimpleText()) {\n      return;\n    }\n    let prevSibling = node.getPreviousSibling();\n    let text = node.getTextContent();\n    let currentNode = node;\n    let match;\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevSibling)) {\n      const previousText = prevSibling.getTextContent();\n      const combinedText = previousText + text;\n      const prevMatch = getMatch(combinedText);\n      if (isTargetNode(prevSibling)) {\n        if (prevMatch === null || getMode(prevSibling) !== 0) {\n          $replaceWithSimpleText(prevSibling);\n          return;\n        } else {\n          const diff = prevMatch.end - previousText.length;\n          if (diff > 0) {\n            const concatText = text.slice(0, diff);\n            const newTextContent = previousText + concatText;\n            prevSibling.select();\n            prevSibling.setTextContent(newTextContent);\n            if (diff === text.length) {\n              node.remove();\n            } else {\n              const remainingText = text.slice(diff);\n              node.setTextContent(remainingText);\n            }\n            return;\n          }\n        }\n      } else if (prevMatch === null || prevMatch.start < previousText.length) {\n        return;\n      }\n    }\n    let prevMatchLengthToSkip = 0;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      match = getMatch(text);\n      let nextText = match === null ? '' : text.slice(match.end);\n      text = nextText;\n      if (nextText === '') {\n        const nextSibling = currentNode.getNextSibling();\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextSibling)) {\n          nextText = currentNode.getTextContent() + nextSibling.getTextContent();\n          const nextMatch = getMatch(nextText);\n          if (nextMatch === null) {\n            if (isTargetNode(nextSibling)) {\n              $replaceWithSimpleText(nextSibling);\n            } else {\n              nextSibling.markDirty();\n            }\n            return;\n          } else if (nextMatch.start !== 0) {\n            return;\n          }\n        }\n      }\n      if (match === null) {\n        return;\n      }\n      if (match.start === 0 && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevSibling) && prevSibling.isTextEntity()) {\n        prevMatchLengthToSkip += match.end;\n        continue;\n      }\n      let nodeToReplace;\n      if (match.start === 0) {\n        [nodeToReplace, currentNode] = currentNode.splitText(match.end);\n      } else {\n        [, nodeToReplace, currentNode] = currentNode.splitText(match.start + prevMatchLengthToSkip, match.end + prevMatchLengthToSkip);\n      }\n      if (!(nodeToReplace !== undefined)) {\n        formatDevErrorMessage(`${'nodeToReplace'} should not be undefined. You may want to check splitOffsets passed to the splitText.`);\n      }\n      const replacementNode = createNode(nodeToReplace);\n      replacementNode.setFormat(nodeToReplace.getFormat());\n      nodeToReplace.replace(replacementNode);\n      if (currentNode == null) {\n        return;\n      }\n      prevMatchLengthToSkip = 0;\n      prevSibling = replacementNode;\n    }\n  };\n  const $reverseNodeTransform = node => {\n    const text = node.getTextContent();\n    const match = getMatch(text);\n    if (match === null || match.start !== 0) {\n      $replaceWithSimpleText(node);\n      return;\n    }\n    if (text.length > match.end) {\n      // This will split out the rest of the text as simple text\n      node.splitText(match.end);\n      return;\n    }\n    const prevSibling = node.getPreviousSibling();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevSibling) && prevSibling.isTextEntity()) {\n      $replaceWithSimpleText(prevSibling);\n      $replaceWithSimpleText(node);\n    }\n    const nextSibling = node.getNextSibling();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextSibling) && nextSibling.isTextEntity()) {\n      $replaceWithSimpleText(nextSibling);\n\n      // This may have already been converted in the previous block\n      if (isTargetNode(node)) {\n        $replaceWithSimpleText(node);\n      }\n    }\n  };\n  const removePlainTextTransform = editor.registerNodeTransform(lexical__WEBPACK_IMPORTED_MODULE_0__.TextNode, $textNodeTransform);\n  const removeReverseNodeTransform = editor.registerNodeTransform(targetNode, $reverseNodeTransform);\n  return [removePlainTextTransform, removeReverseNodeTransform];\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/text/LexicalText.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/Field-F2KOJLMQ.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/exports/client/Field-F2KOJLMQ.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RichText: () => (/* binding */ _s3)\n/* harmony export */ });\n/* harmony import */ var _chunk_AFXLIYGL_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./chunk-AFXLIYGL.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/chunk-AFXLIYGL.js\");\n/* harmony import */ var _chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./chunk-BZZVLW4U.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/chunk-BZZVLW4U.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var _payloadcms_ui__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @payloadcms/ui */ \"(app-pages-browser)/./node_modules/@payloadcms/ui/dist/exports/client/index.js\");\n/* harmony import */ var _payloadcms_ui_shared__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @payloadcms/ui/shared */ \"(app-pages-browser)/./node_modules/@payloadcms/ui/dist/exports/shared/index.js\");\n/* harmony import */ var dequal_lite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dequal/lite */ \"(app-pages-browser)/./node_modules/dequal/lite/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_error_boundary__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! react-error-boundary */ \"(app-pages-browser)/./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js\");\n/* harmony import */ var _bundled_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bundled.css */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/bundled.css\");\n/* harmony import */ var _lexical_react_LexicalComposer_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @lexical/react/LexicalComposer.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposer.dev.mjs\");\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/compiler-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/compiler-runtime.js\");\n/* harmony import */ var _lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalErrorBoundary_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @lexical/react/LexicalErrorBoundary.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalHistoryPlugin_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @lexical/react/LexicalHistoryPlugin.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalOnChangePlugin_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @lexical/react/LexicalOnChangePlugin.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalRichTextPlugin_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @lexical/react/LexicalRichTextPlugin.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs\");\n/* harmony import */ var _lexical_react_useLexicalEditable__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @lexical/react/useLexicalEditable */ \"(app-pages-browser)/./node_modules/@lexical/react/useLexicalEditable.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var _lexical_clipboard__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @lexical/clipboard */ \"(app-pages-browser)/./node_modules/@lexical/clipboard/LexicalClipboard.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var bson_objectid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! bson-objectid */ \"(app-pages-browser)/./node_modules/bson-objectid/objectid.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _lexical_rich_text__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @lexical/rich-text */ \"(app-pages-browser)/./node_modules/@lexical/rich-text/LexicalRichText.dev.mjs\");\n/* harmony import */ var _payloadcms_ui__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @payloadcms/ui */ \"(app-pages-browser)/./node_modules/@payloadcms/ui/dist/exports/client/chunk-AZDI6MW4.js\");\n/* harmony import */ var _lexical_react_LexicalContentEditable_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @lexical/react/LexicalContentEditable.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalContentEditable.dev.mjs\");\n/* __next_internal_client_entry_do_not_use__ RichText auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar $ = (param)=>{\n    let { anchorElem: t, clientProps: e, plugin: o } = param;\n    return o.position === \"floatingAnchorElem\" && t ? o.Component && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(o.Component, {\n        anchorElem: t,\n        clientProps: e\n    }) : o.Component && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(o.Component, {\n        clientProps: e\n    });\n};\n\n\n\n\n\n\n\nfunction Be() {\n    let t = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_4__.c)(3), [e] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)(), o, r;\n    return t[0] !== e ? (o = ()=>e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.COPY_COMMAND, (n)=>((0,_lexical_clipboard__WEBPACK_IMPORTED_MODULE_8__.copyToClipboard)(e, (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_9__.objectKlassEquals)(n, ClipboardEvent) ? n : null).then(()=>{\n                if (!(n instanceof ClipboardEvent) || !n.clipboardData) throw new Error(\"No clipboard event\");\n                let d = n.clipboardData.getData(\"application/x-lexical-editor\");\n                if (!d) return !0;\n                let i = JSON.parse(d), s = (u)=>{\n                    if (\"fields\" in u && typeof u.fields == \"object\" && u.fields !== null && \"id\" in u.fields ? u.fields.id = new bson_objectid__WEBPACK_IMPORTED_MODULE_5__[\"default\"]().toHexString() : \"id\" in u && (u.id = new bson_objectid__WEBPACK_IMPORTED_MODULE_5__[\"default\"]().toHexString()), u.children) for (let y of u.children)s(y);\n                };\n                for (let u of i.nodes)s(u);\n                let c = JSON.stringify(i);\n                n.clipboardData.setData(\"application/x-lexical-editor\", c);\n            }).catch((d)=>{\n                var _n_clipboardData;\n                throw n instanceof ClipboardEvent && ((_n_clipboardData = n.clipboardData) === null || _n_clipboardData === void 0 ? void 0 : _n_clipboardData.setData(\"application/x-lexical-editor\", \"\")), d;\n            }), !0), lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), r = [\n        e\n    ], t[0] = e, t[1] = o, t[2] = r) : (o = t[1], r = t[2]), (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(o, r), null;\n}\n_c = Be;\n\n\n\n\n\nfunction Fe() {\n    let t = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_4__.c)(3), [e] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)(), o = oo, r, n;\n    return t[0] !== e ? (r = ()=>(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_9__.mergeRegister)(e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.CLICK_COMMAND, to, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.KEY_DELETE_COMMAND, o, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.KEY_BACKSPACE_COMMAND, o, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.SELECTION_CHANGE_COMMAND, eo, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.KEY_ARROW_UP_COMMAND, Xt, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.KEY_ARROW_DOWN_COMMAND, Jt, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW)), n = [\n        e\n    ], t[0] = e, t[1] = r, t[2] = n) : (r = t[1], n = t[2]), (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(r, n), null;\n}\n_c1 = Fe;\nfunction Jt(t) {\n    let e = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isNodeSelection)(e)) {\n        var _e_getNodes_, _ne;\n        t.preventDefault();\n        let i = (_e_getNodes_ = e.getNodes()[0]) === null || _e_getNodes_ === void 0 ? void 0 : _e_getNodes_.getNextSibling();\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isDecoratorNode)(i)) {\n            let u = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getEditor)().getElementByKey(i.getKey());\n            return u && Z({\n                element: u,\n                node: i\n            }), !0;\n        }\n        if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isElementNode)(i)) return !0;\n        var _i_getFirstDescendant;\n        let s = (_i_getFirstDescendant = i.getFirstDescendant()) !== null && _i_getFirstDescendant !== void 0 ? _i_getFirstDescendant : i;\n        return s && ((_ne = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_9__.$findMatchingParent)(s, se)) === null || _ne === void 0 ? void 0 : _ne.selectEnd(), t.preventDefault()), !0;\n    }\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isRangeSelection)(e)) return !1;\n    let r = (e.isBackward() ? e.anchor : e.focus).getNode(), n = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_9__.$findMatchingParent)(r, Qt), d = n === null || n === void 0 ? void 0 : n.getNextSibling();\n    if (!n || d !== $e(n)) return !1;\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isDecoratorNode)(d)) {\n        let i = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getEditor)().getElementByKey(d.getKey());\n        if (i) return Z({\n            element: i,\n            node: d\n        }), t.preventDefault(), !0;\n    }\n    return !1;\n}\n_c2 = Jt;\nfunction Qt(t) {\n    return $e(t) !== null;\n}\n_c3 = Qt;\nfunction Xt(t) {\n    let e = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isNodeSelection)(e)) {\n        var _e_getNodes_, _ne;\n        let i = (_e_getNodes_ = e.getNodes()[0]) === null || _e_getNodes_ === void 0 ? void 0 : _e_getNodes_.getPreviousSibling();\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isDecoratorNode)(i)) {\n            let u = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getEditor)().getElementByKey(i.getKey());\n            return u ? (Z({\n                element: u,\n                node: i\n            }), t.preventDefault(), !0) : !1;\n        }\n        if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isElementNode)(i)) return !1;\n        var _i_getLastDescendant;\n        let s = (_i_getLastDescendant = i.getLastDescendant()) !== null && _i_getLastDescendant !== void 0 ? _i_getLastDescendant : i;\n        return s ? ((_ne = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_9__.$findMatchingParent)(s, se)) === null || _ne === void 0 ? void 0 : _ne.selectStart(), t.preventDefault(), !0) : !1;\n    }\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isRangeSelection)(e)) return !1;\n    let r = (e.isBackward() ? e.anchor : e.focus).getNode(), n = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_9__.$findMatchingParent)(r, Zt), d = n === null || n === void 0 ? void 0 : n.getPreviousSibling();\n    if (!n || d !== Ke(n)) return !1;\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isDecoratorNode)(d)) {\n        let i = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getEditor)().getElementByKey(d.getKey());\n        if (i) return Z({\n            element: i,\n            node: d\n        }), t.preventDefault(), !0;\n    }\n    return !1;\n}\n_c4 = Xt;\nfunction Zt(t) {\n    return Ke(t) !== null;\n}\n_c5 = Zt;\nfunction eo() {\n    var _document_querySelector, _t_element;\n    let t = io();\n    return (_document_querySelector = document.querySelector(\".decorator-selected\")) === null || _document_querySelector === void 0 ? void 0 : _document_querySelector.classList.remove(\"decorator-selected\"), t ? ((_t_element = t.element) === null || _t_element === void 0 ? void 0 : _t_element.classList.add(\"decorator-selected\"), !0) : !1;\n}\nfunction to(t) {\n    var _document_querySelector;\n    (_document_querySelector = document.querySelector(\".decorator-selected\")) === null || _document_querySelector === void 0 ? void 0 : _document_querySelector.classList.remove(\"decorator-selected\");\n    let e = ro(t);\n    if (!e) return !0;\n    let { target: o } = t;\n    return !(o instanceof HTMLElement) || o.isContentEditable || o.closest('button, textarea, input, .react-select, .code-editor, .no-select-decorator, [role=\"button\"]') ? (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$setSelection)(null) : Z(e), !0;\n}\nfunction oo(t) {\n    let e = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n    return (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isNodeSelection)(e) ? (t.preventDefault(), e.getNodes().forEach(no), !0) : !1;\n}\nfunction no(t) {\n    t.remove();\n}\nfunction ro(t) {\n    if (!(t.target instanceof HTMLElement)) return;\n    let e = t.target.closest('[data-lexical-decorator=\"true\"]');\n    if (!(e instanceof HTMLElement)) return;\n    let o = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getNearestNodeFromDOMNode)(e);\n    return (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isDecoratorNode)(o) ? {\n        element: e,\n        node: o\n    } : void 0;\n}\nfunction io() {\n    let t = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isNodeSelection)(t)) return;\n    let e = t.getNodes();\n    if (e.length !== 1) return;\n    let o = e[0];\n    return (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isDecoratorNode)(o) ? {\n        decorator: o,\n        element: (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getEditor)().getElementByKey(o.getKey())\n    } : void 0;\n}\nfunction Z(param) {\n    let { element: t, node: e } = param;\n    var _document_querySelector;\n    (_document_querySelector = document.querySelector(\".decorator-selected\")) === null || _document_querySelector === void 0 ? void 0 : _document_querySelector.classList.remove(\"decorator-selected\");\n    let o = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$createNodeSelection)();\n    o.add(e.getKey()), (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$setSelection)(o), t.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"nearest\"\n    }), t.classList.add(\"decorator-selected\");\n}\n_c6 = Z;\nfunction se(t) {\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isDecoratorNode)(t) && !t.isInline()) return !0;\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isElementNode)(t) || (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isRootOrShadowRoot)(t)) return !1;\n    let e = t.getFirstChild(), o = e === null || (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isLineBreakNode)(e) || (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isTextNode)(e) || e.isInline();\n    return !t.isInline() && t.canBeEmpty() !== !1 && o;\n}\nfunction $e(t) {\n    let e = t.getNextSibling();\n    for(; e !== null;){\n        if (se(e)) return e;\n        e = e.getNextSibling();\n    }\n    return null;\n}\nfunction Ke(t) {\n    let e = t.getPreviousSibling();\n    for(; e !== null;){\n        if (se(e)) return e;\n        e = e.getPreviousSibling();\n    }\n    return null;\n}\n_c7 = Ke;\n\n\n\n\n\n\nvar Y = function(t, e, o, r) {\n    let n = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 50, d = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 25;\n    let i = 0;\n    if (t && !t.contains(r)) {\n        let { bottom: s, left: c, right: u, top: y } = t.getBoundingClientRect(), l = y + window.scrollY, a = s + window.scrollY;\n        if (o < l - d || o > a + d || e < c - n || e > u + n) return -1;\n        (e < c || e > u) && (i = e < c ? e - c : e - u);\n    }\n    return i;\n};\n_c8 = Y;\n\nfunction V(t) {\n    let e = t.getBoundingClientRect(), o = getComputedStyle(t).getPropertyValue(\"transform\");\n    if (!o || o === \"none\") return e;\n    let r = o.split(\",\").pop();\n    return e.y = e.y - Number(r === null || r === void 0 ? void 0 : r.replace(\")\", \"\")), e;\n}\n_c9 = V;\nfunction le(t) {\n    let e = (c, u)=>c ? parseFloat(window.getComputedStyle(c)[u]) : 0, { marginBottom: o, marginTop: r } = window.getComputedStyle(t), n = e(t.previousElementSibling, \"marginBottom\"), d = e(t.nextElementSibling, \"marginTop\"), i = Math.max(parseFloat(r), n);\n    return {\n        marginBottom: Math.max(parseFloat(o), d),\n        marginTop: i\n    };\n}\n\nfunction H(t) {\n    return t.getEditorState().read(()=>(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getRoot)().getChildrenKeys());\n}\n_c10 = H;\nvar lo = 1, ao = -1, He = 0, _ = {\n    props: null,\n    result: null\n};\nfunction co(t, e) {\n    let o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 20;\n    let r = t.x - e.x, n = t.y - e.y;\n    return r * r + n * n <= o * o;\n}\nfunction G(t) {\n    let { anchorElem: e, cache_threshold: o = 20, editor: r, fuzzy: n = !1, horizontalOffset: d = 0, point: { x: i, y: s }, startIndex: c = 0, useEdgeAsDefault: u = !1 } = t;\n    if (o > 0 && _.props && _.result && _.props.fuzzy === t.fuzzy && _.props.horizontalOffset === t.horizontalOffset && _.props.useEdgeAsDefault === t.useEdgeAsDefault && co(_.props.point, t.point, o)) return _.result;\n    let y = e.getBoundingClientRect(), l = H(r), a = {\n        blockElem: null,\n        blockNode: null,\n        distance: 1 / 0,\n        foundAtIndex: -1,\n        isFoundNodeEmptyParagraph: !1\n    };\n    return r.getEditorState().read(()=>{\n        if (u) {\n            let g = r.getElementByKey(l[0]), m = r.getElementByKey(l[l.length - 1]);\n            if (g && m) {\n                let [p, f] = [\n                    V(g),\n                    V(m)\n                ];\n                if (s < p.top ? (a.blockElem = g, a.distance = p.top - s, a.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getNodeByKey)(l[0]), a.foundAtIndex = 0) : s > f.bottom && (a.distance = s - f.bottom, a.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getNodeByKey)(l[l.length - 1]), a.blockElem = m, a.foundAtIndex = l.length - 1), a === null || a === void 0 ? void 0 : a.blockElem) return {\n                    blockElem: null,\n                    isFoundNodeEmptyParagraph: !1\n                };\n            }\n        }\n        let h = c, x = He;\n        for(; h >= 0 && h < l.length;){\n            let g = l[h], m = r.getElementByKey(g);\n            if (m === null) break;\n            let p = new _chunk_AFXLIYGL_js__WEBPACK_IMPORTED_MODULE_11__.f(i + d, s), f = _chunk_AFXLIYGL_js__WEBPACK_IMPORTED_MODULE_11__.k.fromDOMRect(V(m)), { marginBottom: C, marginTop: k } = le(m), S = f.generateNewRect({\n                bottom: f.bottom + C,\n                left: y.left,\n                right: y.right,\n                top: f.top - k\n            }), { distance: b, isOnBottomSide: w, isOnTopSide: N } = S.distanceFromPoint(p);\n            if (b === 0) {\n                a.blockElem = m, a.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getNodeByKey)(g), a.foundAtIndex = h, a.distance = b, a.blockNode && a.blockNode.getType() === \"paragraph\" && a.blockNode.getTextContent() === \"\" && (!n && !t.returnEmptyParagraphs && (a.blockElem = null, a.blockNode = null), a.isFoundNodeEmptyParagraph = !0);\n                break;\n            } else n && b < a.distance && (a.blockElem = m, a.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getNodeByKey)(g), a.distance = b, a.foundAtIndex = h);\n            x === He && (N ? x = ao : w ? x = lo : x = 1 / 0), h += x;\n        }\n    }), _.props = t, _.result = {\n        blockElem: a.blockElem,\n        blockNode: a.blockNode,\n        foundAtIndex: a.foundAtIndex,\n        isFoundNodeEmptyParagraph: a.isFoundNodeEmptyParagraph\n    }, {\n        blockElem: a.blockElem,\n        blockNode: a.blockNode,\n        foundAtIndex: a.foundAtIndex,\n        isFoundNodeEmptyParagraph: a.isFoundNodeEmptyParagraph\n    };\n}\n_c11 = G;\nfunction ce(t, e) {\n    return !!t.closest(\".\".concat(e));\n}\nvar uo = [\n    \"IMG\",\n    \"INPUT\",\n    \"TEXTAREA\",\n    \"SELECT\",\n    \"BUTTON\",\n    \"VIDEO\",\n    \"OBJECT\",\n    \"EMBED\",\n    \"IFRAME\",\n    \"HR\"\n];\nfunction je(t) {\n    if (!t || uo.includes(t.tagName) || t.offsetHeight === 0 || t.offsetWidth === 0) return !1;\n    let e = window.getComputedStyle(t);\n    return !(e.display === \"table-cell\" || e.position === \"absolute\" || e.visibility === \"hidden\" || e.opacity === \"0\");\n}\nfunction de(t, e, o) {\n    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;\n    if (!t) {\n        e.style.opacity = \"0\", e.style.transform = \"translate(-10000px, -10000px)\";\n        return;\n    }\n    let n = t.getBoundingClientRect(), d = window.getComputedStyle(t), i = e.getBoundingClientRect(), s = o.getBoundingClientRect(), c;\n    if ([\n        \"LexicalEditorTheme__block\",\n        \"LexicalEditorTheme__upload\",\n        \"LexicalEditorTheme__relationship\"\n    ].some((l)=>{\n        var _t_firstElementChild;\n        return t.classList.contains(l) || ((_t_firstElementChild = t.firstElementChild) === null || _t_firstElementChild === void 0 ? void 0 : _t_firstElementChild.classList.contains(l));\n    })) c = n.top + 8 - s.top;\n    else {\n        let l = je(t) ? parseInt(d.lineHeight, 10) : 0;\n        c = n.top + (l - i.height) / 2 - s.top;\n    }\n    let y = r;\n    e.style.opacity = \"1\", e.style.transform = \"translate(\".concat(y, \"px, \").concat(c, \"px)\");\n}\nvar Eo = \"add-block-menu\", ue = 1 / 0;\nfunction Co(t) {\n    return t === 0 ? 1 / 0 : ue >= 0 && ue < t ? ue : Math.floor(t / 2);\n}\n_c12 = Co;\nfunction bo(t, e, o) {\n    var _n_admin;\n    let r = e.parentElement, { editorConfig: n } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_12__.b)(), d = (n === null || n === void 0 ? void 0 : (_n_admin = n.admin) === null || _n_admin === void 0 ? void 0 : _n_admin.hideGutter) ? -24 : 12, i = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null), [s, c] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        var _document;\n        function y(l) {\n            let a = l.target;\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.isHTMLElement)(a)) return;\n            let h = Y(r, l.pageX, l.pageY, a);\n            if (h === -1) {\n                c(null);\n                return;\n            }\n            if (ce(a, Eo)) return;\n            let x = H(t), { blockElem: g, blockNode: m, foundAtIndex: p } = G({\n                anchorElem: e,\n                cache_threshold: 0,\n                editor: t,\n                horizontalOffset: -h,\n                point: new _chunk_AFXLIYGL_js__WEBPACK_IMPORTED_MODULE_11__.f(l.x, l.y),\n                returnEmptyParagraphs: !0,\n                startIndex: Co(x.length),\n                useEdgeAsDefault: !1\n            });\n            ue = p, g && m && ((s === null || s === void 0 ? void 0 : s.node) !== m || (s === null || s === void 0 ? void 0 : s.elem) !== g) && c({\n                elem: g,\n                node: m\n            });\n        }\n        return (_document = document) === null || _document === void 0 ? void 0 : _document.addEventListener(\"mousemove\", y), ()=>{\n            var _document;\n            (_document = document) === null || _document === void 0 ? void 0 : _document.removeEventListener(\"mousemove\", y);\n        };\n    }, [\n        r,\n        e,\n        t,\n        s\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        i.current && (s === null || s === void 0 ? void 0 : s.node) && de(s === null || s === void 0 ? void 0 : s.elem, i.current, e, d);\n    }, [\n        e,\n        s,\n        d\n    ]);\n    let u = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((y)=>{\n        let l = s;\n        (l === null || l === void 0 ? void 0 : l.node) && (t.update(()=>{\n            let a = !0;\n            if (((l === null || l === void 0 ? void 0 : l.node.getType()) !== \"paragraph\" || l.node.getTextContent() !== \"\") && (a = !1), !a) {\n                let h = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$createParagraphNode)();\n                l === null || l === void 0 ? void 0 : l.node.insertAfter(h), setTimeout(()=>{\n                    l = {\n                        elem: t.getElementByKey(h.getKey()),\n                        node: h\n                    }, c(l);\n                }, 0);\n            }\n        }), setTimeout(()=>{\n            t.update(()=>{\n                t.focus(), (l === null || l === void 0 ? void 0 : l.node) && \"select\" in l.node && typeof l.node.select == \"function\" && l.node.select();\n            });\n        }, 1), setTimeout(()=>{\n            t.dispatchCommand(_chunk_AFXLIYGL_js__WEBPACK_IMPORTED_MODULE_11__.i, {\n                node: l === null || l === void 0 ? void 0 : l.node\n            });\n        }, 2), y.stopPropagation(), y.preventDefault());\n    }, [\n        t,\n        s\n    ]);\n    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_10__.createPortal)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n            \"aria-label\": \"Add block\",\n            className: \"icon add-block-menu\",\n            onClick: (y)=>{\n                u(y);\n            },\n            ref: i,\n            type: \"button\",\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: o ? \"icon\" : \"\"\n            })\n        })\n    }), e);\n}\nfunction Ye(t) {\n    let { anchorElem: e } = t, o = e === void 0 ? document.body : e, [r] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)();\n    return bo(r, o, r._editable);\n}\n_c13 = Ye;\n\n\n\n\n\n\n\nvar Ve = 0, No = -24;\nvar j = 0;\nfunction Ge(t, e, o, r, n, d, i, s, c) {\n    let u = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : !1;\n    let { height: y, top: l } = r.getBoundingClientRect(), { top: a, width: h } = i.getBoundingClientRect(), { marginBottom: x, marginTop: g } = le(r), m = l, p = d >= l + y / 2 + window.scrollY, f = !1;\n    if (n === null || n === void 0 ? void 0 : n.elem) if (r !== (n === null || n === void 0 ? void 0 : n.elem)) (p && (n === null || n === void 0 ? void 0 : n.elem) && (n === null || n === void 0 ? void 0 : n.elem) === r.nextElementSibling || !p && (n === null || n === void 0 ? void 0 : n.elem) && (n === null || n === void 0 ? void 0 : n.elem) === r.previousElementSibling) && (j++, j < 200 && (f = !0));\n    else {\n        var _n_boundingBox;\n        j++;\n        let b = n === null || n === void 0 ? void 0 : (_n_boundingBox = n.boundingBox) === null || _n_boundingBox === void 0 ? void 0 : _n_boundingBox.y, w = r.getBoundingClientRect().y;\n        (p === (n === null || n === void 0 ? void 0 : n.isBelow) && b === w || j < 200) && (f = !1);\n    }\n    if (f) return {\n        isBelow: p,\n        willStayInSamePosition: f\n    };\n    u ? m += y / 2 : p ? m += y + x / 2 : m -= g / 2;\n    let C = 0;\n    u || (p ? C = -Ve : C = Ve);\n    let k = m - a + C, S = No - e;\n    return o.style.width = \"calc(\".concat(h, \"px - \").concat(t, \")\"), o.style.opacity = \".8\", o.style.transform = \"translate(\".concat(S, \"px, calc(\").concat(k, \"px - 2px))\"), (n === null || n === void 0 ? void 0 : n.elem) && (n.elem.style.opacity = \"\", (n === null || n === void 0 ? void 0 : n.elem) === r ? p ? n.elem.style.marginTop = \"\" : n.elem.style.marginBottom = \"\" : (n.elem.style.marginBottom = \"\", n.elem.style.marginTop = \"\")), j = 0, {\n        isBelow: p,\n        willStayInSamePosition: f\n    };\n}\n_c14 = Ge;\nvar ko = \"draggable-block-menu\", Qe = \"application/x-lexical-drag-block\", ee = 1 / 0;\nfunction Xe(t) {\n    return t === 0 ? 1 / 0 : ee >= 0 && ee < t ? ee : Math.floor(t / 2);\n}\n_c15 = Xe;\nfunction To(t, e) {\n    let { transform: o } = e.style;\n    t.setDragImage(e, 0, 0), setTimeout(()=>{\n        e.style.transform = o;\n    });\n}\n_c16 = To;\nfunction Ze(t, e) {\n    t && (t.style.opacity = \"0\"), e && (e.style.opacity = \"\", e.style.marginBottom = \"\", e.style.marginTop = \"\");\n}\n_c17 = Ze;\nfunction Do(t, e, o) {\n    var _a_admin, _a_admin1;\n    let r = e.parentElement, n = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null), d = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null), i = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null), s = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(!1), [c, u] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null), [y, l] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null), { editorConfig: a } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_12__.b)(), h = (a === null || a === void 0 ? void 0 : (_a_admin = a.admin) === null || _a_admin === void 0 ? void 0 : _a_admin.hideGutter) ? -44 : -8;\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        var _document;\n        function m(p) {\n            let f = p.target;\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.isHTMLElement)(f)) return;\n            let C = Y(r, p.pageX, p.pageY, f);\n            if (C === -1) {\n                u(null);\n                return;\n            }\n            if (ce(f, ko)) return;\n            let k = H(t), { blockElem: S, foundAtIndex: b, isFoundNodeEmptyParagraph: w } = G({\n                anchorElem: e,\n                cache_threshold: 0,\n                editor: t,\n                horizontalOffset: -C,\n                point: new _chunk_AFXLIYGL_js__WEBPACK_IMPORTED_MODULE_11__.f(p.x, p.y),\n                startIndex: Xe(k.length),\n                useEdgeAsDefault: !1,\n                verbose: !1\n            });\n            ee = b, !(!S && !w) && c !== S && u(S);\n        }\n        return (_document = document) === null || _document === void 0 ? void 0 : _document.addEventListener(\"mousemove\", m), ()=>{\n            var _document;\n            (_document = document) === null || _document === void 0 ? void 0 : _document.removeEventListener(\"mousemove\", m);\n        };\n    }, [\n        r,\n        e,\n        t,\n        c\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        n.current && de(c, n.current, e, h);\n    }, [\n        e,\n        c,\n        h\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        function m(f) {\n            if (!s.current) return !1;\n            let [C] = (0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_13__.eventFiles)(f);\n            if (C) return !1;\n            let { pageY: k, target: S } = f;\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.isHTMLElement)(S)) return !1;\n            let b = Y(r, f.pageX, f.pageY, S, 100, 50), w = H(t), { blockElem: N, foundAtIndex: v, isFoundNodeEmptyParagraph: B } = G({\n                anchorElem: e,\n                editor: t,\n                fuzzy: !0,\n                horizontalOffset: -b,\n                point: new _chunk_AFXLIYGL_js__WEBPACK_IMPORTED_MODULE_11__.f(f.x, f.y),\n                startIndex: Xe(w.length),\n                useEdgeAsDefault: !0,\n                verbose: !0\n            });\n            ee = v;\n            let T = d.current;\n            if (N === null || T === null) return !1;\n            if (c !== N) {\n                var _a_admin, _a_admin1, _n_current_getBoundingClientRect, _n_current, _n_current_getBoundingClientRect1, _n_current1;\n                var _n_current_getBoundingClientRect_width, _n_current_getBoundingClientRect_width1;\n                let { isBelow: D, willStayInSamePosition: J } = Ge((a === null || a === void 0 ? void 0 : (_a_admin = a.admin) === null || _a_admin === void 0 ? void 0 : _a_admin.hideGutter) ? \"0px\" : \"3rem\", h + ((a === null || a === void 0 ? void 0 : (_a_admin1 = a.admin) === null || _a_admin1 === void 0 ? void 0 : _a_admin1.hideGutter) ? (_n_current_getBoundingClientRect_width = n === null || n === void 0 ? void 0 : (_n_current = n.current) === null || _n_current === void 0 ? void 0 : (_n_current_getBoundingClientRect = _n_current.getBoundingClientRect()) === null || _n_current_getBoundingClientRect === void 0 ? void 0 : _n_current_getBoundingClientRect.width) !== null && _n_current_getBoundingClientRect_width !== void 0 ? _n_current_getBoundingClientRect_width : 0 : -((_n_current_getBoundingClientRect_width1 = n === null || n === void 0 ? void 0 : (_n_current1 = n.current) === null || _n_current1 === void 0 ? void 0 : (_n_current_getBoundingClientRect1 = _n_current1.getBoundingClientRect()) === null || _n_current_getBoundingClientRect1 === void 0 ? void 0 : _n_current_getBoundingClientRect1.width) !== null && _n_current_getBoundingClientRect_width1 !== void 0 ? _n_current_getBoundingClientRect_width1 : 0)), T, N, y, k, e, f, i, B);\n                f.preventDefault(), J || l({\n                    boundingBox: N.getBoundingClientRect(),\n                    elem: N,\n                    isBelow: D\n                });\n            } else (y === null || y === void 0 ? void 0 : y.elem) && (Ze(T, y.elem), l({\n                boundingBox: N.getBoundingClientRect(),\n                elem: N,\n                isBelow: !1\n            }));\n            return !0;\n        }\n        function p(f) {\n            if (!s.current) return !1;\n            let [C] = (0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_13__.eventFiles)(f);\n            if (C) return !1;\n            let { dataTransfer: k, pageY: S, target: b } = f, w = (k === null || k === void 0 ? void 0 : k.getData(Qe)) || \"\";\n            return t.update(()=>{\n                let N = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getNodeByKey)(w);\n                if (!N || !(0,lexical__WEBPACK_IMPORTED_MODULE_7__.isHTMLElement)(b)) return !1;\n                let v = Y(r, f.pageX, f.pageY, b, 100, 50), { blockElem: B, isFoundNodeEmptyParagraph: T } = G({\n                    anchorElem: e,\n                    editor: t,\n                    fuzzy: !0,\n                    horizontalOffset: -v,\n                    point: new _chunk_AFXLIYGL_js__WEBPACK_IMPORTED_MODULE_11__.f(f.x, f.y),\n                    useEdgeAsDefault: !0\n                });\n                if (!B) return !1;\n                let D = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getNearestNodeFromDOMNode)(B);\n                if (!D) return !1;\n                if (D === N) return !0;\n                let { height: J, top: he } = V(B), z = S >= he + J / 2 + window.scrollY;\n                T ? (D.insertBefore(N), D.remove()) : z ? D.insertAfter(N) : D.insertBefore(N), c !== null && u(null), document.querySelectorAll(\".lexical-block-highlighter\").forEach((L)=>{\n                    L.remove();\n                });\n                let oe = t.getElementByKey(N.getKey());\n                setTimeout(()=>{\n                    let L = oe === null || oe === void 0 ? void 0 : oe.getBoundingClientRect();\n                    if (!L) return;\n                    let P = document.createElement(\"div\");\n                    P.className = \"lexical-block-highlighter\", P.style.backgroundColor = \"var(--theme-elevation-1000\", P.style.transition = \"opacity 0.5s ease-in-out\", P.style.zIndex = \"1\", P.style.pointerEvents = \"none\", P.style.boxSizing = \"border-box\", P.style.borderRadius = \"4px\", P.style.position = \"absolute\", document.body.appendChild(P), P.style.opacity = \"0.1\", P.style.height = \"\".concat(L.height + 8, \"px\"), P.style.width = \"\".concat(L.width + 8, \"px\"), P.style.top = \"\".concat(L.top + window.scrollY - 4, \"px\"), P.style.left = \"\".concat(L.left - 4, \"px\"), setTimeout(()=>{\n                        P.style.opacity = \"0\", setTimeout(()=>{\n                            P.remove();\n                        }, 500);\n                    }, 1e3);\n                }, 120);\n            }), !0;\n        }\n        return document.addEventListener(\"dragover\", m), document.addEventListener(\"drop\", p), ()=>{\n            document.removeEventListener(\"dragover\", m), document.removeEventListener(\"drop\", p);\n        };\n    }, [\n        r,\n        h,\n        e,\n        t,\n        y,\n        c,\n        a === null || a === void 0 ? void 0 : (_a_admin1 = a.admin) === null || _a_admin1 === void 0 ? void 0 : _a_admin1.hideGutter\n    ]);\n    function x(m) {\n        let p = m.dataTransfer;\n        if (!p || !c) return;\n        To(p, c);\n        let f = \"\";\n        t.update(()=>{\n            let C = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getNearestNodeFromDOMNode)(c);\n            C && (f = C.getKey());\n        }), s.current = !0, p.setData(Qe, f);\n    }\n    function g() {\n        s.current = !1, (y === null || y === void 0 ? void 0 : y.elem) && Ze(d.current, y === null || y === void 0 ? void 0 : y.elem);\n    }\n    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_10__.createPortal)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                \"aria-label\": \"Drag to move\",\n                className: \"icon draggable-block-menu\",\n                draggable: !0,\n                onDragEnd: g,\n                onDragStart: x,\n                ref: n,\n                type: \"button\",\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: o ? \"icon\" : \"\"\n                })\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: \"draggable-block-target-line\",\n                ref: d\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: \"debug-highlight\",\n                ref: i\n            })\n        ]\n    }), e);\n}\n_c18 = Do;\nfunction tt(t) {\n    let { anchorElem: e } = t, o = e === void 0 ? document.body : e, [r] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)();\n    return Do(r, o, r._editable);\n}\n\n\n\n\n\nvar ot = \"insert-paragraph-at-end\", nt = ()=>{\n    var _o_admin;\n    let t = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_4__.c)(2), [e] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)(), { editorConfig: o } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_12__.b)();\n    if (o === null || o === void 0 ? void 0 : (_o_admin = o.admin) === null || _o_admin === void 0 ? void 0 : _o_admin.hideInsertParagraphAtEnd) return null;\n    let r;\n    return t[0] !== e ? (r = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"aria-label\": \"Insert Paragraph\",\n        className: ot,\n        onClick: ()=>{\n            e.update(Ao);\n        },\n        role: \"button\",\n        tabIndex: 0,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            className: \"\".concat(ot, \"-inside\"),\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                children: \"+\"\n            })\n        })\n    }), t[0] = e, t[1] = r) : r = t[1], r;\n};\nfunction Ao() {\n    let t = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$createParagraphNode)();\n    (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getRoot)().append(t), t.select();\n}\n_c19 = Ao;\n\n\n\nvar it = ()=>{\n    _s();\n    let t = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_4__.c)(4), { editorConfig: e } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_12__.b)(), [o] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)(), r, n;\n    return t[0] !== o || t[1] !== e.features.markdownTransformers ? (r = ()=>{\n        var _e_features_markdownTransformers;\n        return (0,_chunk_AFXLIYGL_js__WEBPACK_IMPORTED_MODULE_11__.a)(o, (_e_features_markdownTransformers = e.features.markdownTransformers) !== null && _e_features_markdownTransformers !== void 0 ? _e_features_markdownTransformers : []);\n    }, n = [\n        o,\n        e.features.markdownTransformers\n    ], t[0] = o, t[1] = e.features.markdownTransformers, t[2] = r, t[3] = n) : (r = t[2], n = t[3]), react__WEBPACK_IMPORTED_MODULE_2__.useEffect(r, n), null;\n};\n_s(it, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n\n\nfunction st() {\n    let [t] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)();\n    return (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>t.registerNodeTransform(lexical__WEBPACK_IMPORTED_MODULE_7__.RootNode, (e)=>{\n            let o = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n            if ((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isRangeSelection)(o)) {\n                let r = o.anchor.getNode(), n = o.focus.getNode();\n                (!r.isAttached() || !n.isAttached()) && (e.selectEnd(), console.warn(\"updateEditor: selection has been moved to the end of the editor because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.\"));\n            }\n            return !1;\n        }), [\n        t\n    ]), null;\n}\n\n\n\nfunction lt() {\n    let [t] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)();\n    return (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>t.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.SELECT_ALL_COMMAND, ()=>{\n            if ((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)()) return !1;\n            let o = document.activeElement;\n            return o instanceof HTMLInputElement && o.select(), !0;\n        }, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), [\n        t\n    ]), null;\n}\n\n\n\n\n\n\n\n\nfunction at(t, e) {\n    let o = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_4__.c)(4), { maxLength: r, minLength: n } = e, d = r === void 0 ? 75 : r, i = n === void 0 ? 1 : n, s;\n    return o[0] !== d || o[1] !== i || o[2] !== t ? (s = (c)=>{\n        let { query: u } = c, y = \"[^\" + t + _chunk_AFXLIYGL_js__WEBPACK_IMPORTED_MODULE_11__.h + \"\\\\s]\", a = new RegExp(\"(^|\\\\s|\\\\()([\" + t + \"]((?:\" + y + \"){0,\" + d + \"}))$\").exec(u);\n        if (a !== null) {\n            let h = a[1], x = a[3];\n            if (x.length >= i) return {\n                leadOffset: a.index + h.length,\n                matchingString: x,\n                replaceableString: a[2]\n            };\n        }\n        return null;\n    }, o[0] = d, o[1] = i, o[2] = t, o[3] = s) : s = o[3], s;\n}\nvar A = \"slash-menu-popup\";\nfunction Xo(param) {\n    let { isSelected: t, item: e, onClick: o, onMouseEnter: r, ref: n } = param;\n    let { fieldProps: { featureClientSchemaMap: d, schemaPath: i } } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_12__.b)(), { i18n: s } = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_14__.d)(), c = \"\".concat(A, \"__item \").concat(A, \"__item-\").concat(e.key);\n    t && (c += \" \".concat(A, \"__item--selected\"));\n    let u = e.key;\n    return e.label && (u = typeof e.label == \"function\" ? e.label({\n        featureClientSchemaMap: d,\n        i18n: s,\n        schemaPath: i\n    }) : e.label), u.length > 25 && (u = u.substring(0, 25) + \"...\"), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n        \"aria-selected\": t,\n        className: c,\n        id: A + \"__item-\" + e.key,\n        onClick: o,\n        onMouseEnter: r,\n        ref: n,\n        role: \"option\",\n        tabIndex: -1,\n        type: \"button\",\n        children: [\n            (e === null || e === void 0 ? void 0 : e.Icon) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(e.Icon, {}),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: \"\".concat(A, \"__item-text\"),\n                children: u\n            })\n        ]\n    }, e.key);\n}\n_c20 = Xo;\nfunction mt(param) {\n    let { anchorElem: t = document.body } = param;\n    let [e] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)(), [o, r] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null), { editorConfig: n } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_12__.b)(), { i18n: d } = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_14__.d)(), { fieldProps: { featureClientSchemaMap: i, schemaPath: s } } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_12__.b)(), c = at(\"/\", {\n        minLength: 0\n    }), u = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        let l = [];\n        for (let a of n.features.slashMenu.dynamicGroups)if (o) {\n            let h = a({\n                editor: e,\n                queryString: o\n            });\n            l = l.concat(h);\n        }\n        return l;\n    }, [\n        e,\n        o,\n        n === null || n === void 0 ? void 0 : n.features\n    ]), y = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        let l = [];\n        var _n_features_slashMenu_groups;\n        for (let a of (_n_features_slashMenu_groups = n === null || n === void 0 ? void 0 : n.features.slashMenu.groups) !== null && _n_features_slashMenu_groups !== void 0 ? _n_features_slashMenu_groups : [])l.push(a);\n        if (o) {\n            l = l.map((h)=>{\n                let x = h.items.filter((g)=>{\n                    let m = g.key;\n                    return g.label && (m = typeof g.label == \"function\" ? g.label({\n                        featureClientSchemaMap: i,\n                        i18n: d,\n                        schemaPath: s\n                    }) : g.label), new RegExp(o, \"gi\").exec(m) ? !0 : g.keywords != null ? g.keywords.some((p)=>new RegExp(o, \"gi\").exec(p)) : !1;\n                });\n                return x.length ? {\n                    ...h,\n                    items: x\n                } : null;\n            }), l = l.filter((h)=>h != null);\n            let a = u();\n            for (let h of a){\n                var _x_items;\n                let x = l.find((g)=>g.key === h.key);\n                x ? l = l.filter((g)=>g.key !== h.key) : x = {\n                    ...h,\n                    items: []\n                }, (x === null || x === void 0 ? void 0 : (_x_items = x.items) === null || _x_items === void 0 ? void 0 : _x_items.length) && (x.items = x.items.concat(x.items)), l.push(x);\n            }\n        }\n        return l;\n    }, [\n        o,\n        n === null || n === void 0 ? void 0 : n.features.slashMenu.groups,\n        u,\n        i,\n        d,\n        s\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_chunk_AFXLIYGL_js__WEBPACK_IMPORTED_MODULE_11__.j, {\n        anchorElem: t,\n        groups: y,\n        menuRenderFn: (l, param)=>{\n            let { selectedItemKey: a, selectItemAndCleanUp: h, setSelectedItemKey: x } = param;\n            return l.current && y.length ? /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_10__.createPortal((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: A,\n                children: y.map((g)=>{\n                    let m = g.key;\n                    return g.label && i && (m = typeof g.label == \"function\" ? g.label({\n                        featureClientSchemaMap: i,\n                        i18n: d,\n                        schemaPath: s\n                    }) : g.label), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        className: \"\".concat(A, \"__group \").concat(A, \"__group-\").concat(g.key),\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                className: \"\".concat(A, \"__group-title\"),\n                                children: m\n                            }),\n                            g.items.map((p, f)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Xo, {\n                                    index: f,\n                                    isSelected: a === p.key,\n                                    item: p,\n                                    onClick: ()=>{\n                                        x(p.key), h(p);\n                                    },\n                                    onMouseEnter: ()=>{\n                                        x(p.key);\n                                    },\n                                    ref: (C)=>{\n                                        p.ref = {\n                                            current: C\n                                        };\n                                    }\n                                }, p.key))\n                        ]\n                    }, g.key);\n                })\n            }), l.current) : null;\n        },\n        onQueryChange: r,\n        triggerFn: c\n    });\n}\n\n\n\n\nfunction ft(t) {\n    let e = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_4__.c)(6), { features: o } = t, [r] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)(), n;\n    e[0] !== r || e[1] !== o.enabledFormats ? (n = ()=>{\n        let i = rn(o.enabledFormats);\n        if (i.length !== 0) return r.registerNodeTransform(lexical__WEBPACK_IMPORTED_MODULE_7__.TextNode, (s)=>{\n            i.forEach((c)=>{\n                s.hasFormat(c) && s.toggleFormat(c);\n            });\n        });\n    }, e[0] = r, e[1] = o.enabledFormats, e[2] = n) : n = e[2];\n    let d;\n    return e[3] !== r || e[4] !== o ? (d = [\n        r,\n        o\n    ], e[3] = r, e[4] = o, e[5] = d) : d = e[5], (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(n, d), null;\n}\nfunction rn(t) {\n    let e = Object.keys(lexical__WEBPACK_IMPORTED_MODULE_7__.TEXT_TYPE_TO_FORMAT), o = new Set(t);\n    return e.filter((r)=>!o.has(r));\n}\n\n\n\n\n\n\nfunction gt(t) {\n    var _r_admin;\n    let e = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_4__.c)(5), { className: o, editorConfig: r } = t, { t: n } = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_14__.d)(), [, d] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)(), { getTheme: i } = d, s;\n    if (e[0] !== o || e[1] !== (r === null || r === void 0 ? void 0 : (_r_admin = r.admin) === null || _r_admin === void 0 ? void 0 : _r_admin.placeholder) || e[2] !== i || e[3] !== n) {\n        var _r_admin1, _r_admin2;\n        let c = i();\n        var _r_admin_placeholder;\n        s = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalContentEditable_js__WEBPACK_IMPORTED_MODULE_15__.ContentEditable, {\n            \"aria-placeholder\": n(\"lexical:general:placeholder\"),\n            className: o !== null && o !== void 0 ? o : \"ContentEditable__root\",\n            placeholder: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                className: c === null || c === void 0 ? void 0 : c.placeholder,\n                children: (_r_admin_placeholder = r === null || r === void 0 ? void 0 : (_r_admin1 = r.admin) === null || _r_admin1 === void 0 ? void 0 : _r_admin1.placeholder) !== null && _r_admin_placeholder !== void 0 ? _r_admin_placeholder : n(\"lexical:general:placeholder\")\n            })\n        }), e[0] = o, e[1] = r === null || r === void 0 ? void 0 : (_r_admin2 = r.admin) === null || _r_admin2 === void 0 ? void 0 : _r_admin2.placeholder, e[2] = i, e[3] = n, e[4] = s;\n    } else s = e[4];\n    return s;\n}\nvar yt = (t)=>{\n    var _o_features_plugins, _o_features_plugins1, _o_admin, _o_admin1, _o_features_plugins2, _o_features_markdownTransformers, _o_features, _o_features_plugins3, _o_features_plugins4, _o_features_plugins5;\n    let e = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_4__.c)(12), { editorConfig: o, editorContainerRef: r, isSmallWidthViewport: n, onChange: d } = t, i = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_12__.b)(), [s] = (0,_lexical_react_LexicalComposerContext_js__WEBPACK_IMPORTED_MODULE_6__.useLexicalComposerContext)(), c = (0,_lexical_react_useLexicalEditable__WEBPACK_IMPORTED_MODULE_16__.useLexicalEditable)(), [u, y] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null), l;\n    e[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (l = (m)=>{\n        m !== null && y(m);\n    }, e[0] = l) : l = e[0];\n    let a = l, h, x;\n    e[1] !== s || e[2] !== i ? (h = ()=>{\n        var _i_parentEditor, _i_parentEditor1;\n        if (!(i === null || i === void 0 ? void 0 : i.uuid)) {\n            console.error(\"Lexical Editor must be used within an EditorConfigProvider\");\n            return;\n        }\n        (i === null || i === void 0 ? void 0 : (_i_parentEditor = i.parentEditor) === null || _i_parentEditor === void 0 ? void 0 : _i_parentEditor.uuid) && ((_i_parentEditor1 = i.parentEditor) === null || _i_parentEditor1 === void 0 ? void 0 : _i_parentEditor1.registerChild(i.uuid, i));\n        let m = ()=>{\n            i.focusEditor(i);\n        }, p = ()=>{\n            i.blurEditor(i);\n        }, f = s.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.FOCUS_COMMAND, ()=>(m(), !0), lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), C = s.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.BLUR_COMMAND, ()=>(p(), !0), lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW);\n        return ()=>{\n            var _i_parentEditor_unregisterChild, _i_parentEditor;\n            f(), C(), (_i_parentEditor = i.parentEditor) === null || _i_parentEditor === void 0 ? void 0 : (_i_parentEditor_unregisterChild = _i_parentEditor.unregisterChild) === null || _i_parentEditor_unregisterChild === void 0 ? void 0 : _i_parentEditor_unregisterChild.call(_i_parentEditor, i.uuid);\n        };\n    }, x = [\n        s,\n        i\n    ], e[1] = s, e[2] = i, e[3] = h, e[4] = x) : (h = e[3], x = e[4]), (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(h, x);\n    let g;\n    return e[5] !== o || e[6] !== r || e[7] !== u || e[8] !== c || e[9] !== n || e[10] !== d ? (g = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n        children: [\n            (_o_features_plugins = o.features.plugins) === null || _o_features_plugins === void 0 ? void 0 : _o_features_plugins.map(bn),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: \"editor-container\",\n                ref: r,\n                children: [\n                    (_o_features_plugins1 = o.features.plugins) === null || _o_features_plugins1 === void 0 ? void 0 : _o_features_plugins1.map(Nn),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalRichTextPlugin_js__WEBPACK_IMPORTED_MODULE_17__.RichTextPlugin, {\n                        contentEditable: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"editor-scroller\",\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                className: \"editor\",\n                                ref: a,\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(gt, {\n                                    editorConfig: o\n                                })\n                            })\n                        }),\n                        ErrorBoundary: _lexical_react_LexicalErrorBoundary_js__WEBPACK_IMPORTED_MODULE_18__.LexicalErrorBoundary\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(st, {}),\n                    c && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(nt, {}),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Fe, {}),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Be, {}),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ft, {\n                        features: o.features\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(lt, {}),\n                    c && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalOnChangePlugin_js__WEBPACK_IMPORTED_MODULE_19__.OnChangePlugin, {\n                        ignoreSelectionChange: !0,\n                        onChange: (m, p, f)=>{\n                            (!f.has(\"focus\") || f.size > 1) && (d === null || d === void 0 ? void 0 : d(m, p, f));\n                        }\n                    }),\n                    u && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n                        children: [\n                            !n && c && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n                                children: [\n                                    ((_o_admin = o.admin) === null || _o_admin === void 0 ? void 0 : _o_admin.hideDraggableBlockElement) ? null : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tt, {\n                                        anchorElem: u\n                                    }),\n                                    ((_o_admin1 = o.admin) === null || _o_admin1 === void 0 ? void 0 : _o_admin1.hideAddBlockButton) ? null : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Ye, {\n                                        anchorElem: u\n                                    })\n                                ]\n                            }),\n                            (_o_features_plugins2 = o.features.plugins) === null || _o_features_plugins2 === void 0 ? void 0 : _o_features_plugins2.map((m)=>{\n                                if (m.position === \"floatingAnchorElem\" && !(m.desktopOnly === !0 && n)) return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($, {\n                                    anchorElem: u,\n                                    clientProps: m.clientProps,\n                                    plugin: m\n                                }, m.key);\n                            }),\n                            c && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(mt, {\n                                    anchorElem: u\n                                })\n                            })\n                        ]\n                    }),\n                    c && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalHistoryPlugin_js__WEBPACK_IMPORTED_MODULE_20__.HistoryPlugin, {}),\n                            (o === null || o === void 0 ? void 0 : (_o_features = o.features) === null || _o_features === void 0 ? void 0 : (_o_features_markdownTransformers = _o_features.markdownTransformers) === null || _o_features_markdownTransformers === void 0 ? void 0 : _o_features_markdownTransformers.length) > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(it, {})\n                        ]\n                    }),\n                    (_o_features_plugins3 = o.features.plugins) === null || _o_features_plugins3 === void 0 ? void 0 : _o_features_plugins3.map(Pn),\n                    (_o_features_plugins4 = o.features.plugins) === null || _o_features_plugins4 === void 0 ? void 0 : _o_features_plugins4.map(Sn)\n                ]\n            }),\n            (_o_features_plugins5 = o.features.plugins) === null || _o_features_plugins5 === void 0 ? void 0 : _o_features_plugins5.map(Rn)\n        ]\n    }), e[5] = o, e[6] = r, e[7] = u, e[8] = c, e[9] = n, e[10] = d, e[11] = g) : g = e[11], g;\n};\nfunction bn(t) {\n    if (t.position === \"aboveContainer\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\nfunction Nn(t) {\n    if (t.position === \"top\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\n_c21 = Nn;\nfunction Pn(t) {\n    if (t.position === \"normal\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\n_c22 = Pn;\nfunction Sn(t) {\n    if (t.position === \"bottom\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\n_c23 = Sn;\nfunction Rn(t) {\n    if (t.position === \"belowContainer\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\n_c24 = Rn;\nvar Et = (param)=>{\n    let { children: t, providers: e } = param;\n    if (!(e === null || e === void 0 ? void 0 : e.length)) return t;\n    let o = e[0];\n    return e.length > 1 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(o, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Et, {\n            providers: e.slice(1),\n            children: t\n        })\n    }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(o, {\n        children: t\n    });\n}, Ct = (t)=>{\n    _s1();\n    let { composerKey: e, editorConfig: o, fieldProps: r, isSmallWidthViewport: n, onChange: d, readOnly: i, value: s } = t, c = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_12__.b)(), u = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_21__.useEditDepth)(), y = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null), l = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        if (s && typeof s != \"object\") throw new Error(\"The value passed to the Lexical editor is not an object. This is not supported. Please remove the data from the field and start again. This is the value that was passed in: \" + JSON.stringify(s));\n        if (s && Array.isArray(s) && !(\"root\" in s)) throw new Error(\"You have tried to pass in data from the old Slate editor to the new Lexical editor. The data structure is different, thus you will have to migrate your data. We offer a one-line migration script which migrates all your rich text fields: https://payloadcms.com/docs/lexical/migration#migration-via-migration-script-recommended\");\n        if (s && \"jsonContent\" in s) throw new Error(\"You have tried to pass in data from payload-plugin-lexical. The data structure is different, thus you will have to migrate your data. Migration guide: https://payloadcms.com/docs/lexical/migration#migrating-from-payload-plugin-lexical\");\n        return {\n            editable: i !== !0,\n            editorState: s != null ? JSON.stringify(s) : void 0,\n            namespace: o.lexical.namespace,\n            nodes: (0,_chunk_AFXLIYGL_js__WEBPACK_IMPORTED_MODULE_11__.l)({\n                editorConfig: o\n            }),\n            onError: (a)=>{\n                throw a;\n            },\n            theme: o.lexical.theme\n        };\n    }, [\n        o\n    ]);\n    return l ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalComposer_js__WEBPACK_IMPORTED_MODULE_22__.LexicalComposer, {\n        initialConfig: l,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_12__.a, {\n            editorConfig: o,\n            editorContainerRef: y,\n            fieldProps: r,\n            parentContext: (c === null || c === void 0 ? void 0 : c.editDepth) === u ? c : void 0,\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Et, {\n                providers: o.features.providers,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(yt, {\n                    editorConfig: o,\n                    editorContainerRef: y,\n                    isSmallWidthViewport: n,\n                    onChange: d\n                })\n            })\n        })\n    }, e + l.editable) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n        children: \"Loading...\"\n    });\n};\n_s1(Ct, \"UAb8e70N2FUi5D7euwpGgST+68E=\");\nvar pe = \"rich-text-lexical\", $n = (t)=>{\n    var _e_admin;\n    _s2();\n    let { editorConfig: e, field: o, field: { admin: { className: r, description: n, readOnly: d } = {}, label: i, localized: s, required: c }, path: u, readOnly: y, validate: l } = t, a = y || d, h = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_21__.useEditDepth)(), x = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((M, Q)=>typeof l == \"function\" ? l(M, {\n            ...Q,\n            required: c\n        }) : !0, [\n        l,\n        c\n    ]), { customComponents: { AfterInput: g, BeforeInput: m, Description: p, Error: f, Label: C } = {}, disabled: k, initialValue: S, path: b, setValue: w, showError: N, value: v } = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_21__.useField)({\n        potentiallyStalePath: u,\n        validate: x\n    }), B = a || k, [T, D] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(!1), [J, he] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(), ye = react__WEBPACK_IMPORTED_MODULE_2__.useRef(S), z = react__WEBPACK_IMPORTED_MODULE_2__.useRef(v);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        let M = ()=>{\n            let Q = window.matchMedia(\"(max-width: 768px)\").matches;\n            Q !== T && D(Q);\n        };\n        return M(), window.addEventListener(\"resize\", M), ()=>{\n            window.removeEventListener(\"resize\", M);\n        };\n    }, [\n        T\n    ]);\n    let Pe = [\n        pe,\n        \"field-type\",\n        r,\n        N && \"error\",\n        B && \"\".concat(pe, \"--read-only\"),\n        (e === null || e === void 0 ? void 0 : (_e_admin = e.admin) === null || _e_admin === void 0 ? void 0 : _e_admin.hideGutter) !== !0 && !T ? \"\".concat(pe, \"--show-gutter\") : null\n    ].filter(Boolean).join(\" \"), oe = \"\".concat(b, \".\").concat(h), L = (0,_chunk_AFXLIYGL_js__WEBPACK_IMPORTED_MODULE_11__.e)(), P = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((M)=>{\n        L(()=>{\n            let Se = M.toJSON();\n            z.current = Se, w(Se);\n        });\n    }, [\n        w,\n        L\n    ]), wt = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>(0,_payloadcms_ui_shared__WEBPACK_IMPORTED_MODULE_23__.mergeFieldStyles)(o), [\n        o\n    ]), kt = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_21__.useEffectEvent)((M)=>{\n        z.current !== v && !(0,dequal_lite__WEBPACK_IMPORTED_MODULE_1__.dequal)(JSON.parse(JSON.stringify(z.current)), v) && (ye.current = M, z.current = v, he(new Date));\n    });\n    return (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        Object.is(S, ye.current) || kt(S);\n    }, [\n        S\n    ]), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: Pe,\n        style: wt,\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_21__.RenderCustomComponent, {\n                CustomComponent: f,\n                Fallback: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_21__.FieldError, {\n                    path: b,\n                    showError: N\n                })\n            }),\n            C || (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_21__.FieldLabel, {\n                label: i,\n                localized: s,\n                path: b,\n                required: c\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: \"\".concat(pe, \"__wrap\"),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_error_boundary__WEBPACK_IMPORTED_MODULE_24__.ErrorBoundary, {\n                        fallbackRender: Kn,\n                        onReset: ()=>{},\n                        children: [\n                            m,\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Ct, {\n                                composerKey: oe,\n                                editorConfig: e,\n                                fieldProps: t,\n                                isSmallWidthViewport: T,\n                                onChange: P,\n                                readOnly: B,\n                                value: v\n                            }, JSON.stringify({\n                                path: b,\n                                rerenderProviderKey: J\n                            })),\n                            g\n                        ]\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_21__.RenderCustomComponent, {\n                        CustomComponent: p,\n                        Fallback: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_21__.FieldDescription, {\n                            description: n,\n                            path: b\n                        })\n                    })\n                ]\n            })\n        ]\n    }, oe);\n};\n_s2($n, \"oRKmpJL9BbYivRh7ug8x90GGR8E=\");\nfunction Kn(param) {\n    let { error: t } = param;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: \"errorBoundary\",\n        role: \"alert\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                children: \"Something went wrong:\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", {\n                style: {\n                    color: \"red\"\n                },\n                children: t.message\n            })\n        ]\n    });\n}\n_c25 = Kn;\nvar _s3 = $n;\n //# sourceMappingURL=Field-F2KOJLMQ.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25;\n$RefreshReg$(_c, \"Be\");\n$RefreshReg$(_c1, \"Fe\");\n$RefreshReg$(_c2, \"Jt\");\n$RefreshReg$(_c3, \"Qt\");\n$RefreshReg$(_c4, \"Xt\");\n$RefreshReg$(_c5, \"Zt\");\n$RefreshReg$(_c6, \"Z\");\n$RefreshReg$(_c7, \"Ke\");\n$RefreshReg$(_c8, \"Y\");\n$RefreshReg$(_c9, \"V\");\n$RefreshReg$(_c10, \"H\");\n$RefreshReg$(_c11, \"G\");\n$RefreshReg$(_c12, \"Co\");\n$RefreshReg$(_c13, \"Ye\");\n$RefreshReg$(_c14, \"Ge\");\n$RefreshReg$(_c15, \"Xe\");\n$RefreshReg$(_c16, \"To\");\n$RefreshReg$(_c17, \"Ze\");\n$RefreshReg$(_c18, \"Do\");\n$RefreshReg$(_c19, \"Ao\");\n$RefreshReg$(_c20, \"Xo\");\n$RefreshReg$(_c21, \"Nn\");\n$RefreshReg$(_c22, \"Pn\");\n$RefreshReg$(_c23, \"Sn\");\n$RefreshReg$(_c24, \"Rn\");\n$RefreshReg$(_c25, \"Kn\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/Field-F2KOJLMQ.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/bundled.css":
/*!***********************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/exports/client/bundled.css ***!
  \***********************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"a3cbe89fdb44\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZXhwb3J0cy9jbGllbnQvYnVuZGxlZC5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyIvVXNlcnMvbWFnbnVzb2hsZS9jdXJzb3Jwcm9qZWN0cy9zbXBsYXQvYXBwcy1jbXMtcGF5bG9hZC9ub2RlX21vZHVsZXMvQHBheWxvYWRjbXMvcmljaHRleHQtbGV4aWNhbC9kaXN0L2V4cG9ydHMvY2xpZW50L2J1bmRsZWQuY3NzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiYTNjYmU4OWZkYjQ0XCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/bundled.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorBoundary: () => (/* binding */ ErrorBoundary),\n/* harmony export */   ErrorBoundaryContext: () => (/* binding */ ErrorBoundaryContext),\n/* harmony export */   useErrorBoundary: () => (/* binding */ useErrorBoundary),\n/* harmony export */   withErrorBoundary: () => (/* binding */ withErrorBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ ErrorBoundary,ErrorBoundaryContext,useErrorBoundary,withErrorBoundary auto */ var _s = $RefreshSig$();\n\nconst ErrorBoundaryContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst initialState = {\n    didCatch: false,\n    error: null\n};\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    static getDerivedStateFromError(error) {\n        return {\n            didCatch: true,\n            error\n        };\n    }\n    resetErrorBoundary() {\n        const { error } = this.state;\n        if (error !== null) {\n            var _this$props$onReset, _this$props;\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 ? void 0 : _this$props$onReset.call(_this$props, {\n                args,\n                reason: \"imperative-api\"\n            });\n            this.setState(initialState);\n        }\n    }\n    componentDidCatch(error, info) {\n        var _this$props$onError, _this$props2;\n        (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props2, error, info);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { didCatch } = this.state;\n        const { resetKeys } = this.props;\n        // There's an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,\n        // we'd end up resetting the error boundary immediately.\n        // This would likely trigger a second error to be thrown.\n        // So we make sure that we don't check the resetKeys on the first call of cDU after the error is set.\n        if (didCatch && prevState.error !== null && hasArrayChanged(prevProps.resetKeys, resetKeys)) {\n            var _this$props$onReset2, _this$props3;\n            (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 ? void 0 : _this$props$onReset2.call(_this$props3, {\n                next: resetKeys,\n                prev: prevProps.resetKeys,\n                reason: \"keys\"\n            });\n            this.setState(initialState);\n        }\n    }\n    render() {\n        const { children, fallbackRender, FallbackComponent, fallback } = this.props;\n        const { didCatch, error } = this.state;\n        let childToRender = children;\n        if (didCatch) {\n            const props = {\n                error,\n                resetErrorBoundary: this.resetErrorBoundary\n            };\n            if (typeof fallbackRender === \"function\") {\n                childToRender = fallbackRender(props);\n            } else if (FallbackComponent) {\n                childToRender = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(FallbackComponent, props);\n            } else if (fallback !== undefined) {\n                childToRender = fallback;\n            } else {\n                {\n                    console.error(\"react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop\");\n                }\n                throw error;\n            }\n        }\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(ErrorBoundaryContext.Provider, {\n            value: {\n                didCatch,\n                error,\n                resetErrorBoundary: this.resetErrorBoundary\n            }\n        }, childToRender);\n    }\n    constructor(props){\n        super(props);\n        this.resetErrorBoundary = this.resetErrorBoundary.bind(this);\n        this.state = initialState;\n    }\n}\nfunction hasArrayChanged() {\n    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return a.length !== b.length || a.some((item, index)=>!Object.is(item, b[index]));\n}\nfunction assertErrorBoundaryContext(value) {\n    if (value == null || typeof value.didCatch !== \"boolean\" || typeof value.resetErrorBoundary !== \"function\") {\n        throw new Error(\"ErrorBoundaryContext not found\");\n    }\n}\nfunction useErrorBoundary() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ErrorBoundaryContext);\n    assertErrorBoundaryContext(context);\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        error: null,\n        hasError: false\n    });\n    const memoized = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useErrorBoundary.useMemo[memoized]\": ()=>({\n                resetBoundary: ({\n                    \"useErrorBoundary.useMemo[memoized]\": ()=>{\n                        context.resetErrorBoundary();\n                        setState({\n                            error: null,\n                            hasError: false\n                        });\n                    }\n                })[\"useErrorBoundary.useMemo[memoized]\"],\n                showBoundary: ({\n                    \"useErrorBoundary.useMemo[memoized]\": (error)=>setState({\n                            error,\n                            hasError: true\n                        })\n                })[\"useErrorBoundary.useMemo[memoized]\"]\n            })\n    }[\"useErrorBoundary.useMemo[memoized]\"], [\n        context.resetErrorBoundary\n    ]);\n    if (state.hasError) {\n        throw state.error;\n    }\n    return memoized;\n}\n_s(useErrorBoundary, \"+pKi6m5l0SpCZXu8kma/1W0pdXE=\");\nfunction withErrorBoundary(component, errorBoundaryProps) {\n    const Wrapped = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(ErrorBoundary, errorBoundaryProps, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(component, {\n            ...props,\n            ref\n        })));\n    // Format for display in DevTools\n    const name = component.displayName || component.name || \"Unknown\";\n    Wrapped.displayName = \"withErrorBoundary(\".concat(name, \")\");\n    return Wrapped;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js\n"));

/***/ })

}]);